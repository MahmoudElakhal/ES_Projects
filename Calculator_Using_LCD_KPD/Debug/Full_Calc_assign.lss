
Full_Calc_assign.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  00800060  000023e8  0000245c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000017d0  00000000  00000000  0000258c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d75  00000000  00000000  00003d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00004ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00004c71  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00004e63  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  0000726e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  000085f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  000097cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000998c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  00009c82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a5f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <main>
      7a:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	af e6       	ldi	r26, 0x6F	; 111
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 d7 11 	jmp	0x23ae	; 0x23ae <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8f e6       	ldi	r24, 0x6F	; 111
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 d7 11 	jmp	0x23ae	; 0x23ae <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6f e6       	ldi	r22, 0x6F	; 111
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 df 11 	jmp	0x23be	; 0x23be <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 df 11 	jmp	0x23be	; 0x23be <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e9 58       	subi	r30, 0x89	; 137
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <CLCD_VoidSendCommand>:
#include "CLCD_Interface.h"
#include "CLCD_Config.h"


void CLCD_VoidSendCommand (u8 Copy_u8Command)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	2f 97       	sbiw	r28, 0x0f	; 15
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
     e32:	8f 87       	std	Y+15, r24	; 0x0f
	/* Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN ,DIO_u8PIN_LOW );
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	40 e0       	ldi	r20, 0x00	; 0
     e3a:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>

	/*Set RW to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN  ,DIO_u8PIN_LOW);
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	61 e0       	ldi	r22, 0x01	; 1
     e42:	40 e0       	ldi	r20, 0x00	; 0
     e44:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>

	/*Set Command to data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT , Copy_u8Command);
     e48:	82 e0       	ldi	r24, 0x02	; 2
     e4a:	6f 85       	ldd	r22, Y+15	; 0x0f
     e4c:	0e 94 92 0c 	call	0x1924	; 0x1924 <DIO_u8SetPortValue>

	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH);
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	62 e0       	ldi	r22, 0x02	; 2
     e54:	41 e0       	ldi	r20, 0x01	; 1
     e56:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	a0 e0       	ldi	r26, 0x00	; 0
     e60:	b0 e4       	ldi	r27, 0x40	; 64
     e62:	8b 87       	std	Y+11, r24	; 0x0b
     e64:	9c 87       	std	Y+12, r25	; 0x0c
     e66:	ad 87       	std	Y+13, r26	; 0x0d
     e68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e6c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e70:	9e 85       	ldd	r25, Y+14	; 0x0e
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	4a ef       	ldi	r20, 0xFA	; 250
     e78:	54 e4       	ldi	r21, 0x44	; 68
     e7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	8f 83       	std	Y+7, r24	; 0x07
     e84:	98 87       	std	Y+8, r25	; 0x08
     e86:	a9 87       	std	Y+9, r26	; 0x09
     e88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e8a:	6f 81       	ldd	r22, Y+7	; 0x07
     e8c:	78 85       	ldd	r23, Y+8	; 0x08
     e8e:	89 85       	ldd	r24, Y+9	; 0x09
     e90:	9a 85       	ldd	r25, Y+10	; 0x0a
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	40 e8       	ldi	r20, 0x80	; 128
     e98:	5f e3       	ldi	r21, 0x3F	; 63
     e9a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     e9e:	88 23       	and	r24, r24
     ea0:	2c f4       	brge	.+10     	; 0xeac <CLCD_VoidSendCommand+0x8e>
		__ticks = 1;
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	9e 83       	std	Y+6, r25	; 0x06
     ea8:	8d 83       	std	Y+5, r24	; 0x05
     eaa:	3f c0       	rjmp	.+126    	; 0xf2a <CLCD_VoidSendCommand+0x10c>
	else if (__tmp > 65535)
     eac:	6f 81       	ldd	r22, Y+7	; 0x07
     eae:	78 85       	ldd	r23, Y+8	; 0x08
     eb0:	89 85       	ldd	r24, Y+9	; 0x09
     eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	3f ef       	ldi	r19, 0xFF	; 255
     eb8:	4f e7       	ldi	r20, 0x7F	; 127
     eba:	57 e4       	ldi	r21, 0x47	; 71
     ebc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     ec0:	18 16       	cp	r1, r24
     ec2:	4c f5       	brge	.+82     	; 0xf16 <CLCD_VoidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ec4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ec6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ec8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eca:	9e 85       	ldd	r25, Y+14	; 0x0e
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	40 e2       	ldi	r20, 0x20	; 32
     ed2:	51 e4       	ldi	r21, 0x41	; 65
     ed4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	bc 01       	movw	r22, r24
     ede:	cd 01       	movw	r24, r26
     ee0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	9e 83       	std	Y+6, r25	; 0x06
     eea:	8d 83       	std	Y+5, r24	; 0x05
     eec:	0f c0       	rjmp	.+30     	; 0xf0c <CLCD_VoidSendCommand+0xee>
     eee:	88 ec       	ldi	r24, 0xC8	; 200
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	9c 83       	std	Y+4, r25	; 0x04
     ef4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	9c 81       	ldd	r25, Y+4	; 0x04
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	f1 f7       	brne	.-4      	; 0xefa <CLCD_VoidSendCommand+0xdc>
     efe:	9c 83       	std	Y+4, r25	; 0x04
     f00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f02:	8d 81       	ldd	r24, Y+5	; 0x05
     f04:	9e 81       	ldd	r25, Y+6	; 0x06
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	9e 83       	std	Y+6, r25	; 0x06
     f0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f0c:	8d 81       	ldd	r24, Y+5	; 0x05
     f0e:	9e 81       	ldd	r25, Y+6	; 0x06
     f10:	00 97       	sbiw	r24, 0x00	; 0
     f12:	69 f7       	brne	.-38     	; 0xeee <CLCD_VoidSendCommand+0xd0>
     f14:	14 c0       	rjmp	.+40     	; 0xf3e <CLCD_VoidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f16:	6f 81       	ldd	r22, Y+7	; 0x07
     f18:	78 85       	ldd	r23, Y+8	; 0x08
     f1a:	89 85       	ldd	r24, Y+9	; 0x09
     f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f22:	dc 01       	movw	r26, r24
     f24:	cb 01       	movw	r24, r22
     f26:	9e 83       	std	Y+6, r25	; 0x06
     f28:	8d 83       	std	Y+5, r24	; 0x05
     f2a:	8d 81       	ldd	r24, Y+5	; 0x05
     f2c:	9e 81       	ldd	r25, Y+6	; 0x06
     f2e:	9a 83       	std	Y+2, r25	; 0x02
     f30:	89 83       	std	Y+1, r24	; 0x01
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	9a 81       	ldd	r25, Y+2	; 0x02
     f36:	01 97       	sbiw	r24, 0x01	; 1
     f38:	f1 f7       	brne	.-4      	; 0xf36 <CLCD_VoidSendCommand+0x118>
     f3a:	9a 83       	std	Y+2, r25	; 0x02
     f3c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW);
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	62 e0       	ldi	r22, 0x02	; 2
     f42:	40 e0       	ldi	r20, 0x00	; 0
     f44:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
}
     f48:	2f 96       	adiw	r28, 0x0f	; 15
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	cd bf       	out	0x3d, r28	; 61
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <CLCD_VoidSendData>:

void CLCD_VoidSendData (u8 Copy_u8Data)
{
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	2f 97       	sbiw	r28, 0x0f	; 15
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	cd bf       	out	0x3d, r28	; 61
     f6e:	8f 87       	std	Y+15, r24	; 0x0f
	/* Set RS pin to high for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN ,DIO_u8PIN_HIGH );
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	41 e0       	ldi	r20, 0x01	; 1
     f76:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>

	/*Set RW to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN  ,DIO_u8PIN_LOW);
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	61 e0       	ldi	r22, 0x01	; 1
     f7e:	40 e0       	ldi	r20, 0x00	; 0
     f80:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>

	/*Set DATA to data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT , Copy_u8Data);
     f84:	82 e0       	ldi	r24, 0x02	; 2
     f86:	6f 85       	ldd	r22, Y+15	; 0x0f
     f88:	0e 94 92 0c 	call	0x1924	; 0x1924 <DIO_u8SetPortValue>

	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH);
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	62 e0       	ldi	r22, 0x02	; 2
     f90:	41 e0       	ldi	r20, 0x01	; 1
     f92:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	a0 e0       	ldi	r26, 0x00	; 0
     f9c:	b0 e4       	ldi	r27, 0x40	; 64
     f9e:	8b 87       	std	Y+11, r24	; 0x0b
     fa0:	9c 87       	std	Y+12, r25	; 0x0c
     fa2:	ad 87       	std	Y+13, r26	; 0x0d
     fa4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fa6:	6b 85       	ldd	r22, Y+11	; 0x0b
     fa8:	7c 85       	ldd	r23, Y+12	; 0x0c
     faa:	8d 85       	ldd	r24, Y+13	; 0x0d
     fac:	9e 85       	ldd	r25, Y+14	; 0x0e
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	4a ef       	ldi	r20, 0xFA	; 250
     fb4:	54 e4       	ldi	r21, 0x44	; 68
     fb6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	8f 83       	std	Y+7, r24	; 0x07
     fc0:	98 87       	std	Y+8, r25	; 0x08
     fc2:	a9 87       	std	Y+9, r26	; 0x09
     fc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fc6:	6f 81       	ldd	r22, Y+7	; 0x07
     fc8:	78 85       	ldd	r23, Y+8	; 0x08
     fca:	89 85       	ldd	r24, Y+9	; 0x09
     fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	40 e8       	ldi	r20, 0x80	; 128
     fd4:	5f e3       	ldi	r21, 0x3F	; 63
     fd6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     fda:	88 23       	and	r24, r24
     fdc:	2c f4       	brge	.+10     	; 0xfe8 <CLCD_VoidSendData+0x8e>
		__ticks = 1;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	9e 83       	std	Y+6, r25	; 0x06
     fe4:	8d 83       	std	Y+5, r24	; 0x05
     fe6:	3f c0       	rjmp	.+126    	; 0x1066 <CLCD_VoidSendData+0x10c>
	else if (__tmp > 65535)
     fe8:	6f 81       	ldd	r22, Y+7	; 0x07
     fea:	78 85       	ldd	r23, Y+8	; 0x08
     fec:	89 85       	ldd	r24, Y+9	; 0x09
     fee:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	3f ef       	ldi	r19, 0xFF	; 255
     ff4:	4f e7       	ldi	r20, 0x7F	; 127
     ff6:	57 e4       	ldi	r21, 0x47	; 71
     ff8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     ffc:	18 16       	cp	r1, r24
     ffe:	4c f5       	brge	.+82     	; 0x1052 <CLCD_VoidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1000:	6b 85       	ldd	r22, Y+11	; 0x0b
    1002:	7c 85       	ldd	r23, Y+12	; 0x0c
    1004:	8d 85       	ldd	r24, Y+13	; 0x0d
    1006:	9e 85       	ldd	r25, Y+14	; 0x0e
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e2       	ldi	r20, 0x20	; 32
    100e:	51 e4       	ldi	r21, 0x41	; 65
    1010:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	bc 01       	movw	r22, r24
    101a:	cd 01       	movw	r24, r26
    101c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	9e 83       	std	Y+6, r25	; 0x06
    1026:	8d 83       	std	Y+5, r24	; 0x05
    1028:	0f c0       	rjmp	.+30     	; 0x1048 <CLCD_VoidSendData+0xee>
    102a:	88 ec       	ldi	r24, 0xC8	; 200
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	9c 83       	std	Y+4, r25	; 0x04
    1030:	8b 83       	std	Y+3, r24	; 0x03
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	9c 81       	ldd	r25, Y+4	; 0x04
    1036:	01 97       	sbiw	r24, 0x01	; 1
    1038:	f1 f7       	brne	.-4      	; 0x1036 <CLCD_VoidSendData+0xdc>
    103a:	9c 83       	std	Y+4, r25	; 0x04
    103c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    103e:	8d 81       	ldd	r24, Y+5	; 0x05
    1040:	9e 81       	ldd	r25, Y+6	; 0x06
    1042:	01 97       	sbiw	r24, 0x01	; 1
    1044:	9e 83       	std	Y+6, r25	; 0x06
    1046:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1048:	8d 81       	ldd	r24, Y+5	; 0x05
    104a:	9e 81       	ldd	r25, Y+6	; 0x06
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	69 f7       	brne	.-38     	; 0x102a <CLCD_VoidSendData+0xd0>
    1050:	14 c0       	rjmp	.+40     	; 0x107a <CLCD_VoidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1052:	6f 81       	ldd	r22, Y+7	; 0x07
    1054:	78 85       	ldd	r23, Y+8	; 0x08
    1056:	89 85       	ldd	r24, Y+9	; 0x09
    1058:	9a 85       	ldd	r25, Y+10	; 0x0a
    105a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	9e 83       	std	Y+6, r25	; 0x06
    1064:	8d 83       	std	Y+5, r24	; 0x05
    1066:	8d 81       	ldd	r24, Y+5	; 0x05
    1068:	9e 81       	ldd	r25, Y+6	; 0x06
    106a:	9a 83       	std	Y+2, r25	; 0x02
    106c:	89 83       	std	Y+1, r24	; 0x01
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	9a 81       	ldd	r25, Y+2	; 0x02
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	f1 f7       	brne	.-4      	; 0x1072 <CLCD_VoidSendData+0x118>
    1076:	9a 83       	std	Y+2, r25	; 0x02
    1078:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW);
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	62 e0       	ldi	r22, 0x02	; 2
    107e:	40 e0       	ldi	r20, 0x00	; 0
    1080:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
}
    1084:	2f 96       	adiw	r28, 0x0f	; 15
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	de bf       	out	0x3e, r29	; 62
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	cd bf       	out	0x3d, r28	; 61
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	08 95       	ret

00001096 <CLCD_VoidInit>:

void CLCD_VoidInit(void)
{
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	2e 97       	sbiw	r28, 0x0e	; 14
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	de bf       	out	0x3e, r29	; 62
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	cd bf       	out	0x3d, r28	; 61
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a0 e2       	ldi	r26, 0x20	; 32
    10b0:	b2 e4       	ldi	r27, 0x42	; 66
    10b2:	8b 87       	std	Y+11, r24	; 0x0b
    10b4:	9c 87       	std	Y+12, r25	; 0x0c
    10b6:	ad 87       	std	Y+13, r26	; 0x0d
    10b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    10bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    10be:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	4a ef       	ldi	r20, 0xFA	; 250
    10c8:	54 e4       	ldi	r21, 0x44	; 68
    10ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	8f 83       	std	Y+7, r24	; 0x07
    10d4:	98 87       	std	Y+8, r25	; 0x08
    10d6:	a9 87       	std	Y+9, r26	; 0x09
    10d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10da:	6f 81       	ldd	r22, Y+7	; 0x07
    10dc:	78 85       	ldd	r23, Y+8	; 0x08
    10de:	89 85       	ldd	r24, Y+9	; 0x09
    10e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	40 e8       	ldi	r20, 0x80	; 128
    10e8:	5f e3       	ldi	r21, 0x3F	; 63
    10ea:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    10ee:	88 23       	and	r24, r24
    10f0:	2c f4       	brge	.+10     	; 0x10fc <CLCD_VoidInit+0x66>
		__ticks = 1;
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	9e 83       	std	Y+6, r25	; 0x06
    10f8:	8d 83       	std	Y+5, r24	; 0x05
    10fa:	3f c0       	rjmp	.+126    	; 0x117a <CLCD_VoidInit+0xe4>
	else if (__tmp > 65535)
    10fc:	6f 81       	ldd	r22, Y+7	; 0x07
    10fe:	78 85       	ldd	r23, Y+8	; 0x08
    1100:	89 85       	ldd	r24, Y+9	; 0x09
    1102:	9a 85       	ldd	r25, Y+10	; 0x0a
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	3f ef       	ldi	r19, 0xFF	; 255
    1108:	4f e7       	ldi	r20, 0x7F	; 127
    110a:	57 e4       	ldi	r21, 0x47	; 71
    110c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1110:	18 16       	cp	r1, r24
    1112:	4c f5       	brge	.+82     	; 0x1166 <CLCD_VoidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1114:	6b 85       	ldd	r22, Y+11	; 0x0b
    1116:	7c 85       	ldd	r23, Y+12	; 0x0c
    1118:	8d 85       	ldd	r24, Y+13	; 0x0d
    111a:	9e 85       	ldd	r25, Y+14	; 0x0e
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	40 e2       	ldi	r20, 0x20	; 32
    1122:	51 e4       	ldi	r21, 0x41	; 65
    1124:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	bc 01       	movw	r22, r24
    112e:	cd 01       	movw	r24, r26
    1130:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	9e 83       	std	Y+6, r25	; 0x06
    113a:	8d 83       	std	Y+5, r24	; 0x05
    113c:	0f c0       	rjmp	.+30     	; 0x115c <CLCD_VoidInit+0xc6>
    113e:	88 ec       	ldi	r24, 0xC8	; 200
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	9c 83       	std	Y+4, r25	; 0x04
    1144:	8b 83       	std	Y+3, r24	; 0x03
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	9c 81       	ldd	r25, Y+4	; 0x04
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	f1 f7       	brne	.-4      	; 0x114a <CLCD_VoidInit+0xb4>
    114e:	9c 83       	std	Y+4, r25	; 0x04
    1150:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1152:	8d 81       	ldd	r24, Y+5	; 0x05
    1154:	9e 81       	ldd	r25, Y+6	; 0x06
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	9e 83       	std	Y+6, r25	; 0x06
    115a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	9e 81       	ldd	r25, Y+6	; 0x06
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	69 f7       	brne	.-38     	; 0x113e <CLCD_VoidInit+0xa8>
    1164:	14 c0       	rjmp	.+40     	; 0x118e <CLCD_VoidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1166:	6f 81       	ldd	r22, Y+7	; 0x07
    1168:	78 85       	ldd	r23, Y+8	; 0x08
    116a:	89 85       	ldd	r24, Y+9	; 0x09
    116c:	9a 85       	ldd	r25, Y+10	; 0x0a
    116e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	9e 83       	std	Y+6, r25	; 0x06
    1178:	8d 83       	std	Y+5, r24	; 0x05
    117a:	8d 81       	ldd	r24, Y+5	; 0x05
    117c:	9e 81       	ldd	r25, Y+6	; 0x06
    117e:	9a 83       	std	Y+2, r25	; 0x02
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	9a 81       	ldd	r25, Y+2	; 0x02
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	f1 f7       	brne	.-4      	; 0x1186 <CLCD_VoidInit+0xf0>
    118a:	9a 83       	std	Y+2, r25	; 0x02
    118c:	89 83       	std	Y+1, r24	; 0x01
	/*wait for more than 30 ms */
	_delay_ms(40);

	/*function set command : 2 lines , 5*8 font size*/
	CLCD_VoidSendCommand(0b00111000);
    118e:	88 e3       	ldi	r24, 0x38	; 56
    1190:	0e 94 0f 07 	call	0xe1e	; 0xe1e <CLCD_VoidSendCommand>

	/*Display on off control : Display enable , disable cursor , no blink cursor*/
	CLCD_VoidSendCommand(0b00001100);
    1194:	8c e0       	ldi	r24, 0x0C	; 12
    1196:	0e 94 0f 07 	call	0xe1e	; 0xe1e <CLCD_VoidSendCommand>

	/*Clear display*/
	CLCD_VoidSendCommand(0b00000001);
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <CLCD_VoidSendCommand>
}
    11a0:	2e 96       	adiw	r28, 0x0e	; 14
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	cd bf       	out	0x3d, r28	; 61
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <CLCD_VoidSendString>:

void CLCD_VoidSendString( const char * Copy_PcString)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <CLCD_VoidSendString+0x6>
    11b8:	0f 92       	push	r0
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	9b 83       	std	Y+3, r25	; 0x03
    11c0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0 ;
    11c2:	19 82       	std	Y+1, r1	; 0x01
    11c4:	0e c0       	rjmp	.+28     	; 0x11e2 <CLCD_VoidSendString+0x30>
	while (Copy_PcString[Local_u8Counter]!='\0')
	{
		CLCD_VoidSendData(Copy_PcString[Local_u8Counter])  ;
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	9b 81       	ldd	r25, Y+3	; 0x03
    11d0:	fc 01       	movw	r30, r24
    11d2:	e2 0f       	add	r30, r18
    11d4:	f3 1f       	adc	r31, r19
    11d6:	80 81       	ld	r24, Z
    11d8:	0e 94 ad 07 	call	0xf5a	; 0xf5a <CLCD_VoidSendData>
		Local_u8Counter++;
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	8f 5f       	subi	r24, 0xFF	; 255
    11e0:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_VoidSendString( const char * Copy_PcString)
{
	u8 Local_u8Counter = 0 ;
	while (Copy_PcString[Local_u8Counter]!='\0')
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	9b 81       	ldd	r25, Y+3	; 0x03
    11ec:	fc 01       	movw	r30, r24
    11ee:	e2 0f       	add	r30, r18
    11f0:	f3 1f       	adc	r31, r19
    11f2:	80 81       	ld	r24, Z
    11f4:	88 23       	and	r24, r24
    11f6:	39 f7       	brne	.-50     	; 0x11c6 <CLCD_VoidSendString+0x14>
	{
		CLCD_VoidSendData(Copy_PcString[Local_u8Counter])  ;
		Local_u8Counter++;
	}
	/*Set DATA to data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT , Copy_PcString );
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	9b 81       	ldd	r25, Y+3	; 0x03
    11fc:	98 2f       	mov	r25, r24
    11fe:	82 e0       	ldi	r24, 0x02	; 2
    1200:	69 2f       	mov	r22, r25
    1202:	0e 94 92 0c 	call	0x1924	; 0x1924 <DIO_u8SetPortValue>
}
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	08 95       	ret

00001212 <CLCD_VoidGoToXY>:

void CLCD_VoidGoToXY (u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	00 d0       	rcall	.+0      	; 0x1218 <CLCD_VoidGoToXY+0x6>
    1218:	0f 92       	push	r0
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	8a 83       	std	Y+2, r24	; 0x02
    1220:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos== 0 )
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	88 23       	and	r24, r24
    1226:	19 f4       	brne	.+6      	; 0x122e <CLCD_VoidGoToXY+0x1c>
	{
		/*location is at first line*/
		Local_u8Address = Copy_u8YPos ;
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	89 83       	std	Y+1, r24	; 0x01
    122c:	06 c0       	rjmp	.+12     	; 0x123a <CLCD_VoidGoToXY+0x28>
	}
	else if (Copy_u8XPos==1)
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	19 f4       	brne	.+6      	; 0x123a <CLCD_VoidGoToXY+0x28>
	{
		/*location is at second line*/
		Local_u8Address = 0x40 + Copy_u8YPos ;
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	80 5c       	subi	r24, 0xC0	; 192
    1238:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Because 128 ==10000000 and in datasheet MSB is 1 always and we have only 7 addresses*/
	/*we can use the address | 10000000 or setbit*/
	CLCD_VoidSendCommand(Local_u8Address+128);
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	80 58       	subi	r24, 0x80	; 128
    123e:	0e 94 0f 07 	call	0xe1e	; 0xe1e <CLCD_VoidSendCommand>
}
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <CLCD_VoidWriteSpecialCharacter>:

void CLCD_VoidWriteSpecialCharacter(u8 * Copypu8Pattern , u8 Copy_u8PatternNumber , u8 Copy_u8XPos , u8 Copy_u8YPos )
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	27 97       	sbiw	r28, 0x07	; 7
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	de bf       	out	0x3e, r29	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	cd bf       	out	0x3d, r28	; 61
    1262:	9c 83       	std	Y+4, r25	; 0x04
    1264:	8b 83       	std	Y+3, r24	; 0x03
    1266:	6d 83       	std	Y+5, r22	; 0x05
    1268:	4e 83       	std	Y+6, r20	; 0x06
    126a:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress = 0 , Local_u8Iterator;
    126c:	1a 82       	std	Y+2, r1	; 0x02

	/*calculate CGRAM address whose each block is 8 byte*/
	Local_u8CGRAMAddress = Copy_u8PatternNumber*8;
    126e:	8d 81       	ldd	r24, Y+5	; 0x05
    1270:	88 2f       	mov	r24, r24
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	8a 83       	std	Y+2, r24	; 0x02

	/*Send CGRAM address command to lcd with setting bit 6 , clear bit 7*/
	CLCD_VoidSendCommand(Local_u8CGRAMAddress+64);
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	80 5c       	subi	r24, 0xC0	; 192
    1286:	0e 94 0f 07 	call	0xe1e	; 0xe1e <CLCD_VoidSendCommand>

	/*Write pattern into CGRAM*/
	for(Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator++)
    128a:	19 82       	std	Y+1, r1	; 0x01
    128c:	0e c0       	rjmp	.+28     	; 0x12aa <CLCD_VoidWriteSpecialCharacter+0x5c>
	{
		CLCD_VoidSendData(Copypu8Pattern[Local_u8Iterator]);
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
    1298:	fc 01       	movw	r30, r24
    129a:	e2 0f       	add	r30, r18
    129c:	f3 1f       	adc	r31, r19
    129e:	80 81       	ld	r24, Z
    12a0:	0e 94 ad 07 	call	0xf5a	; 0xf5a <CLCD_VoidSendData>

	/*Send CGRAM address command to lcd with setting bit 6 , clear bit 7*/
	CLCD_VoidSendCommand(Local_u8CGRAMAddress+64);

	/*Write pattern into CGRAM*/
	for(Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator++)
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	8f 5f       	subi	r24, 0xFF	; 255
    12a8:	89 83       	std	Y+1, r24	; 0x01
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	88 30       	cpi	r24, 0x08	; 8
    12ae:	78 f3       	brcs	.-34     	; 0x128e <CLCD_VoidWriteSpecialCharacter+0x40>
	{
		CLCD_VoidSendData(Copypu8Pattern[Local_u8Iterator]);
	}

	/*GO back to DDRAM to display the pattern*/
	CLCD_VoidGoToXY(Copy_u8XPos,Copy_u8YPos);
    12b0:	8e 81       	ldd	r24, Y+6	; 0x06
    12b2:	6f 81       	ldd	r22, Y+7	; 0x07
    12b4:	0e 94 09 09 	call	0x1212	; 0x1212 <CLCD_VoidGoToXY>

	/*Display the pattern written in the CGRAM*/
	CLCD_VoidSendData(Copy_u8PatternNumber);
    12b8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ba:	0e 94 ad 07 	call	0xf5a	; 0xf5a <CLCD_VoidSendData>
}
    12be:	27 96       	adiw	r28, 0x07	; 7
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	de bf       	out	0x3e, r29	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	cd bf       	out	0x3d, r28	; 61
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	08 95       	ret

000012d0 <CLCD_voidSendNumber>:

void CLCD_voidSendNumber   ( u32 Copy_u32Number    )
{
    12d0:	ef 92       	push	r14
    12d2:	ff 92       	push	r15
    12d4:	0f 93       	push	r16
    12d6:	1f 93       	push	r17
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	28 97       	sbiw	r28, 0x08	; 8
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	f8 94       	cli
    12e6:	de bf       	out	0x3e, r29	; 62
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	cd bf       	out	0x3d, r28	; 61
    12ec:	6d 83       	std	Y+5, r22	; 0x05
    12ee:	7e 83       	std	Y+6, r23	; 0x06
    12f0:	8f 83       	std	Y+7, r24	; 0x07
    12f2:	98 87       	std	Y+8, r25	; 0x08

	u32 Local_u32Reversed = 1 ;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	a0 e0       	ldi	r26, 0x00	; 0
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	89 83       	std	Y+1, r24	; 0x01
    12fe:	9a 83       	std	Y+2, r25	; 0x02
    1300:	ab 83       	std	Y+3, r26	; 0x03
    1302:	bc 83       	std	Y+4, r27	; 0x04

	if( Copy_u32Number == 0 )
    1304:	8d 81       	ldd	r24, Y+5	; 0x05
    1306:	9e 81       	ldd	r25, Y+6	; 0x06
    1308:	af 81       	ldd	r26, Y+7	; 0x07
    130a:	b8 85       	ldd	r27, Y+8	; 0x08
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	a1 05       	cpc	r26, r1
    1310:	b1 05       	cpc	r27, r1
    1312:	d1 f5       	brne	.+116    	; 0x1388 <CLCD_voidSendNumber+0xb8>
	{
		CLCD_VoidSendData ('0');
    1314:	80 e3       	ldi	r24, 0x30	; 48
    1316:	0e 94 ad 07 	call	0xf5a	; 0xf5a <CLCD_VoidSendData>
    131a:	6b c0       	rjmp	.+214    	; 0x13f2 <CLCD_voidSendNumber+0x122>

	else{

		while( Copy_u32Number != 0 )
		{
			Local_u32Reversed = ( Local_u32Reversed * 10 ) + ( Copy_u32Number % 10 );
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	9a 81       	ldd	r25, Y+2	; 0x02
    1320:	ab 81       	ldd	r26, Y+3	; 0x03
    1322:	bc 81       	ldd	r27, Y+4	; 0x04
    1324:	2a e0       	ldi	r18, 0x0A	; 10
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	40 e0       	ldi	r20, 0x00	; 0
    132a:	50 e0       	ldi	r21, 0x00	; 0
    132c:	bc 01       	movw	r22, r24
    132e:	cd 01       	movw	r24, r26
    1330:	0e 94 66 11 	call	0x22cc	; 0x22cc <__mulsi3>
    1334:	7b 01       	movw	r14, r22
    1336:	8c 01       	movw	r16, r24
    1338:	8d 81       	ldd	r24, Y+5	; 0x05
    133a:	9e 81       	ldd	r25, Y+6	; 0x06
    133c:	af 81       	ldd	r26, Y+7	; 0x07
    133e:	b8 85       	ldd	r27, Y+8	; 0x08
    1340:	2a e0       	ldi	r18, 0x0A	; 10
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	40 e0       	ldi	r20, 0x00	; 0
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	bc 01       	movw	r22, r24
    134a:	cd 01       	movw	r24, r26
    134c:	0e 94 99 11 	call	0x2332	; 0x2332 <__udivmodsi4>
    1350:	dc 01       	movw	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	8e 0d       	add	r24, r14
    1356:	9f 1d       	adc	r25, r15
    1358:	a0 1f       	adc	r26, r16
    135a:	b1 1f       	adc	r27, r17
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	9a 83       	std	Y+2, r25	; 0x02
    1360:	ab 83       	std	Y+3, r26	; 0x03
    1362:	bc 83       	std	Y+4, r27	; 0x04
			Copy_u32Number /= 10 ;
    1364:	8d 81       	ldd	r24, Y+5	; 0x05
    1366:	9e 81       	ldd	r25, Y+6	; 0x06
    1368:	af 81       	ldd	r26, Y+7	; 0x07
    136a:	b8 85       	ldd	r27, Y+8	; 0x08
    136c:	2a e0       	ldi	r18, 0x0A	; 10
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	40 e0       	ldi	r20, 0x00	; 0
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	bc 01       	movw	r22, r24
    1376:	cd 01       	movw	r24, r26
    1378:	0e 94 99 11 	call	0x2332	; 0x2332 <__udivmodsi4>
    137c:	da 01       	movw	r26, r20
    137e:	c9 01       	movw	r24, r18
    1380:	8d 83       	std	Y+5, r24	; 0x05
    1382:	9e 83       	std	Y+6, r25	; 0x06
    1384:	af 83       	std	Y+7, r26	; 0x07
    1386:	b8 87       	std	Y+8, r27	; 0x08
		CLCD_VoidSendData ('0');
	}

	else{

		while( Copy_u32Number != 0 )
    1388:	8d 81       	ldd	r24, Y+5	; 0x05
    138a:	9e 81       	ldd	r25, Y+6	; 0x06
    138c:	af 81       	ldd	r26, Y+7	; 0x07
    138e:	b8 85       	ldd	r27, Y+8	; 0x08
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	a1 05       	cpc	r26, r1
    1394:	b1 05       	cpc	r27, r1
    1396:	11 f6       	brne	.-124    	; 0x131c <CLCD_voidSendNumber+0x4c>
    1398:	23 c0       	rjmp	.+70     	; 0x13e0 <CLCD_voidSendNumber+0x110>
			Local_u32Reversed = ( Local_u32Reversed * 10 ) + ( Copy_u32Number % 10 );
			Copy_u32Number /= 10 ;
		}
		while( Local_u32Reversed != 1 )
		{
			CLCD_VoidSendData ( ( Local_u32Reversed % 10 ) + 48 );
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	9a 81       	ldd	r25, Y+2	; 0x02
    139e:	ab 81       	ldd	r26, Y+3	; 0x03
    13a0:	bc 81       	ldd	r27, Y+4	; 0x04
    13a2:	2a e0       	ldi	r18, 0x0A	; 10
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	40 e0       	ldi	r20, 0x00	; 0
    13a8:	50 e0       	ldi	r21, 0x00	; 0
    13aa:	bc 01       	movw	r22, r24
    13ac:	cd 01       	movw	r24, r26
    13ae:	0e 94 99 11 	call	0x2332	; 0x2332 <__udivmodsi4>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	80 5d       	subi	r24, 0xD0	; 208
    13b8:	0e 94 ad 07 	call	0xf5a	; 0xf5a <CLCD_VoidSendData>
			Local_u32Reversed /= 10 ;
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	9a 81       	ldd	r25, Y+2	; 0x02
    13c0:	ab 81       	ldd	r26, Y+3	; 0x03
    13c2:	bc 81       	ldd	r27, Y+4	; 0x04
    13c4:	2a e0       	ldi	r18, 0x0A	; 10
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	40 e0       	ldi	r20, 0x00	; 0
    13ca:	50 e0       	ldi	r21, 0x00	; 0
    13cc:	bc 01       	movw	r22, r24
    13ce:	cd 01       	movw	r24, r26
    13d0:	0e 94 99 11 	call	0x2332	; 0x2332 <__udivmodsi4>
    13d4:	da 01       	movw	r26, r20
    13d6:	c9 01       	movw	r24, r18
    13d8:	89 83       	std	Y+1, r24	; 0x01
    13da:	9a 83       	std	Y+2, r25	; 0x02
    13dc:	ab 83       	std	Y+3, r26	; 0x03
    13de:	bc 83       	std	Y+4, r27	; 0x04
		while( Copy_u32Number != 0 )
		{
			Local_u32Reversed = ( Local_u32Reversed * 10 ) + ( Copy_u32Number % 10 );
			Copy_u32Number /= 10 ;
		}
		while( Local_u32Reversed != 1 )
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	9a 81       	ldd	r25, Y+2	; 0x02
    13e4:	ab 81       	ldd	r26, Y+3	; 0x03
    13e6:	bc 81       	ldd	r27, Y+4	; 0x04
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	91 05       	cpc	r25, r1
    13ec:	a1 05       	cpc	r26, r1
    13ee:	b1 05       	cpc	r27, r1
    13f0:	a1 f6       	brne	.-88     	; 0x139a <CLCD_voidSendNumber+0xca>
			Local_u32Reversed /= 10 ;
		}

	}

}
    13f2:	28 96       	adiw	r28, 0x08	; 8
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	f8 94       	cli
    13f8:	de bf       	out	0x3e, r29	; 62
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	cd bf       	out	0x3d, r28	; 61
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	1f 91       	pop	r17
    1404:	0f 91       	pop	r16
    1406:	ff 90       	pop	r15
    1408:	ef 90       	pop	r14
    140a:	08 95       	ret

0000140c <CLCD_voidSendFloatNumber>:

void CLCD_voidSendFloatNumber(f64 number)
{
    140c:	ef 92       	push	r14
    140e:	ff 92       	push	r15
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
    141c:	a7 97       	sbiw	r28, 0x27	; 39
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	de bf       	out	0x3e, r29	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	cd bf       	out	0x3d, r28	; 61
    1428:	6c a3       	std	Y+36, r22	; 0x24
    142a:	7d a3       	std	Y+37, r23	; 0x25
    142c:	8e a3       	std	Y+38, r24	; 0x26
    142e:	9f a3       	std	Y+39, r25	; 0x27
	s8 i=0,j=0;
    1430:	1f 86       	std	Y+15, r1	; 0x0f
    1432:	1e 86       	std	Y+14, r1	; 0x0e
	u32 x=number;
    1434:	6c a1       	ldd	r22, Y+36	; 0x24
    1436:	7d a1       	ldd	r23, Y+37	; 0x25
    1438:	8e a1       	ldd	r24, Y+38	; 0x26
    143a:	9f a1       	ldd	r25, Y+39	; 0x27
    143c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	8a 87       	std	Y+10, r24	; 0x0a
    1446:	9b 87       	std	Y+11, r25	; 0x0b
    1448:	ac 87       	std	Y+12, r26	; 0x0c
    144a:	bd 87       	std	Y+13, r27	; 0x0d
	u8 base_NUM[10]={0};
    144c:	8a e0       	ldi	r24, 0x0A	; 10
    144e:	fe 01       	movw	r30, r28
    1450:	70 96       	adiw	r30, 0x10	; 16
    1452:	df 01       	movw	r26, r30
    1454:	98 2f       	mov	r25, r24
    1456:	1d 92       	st	X+, r1
    1458:	9a 95       	dec	r25
    145a:	e9 f7       	brne	.-6      	; 0x1456 <CLCD_voidSendFloatNumber+0x4a>
	f64 y=0;
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	a0 e0       	ldi	r26, 0x00	; 0
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	8e 83       	std	Y+6, r24	; 0x06
    1466:	9f 83       	std	Y+7, r25	; 0x07
    1468:	a8 87       	std	Y+8, r26	; 0x08
    146a:	b9 87       	std	Y+9, r27	; 0x09
	if (number<0)
    146c:	6c a1       	ldd	r22, Y+36	; 0x24
    146e:	7d a1       	ldd	r23, Y+37	; 0x25
    1470:	8e a1       	ldd	r24, Y+38	; 0x26
    1472:	9f a1       	ldd	r25, Y+39	; 0x27
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	40 e0       	ldi	r20, 0x00	; 0
    147a:	50 e0       	ldi	r21, 0x00	; 0
    147c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1480:	88 23       	and	r24, r24
    1482:	c4 f4       	brge	.+48     	; 0x14b4 <CLCD_voidSendFloatNumber+0xa8>
	{
		number*=-1;
    1484:	8c a1       	ldd	r24, Y+36	; 0x24
    1486:	9d a1       	ldd	r25, Y+37	; 0x25
    1488:	ae a1       	ldd	r26, Y+38	; 0x26
    148a:	bf a1       	ldd	r27, Y+39	; 0x27
    148c:	b0 58       	subi	r27, 0x80	; 128
    148e:	8c a3       	std	Y+36, r24	; 0x24
    1490:	9d a3       	std	Y+37, r25	; 0x25
    1492:	ae a3       	std	Y+38, r26	; 0x26
    1494:	bf a3       	std	Y+39, r27	; 0x27
		x=number;
    1496:	6c a1       	ldd	r22, Y+36	; 0x24
    1498:	7d a1       	ldd	r23, Y+37	; 0x25
    149a:	8e a1       	ldd	r24, Y+38	; 0x26
    149c:	9f a1       	ldd	r25, Y+39	; 0x27
    149e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	8a 87       	std	Y+10, r24	; 0x0a
    14a8:	9b 87       	std	Y+11, r25	; 0x0b
    14aa:	ac 87       	std	Y+12, r26	; 0x0c
    14ac:	bd 87       	std	Y+13, r27	; 0x0d
		CLCD_VoidSendData('-');
    14ae:	8d e2       	ldi	r24, 0x2D	; 45
    14b0:	0e 94 ad 07 	call	0xf5a	; 0xf5a <CLCD_VoidSendData>
	}
	y=(((number+1.0)-x)*10000000);
    14b4:	6c a1       	ldd	r22, Y+36	; 0x24
    14b6:	7d a1       	ldd	r23, Y+37	; 0x25
    14b8:	8e a1       	ldd	r24, Y+38	; 0x26
    14ba:	9f a1       	ldd	r25, Y+39	; 0x27
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	40 e8       	ldi	r20, 0x80	; 128
    14c2:	5f e3       	ldi	r21, 0x3F	; 63
    14c4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	7c 01       	movw	r14, r24
    14ce:	8d 01       	movw	r16, r26
    14d0:	6a 85       	ldd	r22, Y+10	; 0x0a
    14d2:	7b 85       	ldd	r23, Y+11	; 0x0b
    14d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    14d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    14d8:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    14dc:	9b 01       	movw	r18, r22
    14de:	ac 01       	movw	r20, r24
    14e0:	c8 01       	movw	r24, r16
    14e2:	b7 01       	movw	r22, r14
    14e4:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    14e8:	dc 01       	movw	r26, r24
    14ea:	cb 01       	movw	r24, r22
    14ec:	bc 01       	movw	r22, r24
    14ee:	cd 01       	movw	r24, r26
    14f0:	20 e8       	ldi	r18, 0x80	; 128
    14f2:	36 e9       	ldi	r19, 0x96	; 150
    14f4:	48 e1       	ldi	r20, 0x18	; 24
    14f6:	5b e4       	ldi	r21, 0x4B	; 75
    14f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	8e 83       	std	Y+6, r24	; 0x06
    1502:	9f 83       	std	Y+7, r25	; 0x07
    1504:	a8 87       	std	Y+8, r26	; 0x08
    1506:	b9 87       	std	Y+9, r27	; 0x09
    1508:	2f c0       	rjmp	.+94     	; 0x1568 <CLCD_voidSendFloatNumber+0x15c>
	while(x !=0)
	{
		base_NUM[i++] = x % 10;
    150a:	8f 85       	ldd	r24, Y+15	; 0x0f
    150c:	08 2f       	mov	r16, r24
    150e:	11 27       	eor	r17, r17
    1510:	07 fd       	sbrc	r16, 7
    1512:	10 95       	com	r17
    1514:	8a 85       	ldd	r24, Y+10	; 0x0a
    1516:	9b 85       	ldd	r25, Y+11	; 0x0b
    1518:	ac 85       	ldd	r26, Y+12	; 0x0c
    151a:	bd 85       	ldd	r27, Y+13	; 0x0d
    151c:	2a e0       	ldi	r18, 0x0A	; 10
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	40 e0       	ldi	r20, 0x00	; 0
    1522:	50 e0       	ldi	r21, 0x00	; 0
    1524:	bc 01       	movw	r22, r24
    1526:	cd 01       	movw	r24, r26
    1528:	0e 94 99 11 	call	0x2332	; 0x2332 <__udivmodsi4>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	28 2f       	mov	r18, r24
    1532:	ce 01       	movw	r24, r28
    1534:	40 96       	adiw	r24, 0x10	; 16
    1536:	fc 01       	movw	r30, r24
    1538:	e0 0f       	add	r30, r16
    153a:	f1 1f       	adc	r31, r17
    153c:	20 83       	st	Z, r18
    153e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1540:	8f 5f       	subi	r24, 0xFF	; 255
    1542:	8f 87       	std	Y+15, r24	; 0x0f
		x/=10;
    1544:	8a 85       	ldd	r24, Y+10	; 0x0a
    1546:	9b 85       	ldd	r25, Y+11	; 0x0b
    1548:	ac 85       	ldd	r26, Y+12	; 0x0c
    154a:	bd 85       	ldd	r27, Y+13	; 0x0d
    154c:	2a e0       	ldi	r18, 0x0A	; 10
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	40 e0       	ldi	r20, 0x00	; 0
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	bc 01       	movw	r22, r24
    1556:	cd 01       	movw	r24, r26
    1558:	0e 94 99 11 	call	0x2332	; 0x2332 <__udivmodsi4>
    155c:	da 01       	movw	r26, r20
    155e:	c9 01       	movw	r24, r18
    1560:	8a 87       	std	Y+10, r24	; 0x0a
    1562:	9b 87       	std	Y+11, r25	; 0x0b
    1564:	ac 87       	std	Y+12, r26	; 0x0c
    1566:	bd 87       	std	Y+13, r27	; 0x0d
		number*=-1;
		x=number;
		CLCD_VoidSendData('-');
	}
	y=(((number+1.0)-x)*10000000);
	while(x !=0)
    1568:	8a 85       	ldd	r24, Y+10	; 0x0a
    156a:	9b 85       	ldd	r25, Y+11	; 0x0b
    156c:	ac 85       	ldd	r26, Y+12	; 0x0c
    156e:	bd 85       	ldd	r27, Y+13	; 0x0d
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	a1 05       	cpc	r26, r1
    1574:	b1 05       	cpc	r27, r1
    1576:	49 f6       	brne	.-110    	; 0x150a <CLCD_voidSendFloatNumber+0xfe>
	{
		base_NUM[i++] = x % 10;
		x/=10;
	}
	u8 k=i--;
    1578:	8f 85       	ldd	r24, Y+15	; 0x0f
    157a:	8d 83       	std	Y+5, r24	; 0x05
    157c:	8f 85       	ldd	r24, Y+15	; 0x0f
    157e:	81 50       	subi	r24, 0x01	; 1
    1580:	8f 87       	std	Y+15, r24	; 0x0f
    1582:	13 c0       	rjmp	.+38     	; 0x15aa <CLCD_voidSendFloatNumber+0x19e>
	while(i>=0)
	{
		CLCD_VoidSendData(base_NUM[i--]+48);
    1584:	8f 85       	ldd	r24, Y+15	; 0x0f
    1586:	28 2f       	mov	r18, r24
    1588:	33 27       	eor	r19, r19
    158a:	27 fd       	sbrc	r18, 7
    158c:	30 95       	com	r19
    158e:	ce 01       	movw	r24, r28
    1590:	40 96       	adiw	r24, 0x10	; 16
    1592:	fc 01       	movw	r30, r24
    1594:	e2 0f       	add	r30, r18
    1596:	f3 1f       	adc	r31, r19
    1598:	80 81       	ld	r24, Z
    159a:	98 2f       	mov	r25, r24
    159c:	90 5d       	subi	r25, 0xD0	; 208
    159e:	8f 85       	ldd	r24, Y+15	; 0x0f
    15a0:	81 50       	subi	r24, 0x01	; 1
    15a2:	8f 87       	std	Y+15, r24	; 0x0f
    15a4:	89 2f       	mov	r24, r25
    15a6:	0e 94 ad 07 	call	0xf5a	; 0xf5a <CLCD_VoidSendData>
	{
		base_NUM[i++] = x % 10;
		x/=10;
	}
	u8 k=i--;
	while(i>=0)
    15aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ac:	88 23       	and	r24, r24
    15ae:	54 f7       	brge	.-44     	; 0x1584 <CLCD_voidSendFloatNumber+0x178>
	{
		CLCD_VoidSendData(base_NUM[i--]+48);
	}
	u8 F_NUM[10]={0};
    15b0:	8a e0       	ldi	r24, 0x0A	; 10
    15b2:	fe 01       	movw	r30, r28
    15b4:	7a 96       	adiw	r30, 0x1a	; 26
    15b6:	df 01       	movw	r26, r30
    15b8:	98 2f       	mov	r25, r24
    15ba:	1d 92       	st	X+, r1
    15bc:	9a 95       	dec	r25
    15be:	e9 f7       	brne	.-6      	; 0x15ba <CLCD_voidSendFloatNumber+0x1ae>
	i=0;
    15c0:	1f 86       	std	Y+15, r1	; 0x0f
	u32 z=y;
    15c2:	6e 81       	ldd	r22, Y+6	; 0x06
    15c4:	7f 81       	ldd	r23, Y+7	; 0x07
    15c6:	88 85       	ldd	r24, Y+8	; 0x08
    15c8:	99 85       	ldd	r25, Y+9	; 0x09
    15ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	89 83       	std	Y+1, r24	; 0x01
    15d4:	9a 83       	std	Y+2, r25	; 0x02
    15d6:	ab 83       	std	Y+3, r26	; 0x03
    15d8:	bc 83       	std	Y+4, r27	; 0x04
	CLCD_VoidSendData('.');
    15da:	8e e2       	ldi	r24, 0x2E	; 46
    15dc:	0e 94 ad 07 	call	0xf5a	; 0xf5a <CLCD_VoidSendData>
    15e0:	2f c0       	rjmp	.+94     	; 0x1640 <CLCD_voidSendFloatNumber+0x234>
	while(z !=0)
	{
		F_NUM[i++] = z % 10;
    15e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15e4:	08 2f       	mov	r16, r24
    15e6:	11 27       	eor	r17, r17
    15e8:	07 fd       	sbrc	r16, 7
    15ea:	10 95       	com	r17
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	9a 81       	ldd	r25, Y+2	; 0x02
    15f0:	ab 81       	ldd	r26, Y+3	; 0x03
    15f2:	bc 81       	ldd	r27, Y+4	; 0x04
    15f4:	2a e0       	ldi	r18, 0x0A	; 10
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	40 e0       	ldi	r20, 0x00	; 0
    15fa:	50 e0       	ldi	r21, 0x00	; 0
    15fc:	bc 01       	movw	r22, r24
    15fe:	cd 01       	movw	r24, r26
    1600:	0e 94 99 11 	call	0x2332	; 0x2332 <__udivmodsi4>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	28 2f       	mov	r18, r24
    160a:	ce 01       	movw	r24, r28
    160c:	4a 96       	adiw	r24, 0x1a	; 26
    160e:	fc 01       	movw	r30, r24
    1610:	e0 0f       	add	r30, r16
    1612:	f1 1f       	adc	r31, r17
    1614:	20 83       	st	Z, r18
    1616:	8f 85       	ldd	r24, Y+15	; 0x0f
    1618:	8f 5f       	subi	r24, 0xFF	; 255
    161a:	8f 87       	std	Y+15, r24	; 0x0f
		z/=10;
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	9a 81       	ldd	r25, Y+2	; 0x02
    1620:	ab 81       	ldd	r26, Y+3	; 0x03
    1622:	bc 81       	ldd	r27, Y+4	; 0x04
    1624:	2a e0       	ldi	r18, 0x0A	; 10
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	40 e0       	ldi	r20, 0x00	; 0
    162a:	50 e0       	ldi	r21, 0x00	; 0
    162c:	bc 01       	movw	r22, r24
    162e:	cd 01       	movw	r24, r26
    1630:	0e 94 99 11 	call	0x2332	; 0x2332 <__udivmodsi4>
    1634:	da 01       	movw	r26, r20
    1636:	c9 01       	movw	r24, r18
    1638:	89 83       	std	Y+1, r24	; 0x01
    163a:	9a 83       	std	Y+2, r25	; 0x02
    163c:	ab 83       	std	Y+3, r26	; 0x03
    163e:	bc 83       	std	Y+4, r27	; 0x04
	}
	u8 F_NUM[10]={0};
	i=0;
	u32 z=y;
	CLCD_VoidSendData('.');
	while(z !=0)
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	9a 81       	ldd	r25, Y+2	; 0x02
    1644:	ab 81       	ldd	r26, Y+3	; 0x03
    1646:	bc 81       	ldd	r27, Y+4	; 0x04
    1648:	00 97       	sbiw	r24, 0x00	; 0
    164a:	a1 05       	cpc	r26, r1
    164c:	b1 05       	cpc	r27, r1
    164e:	49 f6       	brne	.-110    	; 0x15e2 <CLCD_voidSendFloatNumber+0x1d6>
	{
		F_NUM[i++] = z % 10;
		z/=10;
	}
	i-=2;
    1650:	8f 85       	ldd	r24, Y+15	; 0x0f
    1652:	82 50       	subi	r24, 0x02	; 2
    1654:	8f 87       	std	Y+15, r24	; 0x0f
	for(j=0;j<10;j++)
    1656:	1e 86       	std	Y+14, r1	; 0x0e
    1658:	1c c0       	rjmp	.+56     	; 0x1692 <CLCD_voidSendFloatNumber+0x286>
	{
		if(F_NUM[j]==0)
    165a:	8e 85       	ldd	r24, Y+14	; 0x0e
    165c:	28 2f       	mov	r18, r24
    165e:	33 27       	eor	r19, r19
    1660:	27 fd       	sbrc	r18, 7
    1662:	30 95       	com	r19
    1664:	ce 01       	movw	r24, r28
    1666:	4a 96       	adiw	r24, 0x1a	; 26
    1668:	fc 01       	movw	r30, r24
    166a:	e2 0f       	add	r30, r18
    166c:	f3 1f       	adc	r31, r19
    166e:	80 81       	ld	r24, Z
    1670:	88 23       	and	r24, r24
    1672:	49 f5       	brne	.+82     	; 0x16c6 <CLCD_voidSendFloatNumber+0x2ba>
		{
			F_NUM[j]='k';
    1674:	8e 85       	ldd	r24, Y+14	; 0x0e
    1676:	28 2f       	mov	r18, r24
    1678:	33 27       	eor	r19, r19
    167a:	27 fd       	sbrc	r18, 7
    167c:	30 95       	com	r19
    167e:	ce 01       	movw	r24, r28
    1680:	4a 96       	adiw	r24, 0x1a	; 26
    1682:	fc 01       	movw	r30, r24
    1684:	e2 0f       	add	r30, r18
    1686:	f3 1f       	adc	r31, r19
    1688:	8b e6       	ldi	r24, 0x6B	; 107
    168a:	80 83       	st	Z, r24
	{
		F_NUM[i++] = z % 10;
		z/=10;
	}
	i-=2;
	for(j=0;j<10;j++)
    168c:	8e 85       	ldd	r24, Y+14	; 0x0e
    168e:	8f 5f       	subi	r24, 0xFF	; 255
    1690:	8e 87       	std	Y+14, r24	; 0x0e
    1692:	8e 85       	ldd	r24, Y+14	; 0x0e
    1694:	8a 30       	cpi	r24, 0x0A	; 10
    1696:	0c f3       	brlt	.-62     	; 0x165a <CLCD_voidSendFloatNumber+0x24e>
    1698:	16 c0       	rjmp	.+44     	; 0x16c6 <CLCD_voidSendFloatNumber+0x2ba>
			break;
		}
	}
	while(F_NUM[i]!='k'&& k!=7)
	{
		CLCD_VoidSendData(F_NUM[i--]+48);
    169a:	8f 85       	ldd	r24, Y+15	; 0x0f
    169c:	28 2f       	mov	r18, r24
    169e:	33 27       	eor	r19, r19
    16a0:	27 fd       	sbrc	r18, 7
    16a2:	30 95       	com	r19
    16a4:	ce 01       	movw	r24, r28
    16a6:	4a 96       	adiw	r24, 0x1a	; 26
    16a8:	fc 01       	movw	r30, r24
    16aa:	e2 0f       	add	r30, r18
    16ac:	f3 1f       	adc	r31, r19
    16ae:	80 81       	ld	r24, Z
    16b0:	98 2f       	mov	r25, r24
    16b2:	90 5d       	subi	r25, 0xD0	; 208
    16b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    16b6:	81 50       	subi	r24, 0x01	; 1
    16b8:	8f 87       	std	Y+15, r24	; 0x0f
    16ba:	89 2f       	mov	r24, r25
    16bc:	0e 94 ad 07 	call	0xf5a	; 0xf5a <CLCD_VoidSendData>
		k++;
    16c0:	8d 81       	ldd	r24, Y+5	; 0x05
    16c2:	8f 5f       	subi	r24, 0xFF	; 255
    16c4:	8d 83       	std	Y+5, r24	; 0x05
		else
		{
			break;
		}
	}
	while(F_NUM[i]!='k'&& k!=7)
    16c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    16c8:	28 2f       	mov	r18, r24
    16ca:	33 27       	eor	r19, r19
    16cc:	27 fd       	sbrc	r18, 7
    16ce:	30 95       	com	r19
    16d0:	ce 01       	movw	r24, r28
    16d2:	4a 96       	adiw	r24, 0x1a	; 26
    16d4:	fc 01       	movw	r30, r24
    16d6:	e2 0f       	add	r30, r18
    16d8:	f3 1f       	adc	r31, r19
    16da:	80 81       	ld	r24, Z
    16dc:	8b 36       	cpi	r24, 0x6B	; 107
    16de:	19 f0       	breq	.+6      	; 0x16e6 <CLCD_voidSendFloatNumber+0x2da>
    16e0:	8d 81       	ldd	r24, Y+5	; 0x05
    16e2:	87 30       	cpi	r24, 0x07	; 7
    16e4:	d1 f6       	brne	.-76     	; 0x169a <CLCD_voidSendFloatNumber+0x28e>
	{
		CLCD_VoidSendData(F_NUM[i--]+48);
		k++;
	}

}
    16e6:	a7 96       	adiw	r28, 0x27	; 39
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	f8 94       	cli
    16ec:	de bf       	out	0x3e, r29	; 62
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	cd bf       	out	0x3d, r28	; 61
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	1f 91       	pop	r17
    16f8:	0f 91       	pop	r16
    16fa:	ff 90       	pop	r15
    16fc:	ef 90       	pop	r14
    16fe:	08 95       	ret

00001700 <DIO_u8SetPinValue>:
	}

	return Local_u8ErrorState ;
}*/
u8 DIO_u8SetPinValue(u8 Copy_u8port, u8 Copy_u8pin, u8 Copy_u8Value)
{
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	28 97       	sbiw	r28, 0x08	; 8
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	8a 83       	std	Y+2, r24	; 0x02
    1716:	6b 83       	std	Y+3, r22	; 0x03
    1718:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
    171a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8pin <= DIO_u8PIN7)
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	88 30       	cpi	r24, 0x08	; 8
    1720:	08 f0       	brcs	.+2      	; 0x1724 <DIO_u8SetPinValue+0x24>
    1722:	f4 c0       	rjmp	.+488    	; 0x190c <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    1724:	8c 81       	ldd	r24, Y+4	; 0x04
    1726:	88 23       	and	r24, r24
    1728:	09 f0       	breq	.+2      	; 0x172c <DIO_u8SetPinValue+0x2c>
    172a:	77 c0       	rjmp	.+238    	; 0x181a <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8port)
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	38 87       	std	Y+8, r19	; 0x08
    1734:	2f 83       	std	Y+7, r18	; 0x07
    1736:	8f 81       	ldd	r24, Y+7	; 0x07
    1738:	98 85       	ldd	r25, Y+8	; 0x08
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	91 05       	cpc	r25, r1
    173e:	59 f1       	breq	.+86     	; 0x1796 <DIO_u8SetPinValue+0x96>
    1740:	2f 81       	ldd	r18, Y+7	; 0x07
    1742:	38 85       	ldd	r19, Y+8	; 0x08
    1744:	22 30       	cpi	r18, 0x02	; 2
    1746:	31 05       	cpc	r19, r1
    1748:	2c f4       	brge	.+10     	; 0x1754 <DIO_u8SetPinValue+0x54>
    174a:	8f 81       	ldd	r24, Y+7	; 0x07
    174c:	98 85       	ldd	r25, Y+8	; 0x08
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	69 f0       	breq	.+26     	; 0x176c <DIO_u8SetPinValue+0x6c>
    1752:	60 c0       	rjmp	.+192    	; 0x1814 <DIO_u8SetPinValue+0x114>
    1754:	2f 81       	ldd	r18, Y+7	; 0x07
    1756:	38 85       	ldd	r19, Y+8	; 0x08
    1758:	22 30       	cpi	r18, 0x02	; 2
    175a:	31 05       	cpc	r19, r1
    175c:	89 f1       	breq	.+98     	; 0x17c0 <DIO_u8SetPinValue+0xc0>
    175e:	8f 81       	ldd	r24, Y+7	; 0x07
    1760:	98 85       	ldd	r25, Y+8	; 0x08
    1762:	83 30       	cpi	r24, 0x03	; 3
    1764:	91 05       	cpc	r25, r1
    1766:	09 f4       	brne	.+2      	; 0x176a <DIO_u8SetPinValue+0x6a>
    1768:	40 c0       	rjmp	.+128    	; 0x17ea <DIO_u8SetPinValue+0xea>
    176a:	54 c0       	rjmp	.+168    	; 0x1814 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8pin);break;
    176c:	ab e3       	ldi	r26, 0x3B	; 59
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	eb e3       	ldi	r30, 0x3B	; 59
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	48 2f       	mov	r20, r24
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	02 2e       	mov	r0, r18
    1784:	02 c0       	rjmp	.+4      	; 0x178a <DIO_u8SetPinValue+0x8a>
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	0a 94       	dec	r0
    178c:	e2 f7       	brpl	.-8      	; 0x1786 <DIO_u8SetPinValue+0x86>
    178e:	80 95       	com	r24
    1790:	84 23       	and	r24, r20
    1792:	8c 93       	st	X, r24
    1794:	bd c0       	rjmp	.+378    	; 0x1910 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8pin);break;
    1796:	a8 e3       	ldi	r26, 0x38	; 56
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e8 e3       	ldi	r30, 0x38	; 56
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	48 2f       	mov	r20, r24
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	02 2e       	mov	r0, r18
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <DIO_u8SetPinValue+0xb4>
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	0a 94       	dec	r0
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <DIO_u8SetPinValue+0xb0>
    17b8:	80 95       	com	r24
    17ba:	84 23       	and	r24, r20
    17bc:	8c 93       	st	X, r24
    17be:	a8 c0       	rjmp	.+336    	; 0x1910 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8pin);break;
    17c0:	a5 e3       	ldi	r26, 0x35	; 53
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e5 e3       	ldi	r30, 0x35	; 53
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	48 2f       	mov	r20, r24
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	02 2e       	mov	r0, r18
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <DIO_u8SetPinValue+0xde>
    17da:	88 0f       	add	r24, r24
    17dc:	99 1f       	adc	r25, r25
    17de:	0a 94       	dec	r0
    17e0:	e2 f7       	brpl	.-8      	; 0x17da <DIO_u8SetPinValue+0xda>
    17e2:	80 95       	com	r24
    17e4:	84 23       	and	r24, r20
    17e6:	8c 93       	st	X, r24
    17e8:	93 c0       	rjmp	.+294    	; 0x1910 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8pin);break;
    17ea:	a2 e3       	ldi	r26, 0x32	; 50
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e2 e3       	ldi	r30, 0x32	; 50
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	48 2f       	mov	r20, r24
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	28 2f       	mov	r18, r24
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	02 2e       	mov	r0, r18
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <DIO_u8SetPinValue+0x108>
    1804:	88 0f       	add	r24, r24
    1806:	99 1f       	adc	r25, r25
    1808:	0a 94       	dec	r0
    180a:	e2 f7       	brpl	.-8      	; 0x1804 <DIO_u8SetPinValue+0x104>
    180c:	80 95       	com	r24
    180e:	84 23       	and	r24, r20
    1810:	8c 93       	st	X, r24
    1812:	7e c0       	rjmp	.+252    	; 0x1910 <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState = 1 ;
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	89 83       	std	Y+1, r24	; 0x01
    1818:	7b c0       	rjmp	.+246    	; 0x1910 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
    181a:	8c 81       	ldd	r24, Y+4	; 0x04
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	09 f0       	breq	.+2      	; 0x1822 <DIO_u8SetPinValue+0x122>
    1820:	72 c0       	rjmp	.+228    	; 0x1906 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8port)
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	3e 83       	std	Y+6, r19	; 0x06
    182a:	2d 83       	std	Y+5, r18	; 0x05
    182c:	8d 81       	ldd	r24, Y+5	; 0x05
    182e:	9e 81       	ldd	r25, Y+6	; 0x06
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	91 05       	cpc	r25, r1
    1834:	49 f1       	breq	.+82     	; 0x1888 <DIO_u8SetPinValue+0x188>
    1836:	2d 81       	ldd	r18, Y+5	; 0x05
    1838:	3e 81       	ldd	r19, Y+6	; 0x06
    183a:	22 30       	cpi	r18, 0x02	; 2
    183c:	31 05       	cpc	r19, r1
    183e:	2c f4       	brge	.+10     	; 0x184a <DIO_u8SetPinValue+0x14a>
    1840:	8d 81       	ldd	r24, Y+5	; 0x05
    1842:	9e 81       	ldd	r25, Y+6	; 0x06
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	61 f0       	breq	.+24     	; 0x1860 <DIO_u8SetPinValue+0x160>
    1848:	5b c0       	rjmp	.+182    	; 0x1900 <DIO_u8SetPinValue+0x200>
    184a:	2d 81       	ldd	r18, Y+5	; 0x05
    184c:	3e 81       	ldd	r19, Y+6	; 0x06
    184e:	22 30       	cpi	r18, 0x02	; 2
    1850:	31 05       	cpc	r19, r1
    1852:	71 f1       	breq	.+92     	; 0x18b0 <DIO_u8SetPinValue+0x1b0>
    1854:	8d 81       	ldd	r24, Y+5	; 0x05
    1856:	9e 81       	ldd	r25, Y+6	; 0x06
    1858:	83 30       	cpi	r24, 0x03	; 3
    185a:	91 05       	cpc	r25, r1
    185c:	e9 f1       	breq	.+122    	; 0x18d8 <DIO_u8SetPinValue+0x1d8>
    185e:	50 c0       	rjmp	.+160    	; 0x1900 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8pin);break;
    1860:	ab e3       	ldi	r26, 0x3B	; 59
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	eb e3       	ldi	r30, 0x3B	; 59
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	48 2f       	mov	r20, r24
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	02 2e       	mov	r0, r18
    1878:	02 c0       	rjmp	.+4      	; 0x187e <DIO_u8SetPinValue+0x17e>
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	0a 94       	dec	r0
    1880:	e2 f7       	brpl	.-8      	; 0x187a <DIO_u8SetPinValue+0x17a>
    1882:	84 2b       	or	r24, r20
    1884:	8c 93       	st	X, r24
    1886:	44 c0       	rjmp	.+136    	; 0x1910 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8pin);break;
    1888:	a8 e3       	ldi	r26, 0x38	; 56
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	e8 e3       	ldi	r30, 0x38	; 56
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	48 2f       	mov	r20, r24
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	02 2e       	mov	r0, r18
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <DIO_u8SetPinValue+0x1a6>
    18a2:	88 0f       	add	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	0a 94       	dec	r0
    18a8:	e2 f7       	brpl	.-8      	; 0x18a2 <DIO_u8SetPinValue+0x1a2>
    18aa:	84 2b       	or	r24, r20
    18ac:	8c 93       	st	X, r24
    18ae:	30 c0       	rjmp	.+96     	; 0x1910 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8pin);break;
    18b0:	a5 e3       	ldi	r26, 0x35	; 53
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e5 e3       	ldi	r30, 0x35	; 53
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	48 2f       	mov	r20, r24
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	02 2e       	mov	r0, r18
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <DIO_u8SetPinValue+0x1ce>
    18ca:	88 0f       	add	r24, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	0a 94       	dec	r0
    18d0:	e2 f7       	brpl	.-8      	; 0x18ca <DIO_u8SetPinValue+0x1ca>
    18d2:	84 2b       	or	r24, r20
    18d4:	8c 93       	st	X, r24
    18d6:	1c c0       	rjmp	.+56     	; 0x1910 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8pin);break;
    18d8:	a2 e3       	ldi	r26, 0x32	; 50
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e2 e3       	ldi	r30, 0x32	; 50
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	48 2f       	mov	r20, r24
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	02 2e       	mov	r0, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <DIO_u8SetPinValue+0x1f6>
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	0a 94       	dec	r0
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <DIO_u8SetPinValue+0x1f2>
    18fa:	84 2b       	or	r24, r20
    18fc:	8c 93       	st	X, r24
    18fe:	08 c0       	rjmp	.+16     	; 0x1910 <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState = 1 ;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	89 83       	std	Y+1, r24	; 0x01
    1904:	05 c0       	rjmp	.+10     	; 0x1910 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = 1 ;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = 1 ;
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    1910:	89 81       	ldd	r24, Y+1	; 0x01
}
    1912:	28 96       	adiw	r28, 0x08	; 8
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	cd bf       	out	0x3d, r28	; 61
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	08 95       	ret

00001924 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8port, u8 Copy_u8Value)
{
    1924:	df 93       	push	r29
    1926:	cf 93       	push	r28
    1928:	00 d0       	rcall	.+0      	; 0x192a <DIO_u8SetPortValue+0x6>
    192a:	00 d0       	rcall	.+0      	; 0x192c <DIO_u8SetPortValue+0x8>
    192c:	0f 92       	push	r0
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
    1932:	8a 83       	std	Y+2, r24	; 0x02
    1934:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0 ;
    1936:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8port)
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	28 2f       	mov	r18, r24
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	3d 83       	std	Y+5, r19	; 0x05
    1940:	2c 83       	std	Y+4, r18	; 0x04
    1942:	8c 81       	ldd	r24, Y+4	; 0x04
    1944:	9d 81       	ldd	r25, Y+5	; 0x05
    1946:	81 30       	cpi	r24, 0x01	; 1
    1948:	91 05       	cpc	r25, r1
    194a:	d1 f0       	breq	.+52     	; 0x1980 <DIO_u8SetPortValue+0x5c>
    194c:	2c 81       	ldd	r18, Y+4	; 0x04
    194e:	3d 81       	ldd	r19, Y+5	; 0x05
    1950:	22 30       	cpi	r18, 0x02	; 2
    1952:	31 05       	cpc	r19, r1
    1954:	2c f4       	brge	.+10     	; 0x1960 <DIO_u8SetPortValue+0x3c>
    1956:	8c 81       	ldd	r24, Y+4	; 0x04
    1958:	9d 81       	ldd	r25, Y+5	; 0x05
    195a:	00 97       	sbiw	r24, 0x00	; 0
    195c:	61 f0       	breq	.+24     	; 0x1976 <DIO_u8SetPortValue+0x52>
    195e:	1f c0       	rjmp	.+62     	; 0x199e <DIO_u8SetPortValue+0x7a>
    1960:	2c 81       	ldd	r18, Y+4	; 0x04
    1962:	3d 81       	ldd	r19, Y+5	; 0x05
    1964:	22 30       	cpi	r18, 0x02	; 2
    1966:	31 05       	cpc	r19, r1
    1968:	81 f0       	breq	.+32     	; 0x198a <DIO_u8SetPortValue+0x66>
    196a:	8c 81       	ldd	r24, Y+4	; 0x04
    196c:	9d 81       	ldd	r25, Y+5	; 0x05
    196e:	83 30       	cpi	r24, 0x03	; 3
    1970:	91 05       	cpc	r25, r1
    1972:	81 f0       	breq	.+32     	; 0x1994 <DIO_u8SetPortValue+0x70>
    1974:	14 c0       	rjmp	.+40     	; 0x199e <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break ;
    1976:	eb e3       	ldi	r30, 0x3B	; 59
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	80 83       	st	Z, r24
    197e:	11 c0       	rjmp	.+34     	; 0x19a2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break ;
    1980:	e8 e3       	ldi	r30, 0x38	; 56
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	80 83       	st	Z, r24
    1988:	0c c0       	rjmp	.+24     	; 0x19a2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break ;
    198a:	e5 e3       	ldi	r30, 0x35	; 53
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	80 83       	st	Z, r24
    1992:	07 c0       	rjmp	.+14     	; 0x19a2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break ;
    1994:	e2 e3       	ldi	r30, 0x32	; 50
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	80 83       	st	Z, r24
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <DIO_u8SetPortValue+0x7e>
	default : Local_u8ErrorState = 1 ;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	08 95       	ret

000019b4 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8port, u8 Copy_u8pin , u8 * Copy_pu8Value)

{
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
    19bc:	27 97       	sbiw	r28, 0x07	; 7
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	de bf       	out	0x3e, r29	; 62
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	cd bf       	out	0x3d, r28	; 61
    19c8:	8a 83       	std	Y+2, r24	; 0x02
    19ca:	6b 83       	std	Y+3, r22	; 0x03
    19cc:	5d 83       	std	Y+5, r21	; 0x05
    19ce:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0 ;
    19d0:	19 82       	std	Y+1, r1	; 0x01
	// any function receives function check if it equal to null or not
	if((Copy_pu8Value!=NULL ) && ( Copy_u8pin<=DIO_u8PIN7))
    19d2:	8c 81       	ldd	r24, Y+4	; 0x04
    19d4:	9d 81       	ldd	r25, Y+5	; 0x05
    19d6:	00 97       	sbiw	r24, 0x00	; 0
    19d8:	09 f4       	brne	.+2      	; 0x19dc <DIO_u8GetPinValue+0x28>
    19da:	78 c0       	rjmp	.+240    	; 0x1acc <DIO_u8GetPinValue+0x118>
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	88 30       	cpi	r24, 0x08	; 8
    19e0:	08 f0       	brcs	.+2      	; 0x19e4 <DIO_u8GetPinValue+0x30>
    19e2:	74 c0       	rjmp	.+232    	; 0x1acc <DIO_u8GetPinValue+0x118>
	{
		switch (Copy_u8port)
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	3f 83       	std	Y+7, r19	; 0x07
    19ec:	2e 83       	std	Y+6, r18	; 0x06
    19ee:	4e 81       	ldd	r20, Y+6	; 0x06
    19f0:	5f 81       	ldd	r21, Y+7	; 0x07
    19f2:	41 30       	cpi	r20, 0x01	; 1
    19f4:	51 05       	cpc	r21, r1
    19f6:	59 f1       	breq	.+86     	; 0x1a4e <DIO_u8GetPinValue+0x9a>
    19f8:	8e 81       	ldd	r24, Y+6	; 0x06
    19fa:	9f 81       	ldd	r25, Y+7	; 0x07
    19fc:	82 30       	cpi	r24, 0x02	; 2
    19fe:	91 05       	cpc	r25, r1
    1a00:	34 f4       	brge	.+12     	; 0x1a0e <DIO_u8GetPinValue+0x5a>
    1a02:	2e 81       	ldd	r18, Y+6	; 0x06
    1a04:	3f 81       	ldd	r19, Y+7	; 0x07
    1a06:	21 15       	cp	r18, r1
    1a08:	31 05       	cpc	r19, r1
    1a0a:	69 f0       	breq	.+26     	; 0x1a26 <DIO_u8GetPinValue+0x72>
    1a0c:	5c c0       	rjmp	.+184    	; 0x1ac6 <DIO_u8GetPinValue+0x112>
    1a0e:	4e 81       	ldd	r20, Y+6	; 0x06
    1a10:	5f 81       	ldd	r21, Y+7	; 0x07
    1a12:	42 30       	cpi	r20, 0x02	; 2
    1a14:	51 05       	cpc	r21, r1
    1a16:	79 f1       	breq	.+94     	; 0x1a76 <DIO_u8GetPinValue+0xc2>
    1a18:	8e 81       	ldd	r24, Y+6	; 0x06
    1a1a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a1c:	83 30       	cpi	r24, 0x03	; 3
    1a1e:	91 05       	cpc	r25, r1
    1a20:	09 f4       	brne	.+2      	; 0x1a24 <DIO_u8GetPinValue+0x70>
    1a22:	3d c0       	rjmp	.+122    	; 0x1a9e <DIO_u8GetPinValue+0xea>
    1a24:	50 c0       	rjmp	.+160    	; 0x1ac6 <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA : *Copy_pu8Value = GET_BIT(PINA ,Copy_u8pin); break ;
    1a26:	e9 e3       	ldi	r30, 0x39	; 57
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	88 2f       	mov	r24, r24
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	a9 01       	movw	r20, r18
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <DIO_u8GetPinValue+0x8a>
    1a3a:	55 95       	asr	r21
    1a3c:	47 95       	ror	r20
    1a3e:	8a 95       	dec	r24
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <DIO_u8GetPinValue+0x86>
    1a42:	ca 01       	movw	r24, r20
    1a44:	81 70       	andi	r24, 0x01	; 1
    1a46:	ec 81       	ldd	r30, Y+4	; 0x04
    1a48:	fd 81       	ldd	r31, Y+5	; 0x05
    1a4a:	80 83       	st	Z, r24
    1a4c:	41 c0       	rjmp	.+130    	; 0x1ad0 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB : *Copy_pu8Value = GET_BIT(PINB ,Copy_u8pin); break ;
    1a4e:	e6 e3       	ldi	r30, 0x36	; 54
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	88 2f       	mov	r24, r24
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	a9 01       	movw	r20, r18
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <DIO_u8GetPinValue+0xb2>
    1a62:	55 95       	asr	r21
    1a64:	47 95       	ror	r20
    1a66:	8a 95       	dec	r24
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <DIO_u8GetPinValue+0xae>
    1a6a:	ca 01       	movw	r24, r20
    1a6c:	81 70       	andi	r24, 0x01	; 1
    1a6e:	ec 81       	ldd	r30, Y+4	; 0x04
    1a70:	fd 81       	ldd	r31, Y+5	; 0x05
    1a72:	80 83       	st	Z, r24
    1a74:	2d c0       	rjmp	.+90     	; 0x1ad0 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC : *Copy_pu8Value = GET_BIT(PINC ,Copy_u8pin); break ;
    1a76:	e3 e3       	ldi	r30, 0x33	; 51
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	88 2f       	mov	r24, r24
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	a9 01       	movw	r20, r18
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <DIO_u8GetPinValue+0xda>
    1a8a:	55 95       	asr	r21
    1a8c:	47 95       	ror	r20
    1a8e:	8a 95       	dec	r24
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <DIO_u8GetPinValue+0xd6>
    1a92:	ca 01       	movw	r24, r20
    1a94:	81 70       	andi	r24, 0x01	; 1
    1a96:	ec 81       	ldd	r30, Y+4	; 0x04
    1a98:	fd 81       	ldd	r31, Y+5	; 0x05
    1a9a:	80 83       	st	Z, r24
    1a9c:	19 c0       	rjmp	.+50     	; 0x1ad0 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD : *Copy_pu8Value = GET_BIT(PIND ,Copy_u8pin); break ;
    1a9e:	e0 e3       	ldi	r30, 0x30	; 48
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	88 2f       	mov	r24, r24
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	a9 01       	movw	r20, r18
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <DIO_u8GetPinValue+0x102>
    1ab2:	55 95       	asr	r21
    1ab4:	47 95       	ror	r20
    1ab6:	8a 95       	dec	r24
    1ab8:	e2 f7       	brpl	.-8      	; 0x1ab2 <DIO_u8GetPinValue+0xfe>
    1aba:	ca 01       	movw	r24, r20
    1abc:	81 70       	andi	r24, 0x01	; 1
    1abe:	ec 81       	ldd	r30, Y+4	; 0x04
    1ac0:	fd 81       	ldd	r31, Y+5	; 0x05
    1ac2:	80 83       	st	Z, r24
    1ac4:	05 c0       	rjmp	.+10     	; 0x1ad0 <DIO_u8GetPinValue+0x11c>
		default : Local_u8ErrorState = 1 ;
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	89 83       	std	Y+1, r24	; 0x01
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState = 1 ;
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ad2:	27 96       	adiw	r28, 0x07	; 7
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	f8 94       	cli
    1ad8:	de bf       	out	0x3e, r29	; 62
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	cd bf       	out	0x3d, r28	; 61
    1ade:	cf 91       	pop	r28
    1ae0:	df 91       	pop	r29
    1ae2:	08 95       	ret

00001ae4 <KEYPAD_u8GetPressedKey>:
#include "KEYPAD_Config.h"
#include "KEYPAD_Interface.h"
#include "KEYPAD_Private.h"

u8 KEYPAD_u8GetPressedKey(void)
{
    1ae4:	df 93       	push	r29
    1ae6:	cf 93       	push	r28
    1ae8:	00 d0       	rcall	.+0      	; 0x1aea <KEYPAD_u8GetPressedKey+0x6>
    1aea:	00 d0       	rcall	.+0      	; 0x1aec <KEYPAD_u8GetPressedKey+0x8>
    1aec:	0f 92       	push	r0
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey = KEYPAD_NO_PRESSED_KEY , Local_u8ColumnIndex , Local_u8RowIndex , Local_u8PinState;
    1af2:	8f ef       	ldi	r24, 0xFF	; 255
    1af4:	8b 83       	std	Y+3, r24	; 0x03
	static	u8 Local_u8KEYPADArr[COLUMN_NUM][ROW_NUM]= KEYPAD_ARR_VAL;
	static	u8 Local_u8KEPYAD_ColumnArr[COLUMN_NUM] = {KEYPAD_COLUMN0_PIN,KEYPAD_COLUMN1_PIN,KEYPAD_COLUMN2_PIN,KEYPAD_COLUMN3_PIN};
	static	u8 Local_u8KEPYAD_RowArr[ROW_NUM] = {KEYPAD_ROW0_PIN,KEYPAD_ROW1_PIN,KEYPAD_ROW2_PIN,KEYPAD_ROW3_PIN};

	for ( Local_u8ColumnIndex = 0 ; Local_u8ColumnIndex < COLUMN_NUM ; Local_u8ColumnIndex++)
    1af6:	1a 82       	std	Y+2, r1	; 0x02
    1af8:	5e c0       	rjmp	.+188    	; 0x1bb6 <KEYPAD_u8GetPressedKey+0xd2>
	{
		/*Activate Current Column*/
		DIO_u8SetPinValue(KEYPAD_PORT ,Local_u8KEPYAD_ColumnArr[Local_u8ColumnIndex] ,DIO_u8PIN_LOW);
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	88 2f       	mov	r24, r24
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	fc 01       	movw	r30, r24
    1b02:	e5 58       	subi	r30, 0x85	; 133
    1b04:	fe 4f       	sbci	r31, 0xFE	; 254
    1b06:	90 81       	ld	r25, Z
    1b08:	83 e0       	ldi	r24, 0x03	; 3
    1b0a:	69 2f       	mov	r22, r25
    1b0c:	40 e0       	ldi	r20, 0x00	; 0
    1b0e:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
		for(Local_u8RowIndex = 0 ;Local_u8RowIndex < ROW_NUM ; Local_u8RowIndex++)
    1b12:	19 82       	std	Y+1, r1	; 0x01
    1b14:	3d c0       	rjmp	.+122    	; 0x1b90 <KEYPAD_u8GetPressedKey+0xac>
		{
			/*Read The Current Row*/
			DIO_u8GetPinValue(KEYPAD_PORT , Local_u8KEPYAD_RowArr[Local_u8RowIndex] , &Local_u8PinState);
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	88 2f       	mov	r24, r24
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	e9 58       	subi	r30, 0x89	; 137
    1b20:	fe 4f       	sbci	r31, 0xFE	; 254
    1b22:	90 81       	ld	r25, Z
    1b24:	9e 01       	movw	r18, r28
    1b26:	2c 5f       	subi	r18, 0xFC	; 252
    1b28:	3f 4f       	sbci	r19, 0xFF	; 255
    1b2a:	83 e0       	ldi	r24, 0x03	; 3
    1b2c:	69 2f       	mov	r22, r25
    1b2e:	a9 01       	movw	r20, r18
    1b30:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <DIO_u8GetPinValue>

			/*Check if switch is pressed*/
			if(DIO_u8PIN_LOW == Local_u8PinState )
    1b34:	8c 81       	ldd	r24, Y+4	; 0x04
    1b36:	88 23       	and	r24, r24
    1b38:	41 f5       	brne	.+80     	; 0x1b8a <KEYPAD_u8GetPressedKey+0xa6>
			{
				/*Prevent if two buttons are pressed*/
				Local_u8PressedKey = Local_u8KEYPADArr[Local_u8RowIndex][Local_u8ColumnIndex];
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	48 2f       	mov	r20, r24
    1b3e:	50 e0       	ldi	r21, 0x00	; 0
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	28 2f       	mov	r18, r24
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	ca 01       	movw	r24, r20
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	88 0f       	add	r24, r24
    1b4e:	99 1f       	adc	r25, r25
    1b50:	82 0f       	add	r24, r18
    1b52:	93 1f       	adc	r25, r19
    1b54:	fc 01       	movw	r30, r24
    1b56:	e1 58       	subi	r30, 0x81	; 129
    1b58:	fe 4f       	sbci	r31, 0xFE	; 254
    1b5a:	80 81       	ld	r24, Z
    1b5c:	8b 83       	std	Y+3, r24	; 0x03
    1b5e:	0f c0       	rjmp	.+30     	; 0x1b7e <KEYPAD_u8GetPressedKey+0x9a>
				/*To check whether user still pressing or not
				 * busy waiting until key is released*/
				//Value is before the variable to send error if it`s not true
				while(DIO_u8PIN_LOW == Local_u8PinState)
				{
					DIO_u8GetPinValue(KEYPAD_PORT , Local_u8KEPYAD_RowArr[Local_u8RowIndex] , &Local_u8PinState);
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	88 2f       	mov	r24, r24
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	fc 01       	movw	r30, r24
    1b68:	e9 58       	subi	r30, 0x89	; 137
    1b6a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b6c:	90 81       	ld	r25, Z
    1b6e:	9e 01       	movw	r18, r28
    1b70:	2c 5f       	subi	r18, 0xFC	; 252
    1b72:	3f 4f       	sbci	r19, 0xFF	; 255
    1b74:	83 e0       	ldi	r24, 0x03	; 3
    1b76:	69 2f       	mov	r22, r25
    1b78:	a9 01       	movw	r20, r18
    1b7a:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <DIO_u8GetPinValue>
				Local_u8PressedKey = Local_u8KEYPADArr[Local_u8RowIndex][Local_u8ColumnIndex];

				/*To check whether user still pressing or not
				 * busy waiting until key is released*/
				//Value is before the variable to send error if it`s not true
				while(DIO_u8PIN_LOW == Local_u8PinState)
    1b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b80:	88 23       	and	r24, r24
    1b82:	71 f3       	breq	.-36     	; 0x1b60 <KEYPAD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KEYPAD_PORT , Local_u8KEPYAD_RowArr[Local_u8RowIndex] , &Local_u8PinState);
				}
				return Local_u8PressedKey;
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	8d 83       	std	Y+5, r24	; 0x05
    1b88:	1c c0       	rjmp	.+56     	; 0x1bc2 <KEYPAD_u8GetPressedKey+0xde>

	for ( Local_u8ColumnIndex = 0 ; Local_u8ColumnIndex < COLUMN_NUM ; Local_u8ColumnIndex++)
	{
		/*Activate Current Column*/
		DIO_u8SetPinValue(KEYPAD_PORT ,Local_u8KEPYAD_ColumnArr[Local_u8ColumnIndex] ,DIO_u8PIN_LOW);
		for(Local_u8RowIndex = 0 ;Local_u8RowIndex < ROW_NUM ; Local_u8RowIndex++)
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	8f 5f       	subi	r24, 0xFF	; 255
    1b8e:	89 83       	std	Y+1, r24	; 0x01
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	84 30       	cpi	r24, 0x04	; 4
    1b94:	08 f4       	brcc	.+2      	; 0x1b98 <KEYPAD_u8GetPressedKey+0xb4>
    1b96:	bf cf       	rjmp	.-130    	; 0x1b16 <KEYPAD_u8GetPressedKey+0x32>
				}
				return Local_u8PressedKey;
			}
		}
		/*Deactivate the current column*/
		DIO_u8SetPinValue(KEYPAD_PORT ,Local_u8KEPYAD_ColumnArr[Local_u8ColumnIndex] ,DIO_u8PIN_HIGH);
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	88 2f       	mov	r24, r24
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	e5 58       	subi	r30, 0x85	; 133
    1ba2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ba4:	90 81       	ld	r25, Z
    1ba6:	83 e0       	ldi	r24, 0x03	; 3
    1ba8:	69 2f       	mov	r22, r25
    1baa:	41 e0       	ldi	r20, 0x01	; 1
    1bac:	0e 94 80 0b 	call	0x1700	; 0x1700 <DIO_u8SetPinValue>
	u8 Local_u8PressedKey = KEYPAD_NO_PRESSED_KEY , Local_u8ColumnIndex , Local_u8RowIndex , Local_u8PinState;
	static	u8 Local_u8KEYPADArr[COLUMN_NUM][ROW_NUM]= KEYPAD_ARR_VAL;
	static	u8 Local_u8KEPYAD_ColumnArr[COLUMN_NUM] = {KEYPAD_COLUMN0_PIN,KEYPAD_COLUMN1_PIN,KEYPAD_COLUMN2_PIN,KEYPAD_COLUMN3_PIN};
	static	u8 Local_u8KEPYAD_RowArr[ROW_NUM] = {KEYPAD_ROW0_PIN,KEYPAD_ROW1_PIN,KEYPAD_ROW2_PIN,KEYPAD_ROW3_PIN};

	for ( Local_u8ColumnIndex = 0 ; Local_u8ColumnIndex < COLUMN_NUM ; Local_u8ColumnIndex++)
    1bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb2:	8f 5f       	subi	r24, 0xFF	; 255
    1bb4:	8a 83       	std	Y+2, r24	; 0x02
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	84 30       	cpi	r24, 0x04	; 4
    1bba:	08 f4       	brcc	.+2      	; 0x1bbe <KEYPAD_u8GetPressedKey+0xda>
    1bbc:	9e cf       	rjmp	.-196    	; 0x1afa <KEYPAD_u8GetPressedKey+0x16>

	}



	return Local_u8PressedKey;
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	8d 83       	std	Y+5, r24	; 0x05
    1bc2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	cf 91       	pop	r28
    1bd0:	df 91       	pop	r29
    1bd2:	08 95       	ret

00001bd4 <PORT_voidInit>:
#include "PORT_Private.h"
#include "PORT_Interface.h"
#include "PORT_Register.h"

void PORT_voidInit(void)
{
    1bd4:	df 93       	push	r29
    1bd6:	cf 93       	push	r28
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR ;
    1bdc:	ea e3       	ldi	r30, 0x3A	; 58
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	8f ef       	ldi	r24, 0xFF	; 255
    1be2:	80 83       	st	Z, r24
	DDRB = PORTB_DIR ;
    1be4:	e7 e3       	ldi	r30, 0x37	; 55
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	10 82       	st	Z, r1
	DDRC = PORTC_DIR ;
    1bea:	e4 e3       	ldi	r30, 0x34	; 52
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	8f ef       	ldi	r24, 0xFF	; 255
    1bf0:	80 83       	st	Z, r24
	DDRD = PORTD_DIR ;
    1bf2:	e1 e3       	ldi	r30, 0x31	; 49
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	8f e0       	ldi	r24, 0x0F	; 15
    1bf8:	80 83       	st	Z, r24
	
	PORTA = PORTA_INITIAL_VALUE  ;
    1bfa:	eb e3       	ldi	r30, 0x3B	; 59
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE  ;
    1c00:	e8 e3       	ldi	r30, 0x38	; 56
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE  ;
    1c06:	e5 e3       	ldi	r30, 0x35	; 53
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE  ;
    1c0c:	e2 e3       	ldi	r30, 0x32	; 50
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	8f ef       	ldi	r24, 0xFF	; 255
    1c12:	80 83       	st	Z, r24
}
    1c14:	cf 91       	pop	r28
    1c16:	df 91       	pop	r29
    1c18:	08 95       	ret

00001c1a <main>:
#include "KEYPAD_Interface.h"
#include "util/delay.h"

#define MAX         5
void main (void)
{
    1c1a:	ef 92       	push	r14
    1c1c:	ff 92       	push	r15
    1c1e:	0f 93       	push	r16
    1c20:	1f 93       	push	r17
    1c22:	df 93       	push	r29
    1c24:	cf 93       	push	r28
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	a6 97       	sbiw	r28, 0x26	; 38
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	f8 94       	cli
    1c30:	de bf       	out	0x3e, r29	; 62
    1c32:	0f be       	out	0x3f, r0	; 63
    1c34:	cd bf       	out	0x3d, r28	; 61
	u16 FirstNum= 0  , SecondNum =  0;
    1c36:	18 8e       	std	Y+24, r1	; 0x18
    1c38:	1f 8a       	std	Y+23, r1	; 0x17
    1c3a:	1e 8a       	std	Y+22, r1	; 0x16
    1c3c:	1d 8a       	std	Y+21, r1	; 0x15
	u8 Local_u8Key ,Local_u8Counter1= 0 ,Local_u8Counter2= 0  ,Operation ,FLAG1 = 0,FLAG2 = 1;
    1c3e:	1b 8a       	std	Y+19, r1	; 0x13
    1c40:	1a 8a       	std	Y+18, r1	; 0x12
    1c42:	18 8a       	std	Y+16, r1	; 0x10
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	8f 87       	std	Y+15, r24	; 0x0f
	u8  Num1[MAX] = {0} , Num2[MAX] = {0};
    1c48:	85 e0       	ldi	r24, 0x05	; 5
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	79 96       	adiw	r30, 0x19	; 25
    1c4e:	df 01       	movw	r26, r30
    1c50:	28 2f       	mov	r18, r24
    1c52:	1d 92       	st	X+, r1
    1c54:	2a 95       	dec	r18
    1c56:	e9 f7       	brne	.-6      	; 0x1c52 <main+0x38>
    1c58:	85 e0       	ldi	r24, 0x05	; 5
    1c5a:	fe 01       	movw	r30, r28
    1c5c:	7e 96       	adiw	r30, 0x1e	; 30
    1c5e:	df 01       	movw	r26, r30
    1c60:	28 2f       	mov	r18, r24
    1c62:	1d 92       	st	X+, r1
    1c64:	2a 95       	dec	r18
    1c66:	e9 f7       	brne	.-6      	; 0x1c62 <main+0x48>
	PORT_voidInit();
    1c68:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <PORT_voidInit>
	CLCD_VoidInit();
    1c6c:	0e 94 4b 08 	call	0x1096	; 0x1096 <CLCD_VoidInit>
    1c70:	31 c0       	rjmp	.+98     	; 0x1cd4 <main+0xba>
		/*Reading First Number Digits */
		while(FLAG1 != 1 )
		{
			do
			{
				Local_u8Key = KEYPAD_u8GetPressedKey();
    1c72:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <KEYPAD_u8GetPressedKey>
    1c76:	8c 8b       	std	Y+20, r24	; 0x14
			}while(Local_u8Key == KEYPAD_NO_PRESSED_KEY);
    1c78:	8c 89       	ldd	r24, Y+20	; 0x14
    1c7a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c7c:	d1 f3       	breq	.-12     	; 0x1c72 <main+0x58>

			/*Break the Loop when an operation is entered*/
			if (Local_u8Key == '+' || Local_u8Key == '-' || Local_u8Key == '/' || Local_u8Key == '*')
    1c7e:	8c 89       	ldd	r24, Y+20	; 0x14
    1c80:	8b 32       	cpi	r24, 0x2B	; 43
    1c82:	49 f0       	breq	.+18     	; 0x1c96 <main+0x7c>
    1c84:	8c 89       	ldd	r24, Y+20	; 0x14
    1c86:	8d 32       	cpi	r24, 0x2D	; 45
    1c88:	31 f0       	breq	.+12     	; 0x1c96 <main+0x7c>
    1c8a:	8c 89       	ldd	r24, Y+20	; 0x14
    1c8c:	8f 32       	cpi	r24, 0x2F	; 47
    1c8e:	19 f0       	breq	.+6      	; 0x1c96 <main+0x7c>
    1c90:	8c 89       	ldd	r24, Y+20	; 0x14
    1c92:	8a 32       	cpi	r24, 0x2A	; 42
    1c94:	49 f4       	brne	.+18     	; 0x1ca8 <main+0x8e>
			{
				FLAG1++;
    1c96:	88 89       	ldd	r24, Y+16	; 0x10
    1c98:	8f 5f       	subi	r24, 0xFF	; 255
    1c9a:	88 8b       	std	Y+16, r24	; 0x10
				/*Sending Operation operator to LCD*/
				CLCD_VoidSendData(Local_u8Key);
    1c9c:	8c 89       	ldd	r24, Y+20	; 0x14
    1c9e:	0e 94 ad 07 	call	0xf5a	; 0xf5a <CLCD_VoidSendData>
				/*Saving Operation to use it in calculating result*/
				Operation = Local_u8Key;
    1ca2:	8c 89       	ldd	r24, Y+20	; 0x14
    1ca4:	89 8b       	std	Y+17, r24	; 0x11
    1ca6:	40 c0       	rjmp	.+128    	; 0x1d28 <main+0x10e>
				break;
			}
			/*Send Entered Digits of First Operand to LCD*/
			CLCD_voidSendNumber(Local_u8Key);
    1ca8:	8c 89       	ldd	r24, Y+20	; 0x14
    1caa:	88 2f       	mov	r24, r24
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	a0 e0       	ldi	r26, 0x00	; 0
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	bc 01       	movw	r22, r24
    1cb4:	cd 01       	movw	r24, r26
    1cb6:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendNumber>
			/*Saving Digits into and array */
			Num1[Local_u8Counter1] = Local_u8Key;
    1cba:	8b 89       	ldd	r24, Y+19	; 0x13
    1cbc:	28 2f       	mov	r18, r24
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	ce 01       	movw	r24, r28
    1cc2:	49 96       	adiw	r24, 0x19	; 25
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	e2 0f       	add	r30, r18
    1cc8:	f3 1f       	adc	r31, r19
    1cca:	8c 89       	ldd	r24, Y+20	; 0x14
    1ccc:	80 83       	st	Z, r24
			Local_u8Counter1++;
    1cce:	8b 89       	ldd	r24, Y+19	; 0x13
    1cd0:	8f 5f       	subi	r24, 0xFF	; 255
    1cd2:	8b 8b       	std	Y+19, r24	; 0x13
	CLCD_VoidInit();

	while(1)
	{
		/*Reading First Number Digits */
		while(FLAG1 != 1 )
    1cd4:	88 89       	ldd	r24, Y+16	; 0x10
    1cd6:	81 30       	cpi	r24, 0x01	; 1
    1cd8:	61 f6       	brne	.-104    	; 0x1c72 <main+0x58>
    1cda:	26 c0       	rjmp	.+76     	; 0x1d28 <main+0x10e>
		/*Reading Second Number Digits */
		while(FLAG2 != 0)
		{
			do
			{
				Local_u8Key = KEYPAD_u8GetPressedKey();
    1cdc:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <KEYPAD_u8GetPressedKey>
    1ce0:	8c 8b       	std	Y+20, r24	; 0x14
			}while(Local_u8Key == 0xff);
    1ce2:	8c 89       	ldd	r24, Y+20	; 0x14
    1ce4:	8f 3f       	cpi	r24, 0xFF	; 255
    1ce6:	d1 f3       	breq	.-12     	; 0x1cdc <main+0xc2>
			/*Break the Loop when equal operator is entered*/
			if (Local_u8Key == '=' )
    1ce8:	8c 89       	ldd	r24, Y+20	; 0x14
    1cea:	8d 33       	cpi	r24, 0x3D	; 61
    1cec:	39 f4       	brne	.+14     	; 0x1cfc <main+0xe2>
			{
				FLAG2--;
    1cee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cf0:	81 50       	subi	r24, 0x01	; 1
    1cf2:	8f 87       	std	Y+15, r24	; 0x0f
				CLCD_VoidSendData(Local_u8Key);
    1cf4:	8c 89       	ldd	r24, Y+20	; 0x14
    1cf6:	0e 94 ad 07 	call	0xf5a	; 0xf5a <CLCD_VoidSendData>
    1cfa:	19 c0       	rjmp	.+50     	; 0x1d2e <main+0x114>

				break;
			}
			/*Send Entered Digits of Second Operand to LCD*/
			CLCD_voidSendNumber(Local_u8Key);
    1cfc:	8c 89       	ldd	r24, Y+20	; 0x14
    1cfe:	88 2f       	mov	r24, r24
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	a0 e0       	ldi	r26, 0x00	; 0
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	bc 01       	movw	r22, r24
    1d08:	cd 01       	movw	r24, r26
    1d0a:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendNumber>
			/*Saving Digits into and array */
			Num2[Local_u8Counter2] = Local_u8Key;
    1d0e:	8a 89       	ldd	r24, Y+18	; 0x12
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	ce 01       	movw	r24, r28
    1d16:	4e 96       	adiw	r24, 0x1e	; 30
    1d18:	fc 01       	movw	r30, r24
    1d1a:	e2 0f       	add	r30, r18
    1d1c:	f3 1f       	adc	r31, r19
    1d1e:	8c 89       	ldd	r24, Y+20	; 0x14
    1d20:	80 83       	st	Z, r24
			/*Counting Digits of Second Number*/
			Local_u8Counter2++;
    1d22:	8a 89       	ldd	r24, Y+18	; 0x12
    1d24:	8f 5f       	subi	r24, 0xFF	; 255
    1d26:	8a 8b       	std	Y+18, r24	; 0x12
			Num1[Local_u8Counter1] = Local_u8Key;
			Local_u8Counter1++;

		}
		/*Reading Second Number Digits */
		while(FLAG2 != 0)
    1d28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d2a:	88 23       	and	r24, r24
    1d2c:	b9 f6       	brne	.-82     	; 0x1cdc <main+0xc2>
			Num2[Local_u8Counter2] = Local_u8Key;
			/*Counting Digits of Second Number*/
			Local_u8Counter2++;

		}
		if(Local_u8Key == '#')
    1d2e:	8c 89       	ldd	r24, Y+20	; 0x14
    1d30:	83 32       	cpi	r24, 0x23	; 35
    1d32:	29 f4       	brne	.+10     	; 0x1d3e <main+0x124>
		{
			FLAG1 = 0 ;
    1d34:	18 8a       	std	Y+16, r1	; 0x10
			FLAG2 = 0;
    1d36:	1f 86       	std	Y+15, r1	; 0x0f
			CLCD_VoidSendCommand(CLCD_CLEAR);
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <CLCD_VoidSendCommand>
		}
		if(Local_u8Key == '=' )
    1d3e:	8c 89       	ldd	r24, Y+20	; 0x14
    1d40:	8d 33       	cpi	r24, 0x3D	; 61
    1d42:	41 f6       	brne	.-112    	; 0x1cd4 <main+0xba>
		{
			/*Calculating the value of the first and Second number
			 * This Code Supports only operation on 2-Bytes-Unsigned integers
			 */
			switch(Local_u8Counter1)
    1d44:	8b 89       	ldd	r24, Y+19	; 0x13
    1d46:	48 2f       	mov	r20, r24
    1d48:	50 e0       	ldi	r21, 0x00	; 0
    1d4a:	5e a3       	std	Y+38, r21	; 0x26
    1d4c:	4d a3       	std	Y+37, r20	; 0x25
    1d4e:	6d a1       	ldd	r22, Y+37	; 0x25
    1d50:	7e a1       	ldd	r23, Y+38	; 0x26
    1d52:	62 30       	cpi	r22, 0x02	; 2
    1d54:	71 05       	cpc	r23, r1
    1d56:	51 f1       	breq	.+84     	; 0x1dac <main+0x192>
    1d58:	8d a1       	ldd	r24, Y+37	; 0x25
    1d5a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d5c:	83 30       	cpi	r24, 0x03	; 3
    1d5e:	91 05       	cpc	r25, r1
    1d60:	54 f4       	brge	.+20     	; 0x1d76 <main+0x15c>
    1d62:	ad a1       	ldd	r26, Y+37	; 0x25
    1d64:	be a1       	ldd	r27, Y+38	; 0x26
    1d66:	10 97       	sbiw	r26, 0x00	; 0
    1d68:	c1 f0       	breq	.+48     	; 0x1d9a <main+0x180>
    1d6a:	ed a1       	ldd	r30, Y+37	; 0x25
    1d6c:	fe a1       	ldd	r31, Y+38	; 0x26
    1d6e:	e1 30       	cpi	r30, 0x01	; 1
    1d70:	f1 05       	cpc	r31, r1
    1d72:	b1 f0       	breq	.+44     	; 0x1da0 <main+0x186>
    1d74:	ca c0       	rjmp	.+404    	; 0x1f0a <main+0x2f0>
    1d76:	2d a1       	ldd	r18, Y+37	; 0x25
    1d78:	3e a1       	ldd	r19, Y+38	; 0x26
    1d7a:	24 30       	cpi	r18, 0x04	; 4
    1d7c:	31 05       	cpc	r19, r1
    1d7e:	09 f4       	brne	.+2      	; 0x1d82 <main+0x168>
    1d80:	4e c0       	rjmp	.+156    	; 0x1e1e <main+0x204>
    1d82:	4d a1       	ldd	r20, Y+37	; 0x25
    1d84:	5e a1       	ldd	r21, Y+38	; 0x26
    1d86:	44 30       	cpi	r20, 0x04	; 4
    1d88:	51 05       	cpc	r21, r1
    1d8a:	2c f1       	brlt	.+74     	; 0x1dd6 <main+0x1bc>
    1d8c:	6d a1       	ldd	r22, Y+37	; 0x25
    1d8e:	7e a1       	ldd	r23, Y+38	; 0x26
    1d90:	65 30       	cpi	r22, 0x05	; 5
    1d92:	71 05       	cpc	r23, r1
    1d94:	09 f4       	brne	.+2      	; 0x1d98 <main+0x17e>
    1d96:	76 c0       	rjmp	.+236    	; 0x1e84 <main+0x26a>
    1d98:	b8 c0       	rjmp	.+368    	; 0x1f0a <main+0x2f0>
			{
			case 0 : FirstNum = 0; 			break;
    1d9a:	18 8e       	std	Y+24, r1	; 0x18
    1d9c:	1f 8a       	std	Y+23, r1	; 0x17
    1d9e:	b5 c0       	rjmp	.+362    	; 0x1f0a <main+0x2f0>
			case 1 : FirstNum = Num1[0]; 	break;
    1da0:	89 8d       	ldd	r24, Y+25	; 0x19
    1da2:	88 2f       	mov	r24, r24
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	98 8f       	std	Y+24, r25	; 0x18
    1da8:	8f 8b       	std	Y+23, r24	; 0x17
    1daa:	af c0       	rjmp	.+350    	; 0x1f0a <main+0x2f0>
			case 2 : FirstNum = Num1[0] * 10 + Num1[1] ; break;
    1dac:	89 8d       	ldd	r24, Y+25	; 0x19
    1dae:	88 2f       	mov	r24, r24
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	9c 01       	movw	r18, r24
    1db4:	22 0f       	add	r18, r18
    1db6:	33 1f       	adc	r19, r19
    1db8:	c9 01       	movw	r24, r18
    1dba:	88 0f       	add	r24, r24
    1dbc:	99 1f       	adc	r25, r25
    1dbe:	88 0f       	add	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	28 0f       	add	r18, r24
    1dc4:	39 1f       	adc	r19, r25
    1dc6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1dc8:	88 2f       	mov	r24, r24
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	82 0f       	add	r24, r18
    1dce:	93 1f       	adc	r25, r19
    1dd0:	98 8f       	std	Y+24, r25	; 0x18
    1dd2:	8f 8b       	std	Y+23, r24	; 0x17
    1dd4:	9a c0       	rjmp	.+308    	; 0x1f0a <main+0x2f0>
			case 3 : FirstNum = Num1[0] * 10 * 10 + Num1[1] * 10 + Num1[2] ; break;
    1dd6:	89 8d       	ldd	r24, Y+25	; 0x19
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	84 e6       	ldi	r24, 0x64	; 100
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	28 9f       	mul	r18, r24
    1de2:	a0 01       	movw	r20, r0
    1de4:	29 9f       	mul	r18, r25
    1de6:	50 0d       	add	r21, r0
    1de8:	38 9f       	mul	r19, r24
    1dea:	50 0d       	add	r21, r0
    1dec:	11 24       	eor	r1, r1
    1dee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1df0:	88 2f       	mov	r24, r24
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	9c 01       	movw	r18, r24
    1df6:	22 0f       	add	r18, r18
    1df8:	33 1f       	adc	r19, r19
    1dfa:	c9 01       	movw	r24, r18
    1dfc:	88 0f       	add	r24, r24
    1dfe:	99 1f       	adc	r25, r25
    1e00:	88 0f       	add	r24, r24
    1e02:	99 1f       	adc	r25, r25
    1e04:	82 0f       	add	r24, r18
    1e06:	93 1f       	adc	r25, r19
    1e08:	9a 01       	movw	r18, r20
    1e0a:	28 0f       	add	r18, r24
    1e0c:	39 1f       	adc	r19, r25
    1e0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e10:	88 2f       	mov	r24, r24
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	82 0f       	add	r24, r18
    1e16:	93 1f       	adc	r25, r19
    1e18:	98 8f       	std	Y+24, r25	; 0x18
    1e1a:	8f 8b       	std	Y+23, r24	; 0x17
    1e1c:	76 c0       	rjmp	.+236    	; 0x1f0a <main+0x2f0>
			case 4 : FirstNum = Num1[0] * 10 * 10 * 10 + Num1[1] * 10 * 10 + Num1[2] * 10 + Num1[3] ; break;
    1e1e:	89 8d       	ldd	r24, Y+25	; 0x19
    1e20:	28 2f       	mov	r18, r24
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	88 ee       	ldi	r24, 0xE8	; 232
    1e26:	93 e0       	ldi	r25, 0x03	; 3
    1e28:	28 9f       	mul	r18, r24
    1e2a:	a0 01       	movw	r20, r0
    1e2c:	29 9f       	mul	r18, r25
    1e2e:	50 0d       	add	r21, r0
    1e30:	38 9f       	mul	r19, r24
    1e32:	50 0d       	add	r21, r0
    1e34:	11 24       	eor	r1, r1
    1e36:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	84 e6       	ldi	r24, 0x64	; 100
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	dc 01       	movw	r26, r24
    1e42:	2a 9f       	mul	r18, r26
    1e44:	c0 01       	movw	r24, r0
    1e46:	2b 9f       	mul	r18, r27
    1e48:	90 0d       	add	r25, r0
    1e4a:	3a 9f       	mul	r19, r26
    1e4c:	90 0d       	add	r25, r0
    1e4e:	11 24       	eor	r1, r1
    1e50:	48 0f       	add	r20, r24
    1e52:	59 1f       	adc	r21, r25
    1e54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e56:	88 2f       	mov	r24, r24
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	9c 01       	movw	r18, r24
    1e5c:	22 0f       	add	r18, r18
    1e5e:	33 1f       	adc	r19, r19
    1e60:	c9 01       	movw	r24, r18
    1e62:	88 0f       	add	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	88 0f       	add	r24, r24
    1e68:	99 1f       	adc	r25, r25
    1e6a:	82 0f       	add	r24, r18
    1e6c:	93 1f       	adc	r25, r19
    1e6e:	9a 01       	movw	r18, r20
    1e70:	28 0f       	add	r18, r24
    1e72:	39 1f       	adc	r19, r25
    1e74:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e76:	88 2f       	mov	r24, r24
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	82 0f       	add	r24, r18
    1e7c:	93 1f       	adc	r25, r19
    1e7e:	98 8f       	std	Y+24, r25	; 0x18
    1e80:	8f 8b       	std	Y+23, r24	; 0x17
    1e82:	43 c0       	rjmp	.+134    	; 0x1f0a <main+0x2f0>
			case 5 : FirstNum = Num1[0] * 10 * 10 * 10 * 10 + Num1[1] * 10 * 10 * 10 + Num1[2] * 10 * 10 + Num1[3] * 10 + Num1[4] ; break;
    1e84:	89 8d       	ldd	r24, Y+25	; 0x19
    1e86:	28 2f       	mov	r18, r24
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	80 e1       	ldi	r24, 0x10	; 16
    1e8c:	97 e2       	ldi	r25, 0x27	; 39
    1e8e:	28 9f       	mul	r18, r24
    1e90:	a0 01       	movw	r20, r0
    1e92:	29 9f       	mul	r18, r25
    1e94:	50 0d       	add	r21, r0
    1e96:	38 9f       	mul	r19, r24
    1e98:	50 0d       	add	r21, r0
    1e9a:	11 24       	eor	r1, r1
    1e9c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	88 ee       	ldi	r24, 0xE8	; 232
    1ea4:	93 e0       	ldi	r25, 0x03	; 3
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	2e 9f       	mul	r18, r30
    1eaa:	c0 01       	movw	r24, r0
    1eac:	2f 9f       	mul	r18, r31
    1eae:	90 0d       	add	r25, r0
    1eb0:	3e 9f       	mul	r19, r30
    1eb2:	90 0d       	add	r25, r0
    1eb4:	11 24       	eor	r1, r1
    1eb6:	ba 01       	movw	r22, r20
    1eb8:	68 0f       	add	r22, r24
    1eba:	79 1f       	adc	r23, r25
    1ebc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ebe:	88 2f       	mov	r24, r24
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	9c 01       	movw	r18, r24
    1ec4:	22 0f       	add	r18, r18
    1ec6:	33 1f       	adc	r19, r19
    1ec8:	c9 01       	movw	r24, r18
    1eca:	88 0f       	add	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	88 0f       	add	r24, r24
    1ed0:	99 1f       	adc	r25, r25
    1ed2:	a9 01       	movw	r20, r18
    1ed4:	48 0f       	add	r20, r24
    1ed6:	59 1f       	adc	r21, r25
    1ed8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eda:	28 2f       	mov	r18, r24
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	84 e6       	ldi	r24, 0x64	; 100
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	2a 9f       	mul	r18, r26
    1ee6:	c0 01       	movw	r24, r0
    1ee8:	2b 9f       	mul	r18, r27
    1eea:	90 0d       	add	r25, r0
    1eec:	3a 9f       	mul	r19, r26
    1eee:	90 0d       	add	r25, r0
    1ef0:	11 24       	eor	r1, r1
    1ef2:	84 0f       	add	r24, r20
    1ef4:	95 1f       	adc	r25, r21
    1ef6:	9b 01       	movw	r18, r22
    1ef8:	28 0f       	add	r18, r24
    1efa:	39 1f       	adc	r19, r25
    1efc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1efe:	88 2f       	mov	r24, r24
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	82 0f       	add	r24, r18
    1f04:	93 1f       	adc	r25, r19
    1f06:	98 8f       	std	Y+24, r25	; 0x18
    1f08:	8f 8b       	std	Y+23, r24	; 0x17
			}
			switch(Local_u8Counter2)
    1f0a:	8a 89       	ldd	r24, Y+18	; 0x12
    1f0c:	e8 2f       	mov	r30, r24
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	fc a3       	std	Y+36, r31	; 0x24
    1f12:	eb a3       	std	Y+35, r30	; 0x23
    1f14:	2b a1       	ldd	r18, Y+35	; 0x23
    1f16:	3c a1       	ldd	r19, Y+36	; 0x24
    1f18:	22 30       	cpi	r18, 0x02	; 2
    1f1a:	31 05       	cpc	r19, r1
    1f1c:	59 f1       	breq	.+86     	; 0x1f74 <main+0x35a>
    1f1e:	4b a1       	ldd	r20, Y+35	; 0x23
    1f20:	5c a1       	ldd	r21, Y+36	; 0x24
    1f22:	43 30       	cpi	r20, 0x03	; 3
    1f24:	51 05       	cpc	r21, r1
    1f26:	5c f4       	brge	.+22     	; 0x1f3e <main+0x324>
    1f28:	6b a1       	ldd	r22, Y+35	; 0x23
    1f2a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f2c:	61 15       	cp	r22, r1
    1f2e:	71 05       	cpc	r23, r1
    1f30:	c1 f0       	breq	.+48     	; 0x1f62 <main+0x348>
    1f32:	8b a1       	ldd	r24, Y+35	; 0x23
    1f34:	9c a1       	ldd	r25, Y+36	; 0x24
    1f36:	81 30       	cpi	r24, 0x01	; 1
    1f38:	91 05       	cpc	r25, r1
    1f3a:	b1 f0       	breq	.+44     	; 0x1f68 <main+0x34e>
    1f3c:	ca c0       	rjmp	.+404    	; 0x20d2 <main+0x4b8>
    1f3e:	ab a1       	ldd	r26, Y+35	; 0x23
    1f40:	bc a1       	ldd	r27, Y+36	; 0x24
    1f42:	a4 30       	cpi	r26, 0x04	; 4
    1f44:	b1 05       	cpc	r27, r1
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <main+0x330>
    1f48:	4e c0       	rjmp	.+156    	; 0x1fe6 <main+0x3cc>
    1f4a:	eb a1       	ldd	r30, Y+35	; 0x23
    1f4c:	fc a1       	ldd	r31, Y+36	; 0x24
    1f4e:	e4 30       	cpi	r30, 0x04	; 4
    1f50:	f1 05       	cpc	r31, r1
    1f52:	2c f1       	brlt	.+74     	; 0x1f9e <main+0x384>
    1f54:	2b a1       	ldd	r18, Y+35	; 0x23
    1f56:	3c a1       	ldd	r19, Y+36	; 0x24
    1f58:	25 30       	cpi	r18, 0x05	; 5
    1f5a:	31 05       	cpc	r19, r1
    1f5c:	09 f4       	brne	.+2      	; 0x1f60 <main+0x346>
    1f5e:	76 c0       	rjmp	.+236    	; 0x204c <main+0x432>
    1f60:	b8 c0       	rjmp	.+368    	; 0x20d2 <main+0x4b8>
			{
			case 0 : SecondNum = 0; 			break;
    1f62:	1e 8a       	std	Y+22, r1	; 0x16
    1f64:	1d 8a       	std	Y+21, r1	; 0x15
    1f66:	b5 c0       	rjmp	.+362    	; 0x20d2 <main+0x4b8>
			case 1 : SecondNum = Num2[0]; 	break;
    1f68:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f6a:	88 2f       	mov	r24, r24
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	9e 8b       	std	Y+22, r25	; 0x16
    1f70:	8d 8b       	std	Y+21, r24	; 0x15
    1f72:	af c0       	rjmp	.+350    	; 0x20d2 <main+0x4b8>
			case 2 : SecondNum = Num2[0] * 10 + Num2[1] ; break;
    1f74:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f76:	88 2f       	mov	r24, r24
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	9c 01       	movw	r18, r24
    1f7c:	22 0f       	add	r18, r18
    1f7e:	33 1f       	adc	r19, r19
    1f80:	c9 01       	movw	r24, r18
    1f82:	88 0f       	add	r24, r24
    1f84:	99 1f       	adc	r25, r25
    1f86:	88 0f       	add	r24, r24
    1f88:	99 1f       	adc	r25, r25
    1f8a:	28 0f       	add	r18, r24
    1f8c:	39 1f       	adc	r19, r25
    1f8e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f90:	88 2f       	mov	r24, r24
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	82 0f       	add	r24, r18
    1f96:	93 1f       	adc	r25, r19
    1f98:	9e 8b       	std	Y+22, r25	; 0x16
    1f9a:	8d 8b       	std	Y+21, r24	; 0x15
    1f9c:	9a c0       	rjmp	.+308    	; 0x20d2 <main+0x4b8>
			case 3 : SecondNum = Num2[0] * 10 * 10 + Num2[1] * 10 + Num2[2] ; break;
    1f9e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	84 e6       	ldi	r24, 0x64	; 100
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	28 9f       	mul	r18, r24
    1faa:	a0 01       	movw	r20, r0
    1fac:	29 9f       	mul	r18, r25
    1fae:	50 0d       	add	r21, r0
    1fb0:	38 9f       	mul	r19, r24
    1fb2:	50 0d       	add	r21, r0
    1fb4:	11 24       	eor	r1, r1
    1fb6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fb8:	88 2f       	mov	r24, r24
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	9c 01       	movw	r18, r24
    1fbe:	22 0f       	add	r18, r18
    1fc0:	33 1f       	adc	r19, r19
    1fc2:	c9 01       	movw	r24, r18
    1fc4:	88 0f       	add	r24, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	88 0f       	add	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	82 0f       	add	r24, r18
    1fce:	93 1f       	adc	r25, r19
    1fd0:	9a 01       	movw	r18, r20
    1fd2:	28 0f       	add	r18, r24
    1fd4:	39 1f       	adc	r19, r25
    1fd6:	88 a1       	ldd	r24, Y+32	; 0x20
    1fd8:	88 2f       	mov	r24, r24
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	82 0f       	add	r24, r18
    1fde:	93 1f       	adc	r25, r19
    1fe0:	9e 8b       	std	Y+22, r25	; 0x16
    1fe2:	8d 8b       	std	Y+21, r24	; 0x15
    1fe4:	76 c0       	rjmp	.+236    	; 0x20d2 <main+0x4b8>
			case 4 : SecondNum = Num2[0] * 10 * 10 * 10 + Num2[1] * 10 * 10 + Num2[2] * 10 + Num2[3] ; break;
    1fe6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fe8:	28 2f       	mov	r18, r24
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	88 ee       	ldi	r24, 0xE8	; 232
    1fee:	93 e0       	ldi	r25, 0x03	; 3
    1ff0:	28 9f       	mul	r18, r24
    1ff2:	a0 01       	movw	r20, r0
    1ff4:	29 9f       	mul	r18, r25
    1ff6:	50 0d       	add	r21, r0
    1ff8:	38 9f       	mul	r19, r24
    1ffa:	50 0d       	add	r21, r0
    1ffc:	11 24       	eor	r1, r1
    1ffe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2000:	28 2f       	mov	r18, r24
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	84 e6       	ldi	r24, 0x64	; 100
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	bc 01       	movw	r22, r24
    200a:	26 9f       	mul	r18, r22
    200c:	c0 01       	movw	r24, r0
    200e:	27 9f       	mul	r18, r23
    2010:	90 0d       	add	r25, r0
    2012:	36 9f       	mul	r19, r22
    2014:	90 0d       	add	r25, r0
    2016:	11 24       	eor	r1, r1
    2018:	48 0f       	add	r20, r24
    201a:	59 1f       	adc	r21, r25
    201c:	88 a1       	ldd	r24, Y+32	; 0x20
    201e:	88 2f       	mov	r24, r24
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	9c 01       	movw	r18, r24
    2024:	22 0f       	add	r18, r18
    2026:	33 1f       	adc	r19, r19
    2028:	c9 01       	movw	r24, r18
    202a:	88 0f       	add	r24, r24
    202c:	99 1f       	adc	r25, r25
    202e:	88 0f       	add	r24, r24
    2030:	99 1f       	adc	r25, r25
    2032:	82 0f       	add	r24, r18
    2034:	93 1f       	adc	r25, r19
    2036:	9a 01       	movw	r18, r20
    2038:	28 0f       	add	r18, r24
    203a:	39 1f       	adc	r19, r25
    203c:	89 a1       	ldd	r24, Y+33	; 0x21
    203e:	88 2f       	mov	r24, r24
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	82 0f       	add	r24, r18
    2044:	93 1f       	adc	r25, r19
    2046:	9e 8b       	std	Y+22, r25	; 0x16
    2048:	8d 8b       	std	Y+21, r24	; 0x15
    204a:	43 c0       	rjmp	.+134    	; 0x20d2 <main+0x4b8>
			case 5 : SecondNum = Num2[0] * 10 * 10 * 10 * 10 + Num2[1] * 10 * 10 * 10 + Num2[2] * 10 * 10 + Num2[3] * 10 + Num2[4] ; break;
    204c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    204e:	28 2f       	mov	r18, r24
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	80 e1       	ldi	r24, 0x10	; 16
    2054:	97 e2       	ldi	r25, 0x27	; 39
    2056:	28 9f       	mul	r18, r24
    2058:	a0 01       	movw	r20, r0
    205a:	29 9f       	mul	r18, r25
    205c:	50 0d       	add	r21, r0
    205e:	38 9f       	mul	r19, r24
    2060:	50 0d       	add	r21, r0
    2062:	11 24       	eor	r1, r1
    2064:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2066:	28 2f       	mov	r18, r24
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	88 ee       	ldi	r24, 0xE8	; 232
    206c:	93 e0       	ldi	r25, 0x03	; 3
    206e:	dc 01       	movw	r26, r24
    2070:	2a 9f       	mul	r18, r26
    2072:	c0 01       	movw	r24, r0
    2074:	2b 9f       	mul	r18, r27
    2076:	90 0d       	add	r25, r0
    2078:	3a 9f       	mul	r19, r26
    207a:	90 0d       	add	r25, r0
    207c:	11 24       	eor	r1, r1
    207e:	ba 01       	movw	r22, r20
    2080:	68 0f       	add	r22, r24
    2082:	79 1f       	adc	r23, r25
    2084:	89 a1       	ldd	r24, Y+33	; 0x21
    2086:	88 2f       	mov	r24, r24
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	9c 01       	movw	r18, r24
    208c:	22 0f       	add	r18, r18
    208e:	33 1f       	adc	r19, r19
    2090:	c9 01       	movw	r24, r18
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	88 0f       	add	r24, r24
    2098:	99 1f       	adc	r25, r25
    209a:	a9 01       	movw	r20, r18
    209c:	48 0f       	add	r20, r24
    209e:	59 1f       	adc	r21, r25
    20a0:	88 a1       	ldd	r24, Y+32	; 0x20
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	84 e6       	ldi	r24, 0x64	; 100
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	fc 01       	movw	r30, r24
    20ac:	2e 9f       	mul	r18, r30
    20ae:	c0 01       	movw	r24, r0
    20b0:	2f 9f       	mul	r18, r31
    20b2:	90 0d       	add	r25, r0
    20b4:	3e 9f       	mul	r19, r30
    20b6:	90 0d       	add	r25, r0
    20b8:	11 24       	eor	r1, r1
    20ba:	84 0f       	add	r24, r20
    20bc:	95 1f       	adc	r25, r21
    20be:	9b 01       	movw	r18, r22
    20c0:	28 0f       	add	r18, r24
    20c2:	39 1f       	adc	r19, r25
    20c4:	8a a1       	ldd	r24, Y+34	; 0x22
    20c6:	88 2f       	mov	r24, r24
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	82 0f       	add	r24, r18
    20cc:	93 1f       	adc	r25, r19
    20ce:	9e 8b       	std	Y+22, r25	; 0x16
    20d0:	8d 8b       	std	Y+21, r24	; 0x15
			}

			/*Calculating Results*/
			/*Addition*/
			if(Operation =='+')
    20d2:	89 89       	ldd	r24, Y+17	; 0x11
    20d4:	8b 32       	cpi	r24, 0x2B	; 43
    20d6:	71 f4       	brne	.+28     	; 0x20f4 <main+0x4da>
			{
				CLCD_voidSendNumber(FirstNum + SecondNum);
    20d8:	2f 89       	ldd	r18, Y+23	; 0x17
    20da:	38 8d       	ldd	r19, Y+24	; 0x18
    20dc:	8d 89       	ldd	r24, Y+21	; 0x15
    20de:	9e 89       	ldd	r25, Y+22	; 0x16
    20e0:	82 0f       	add	r24, r18
    20e2:	93 1f       	adc	r25, r19
    20e4:	cc 01       	movw	r24, r24
    20e6:	a0 e0       	ldi	r26, 0x00	; 0
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	bc 01       	movw	r22, r24
    20ec:	cd 01       	movw	r24, r26
    20ee:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendNumber>
    20f2:	e9 c0       	rjmp	.+466    	; 0x22c6 <main+0x6ac>
			}
			/*Subtraction*/
			else if( Operation ==  '-' )
    20f4:	89 89       	ldd	r24, Y+17	; 0x11
    20f6:	8d 32       	cpi	r24, 0x2D	; 45
    20f8:	81 f4       	brne	.+32     	; 0x211a <main+0x500>
			{
				CLCD_voidSendNumber(FirstNum - SecondNum);
    20fa:	2f 89       	ldd	r18, Y+23	; 0x17
    20fc:	38 8d       	ldd	r19, Y+24	; 0x18
    20fe:	8d 89       	ldd	r24, Y+21	; 0x15
    2100:	9e 89       	ldd	r25, Y+22	; 0x16
    2102:	a9 01       	movw	r20, r18
    2104:	48 1b       	sub	r20, r24
    2106:	59 0b       	sbc	r21, r25
    2108:	ca 01       	movw	r24, r20
    210a:	cc 01       	movw	r24, r24
    210c:	a0 e0       	ldi	r26, 0x00	; 0
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	bc 01       	movw	r22, r24
    2112:	cd 01       	movw	r24, r26
    2114:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendNumber>
    2118:	d6 c0       	rjmp	.+428    	; 0x22c6 <main+0x6ac>
			}
			/*Multiplication*/
			else if( Operation == '*' )
    211a:	89 89       	ldd	r24, Y+17	; 0x11
    211c:	8a 32       	cpi	r24, 0x2A	; 42
    211e:	a1 f4       	brne	.+40     	; 0x2148 <main+0x52e>
			{
				CLCD_voidSendNumber(FirstNum * SecondNum);
    2120:	2f 89       	ldd	r18, Y+23	; 0x17
    2122:	38 8d       	ldd	r19, Y+24	; 0x18
    2124:	8d 89       	ldd	r24, Y+21	; 0x15
    2126:	9e 89       	ldd	r25, Y+22	; 0x16
    2128:	bc 01       	movw	r22, r24
    212a:	26 9f       	mul	r18, r22
    212c:	c0 01       	movw	r24, r0
    212e:	27 9f       	mul	r18, r23
    2130:	90 0d       	add	r25, r0
    2132:	36 9f       	mul	r19, r22
    2134:	90 0d       	add	r25, r0
    2136:	11 24       	eor	r1, r1
    2138:	cc 01       	movw	r24, r24
    213a:	a0 e0       	ldi	r26, 0x00	; 0
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	bc 01       	movw	r22, r24
    2140:	cd 01       	movw	r24, r26
    2142:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendNumber>
    2146:	bf c0       	rjmp	.+382    	; 0x22c6 <main+0x6ac>
			}
			/*Division*/
			else if( Operation =='/' )
    2148:	89 89       	ldd	r24, Y+17	; 0x11
    214a:	8f 32       	cpi	r24, 0x2F	; 47
    214c:	09 f0       	breq	.+2      	; 0x2150 <main+0x536>
    214e:	bb c0       	rjmp	.+374    	; 0x22c6 <main+0x6ac>
			{
				if(SecondNum != 0)
    2150:	8d 89       	ldd	r24, Y+21	; 0x15
    2152:	9e 89       	ldd	r25, Y+22	; 0x16
    2154:	00 97       	sbiw	r24, 0x00	; 0
    2156:	d1 f1       	breq	.+116    	; 0x21cc <main+0x5b2>
				{
					if(FirstNum % SecondNum == 0)
    2158:	8f 89       	ldd	r24, Y+23	; 0x17
    215a:	98 8d       	ldd	r25, Y+24	; 0x18
    215c:	2d 89       	ldd	r18, Y+21	; 0x15
    215e:	3e 89       	ldd	r19, Y+22	; 0x16
    2160:	b9 01       	movw	r22, r18
    2162:	0e 94 85 11 	call	0x230a	; 0x230a <__udivmodhi4>
    2166:	00 97       	sbiw	r24, 0x00	; 0
    2168:	81 f4       	brne	.+32     	; 0x218a <main+0x570>
					{
						CLCD_voidSendNumber(FirstNum /SecondNum);
    216a:	8f 89       	ldd	r24, Y+23	; 0x17
    216c:	98 8d       	ldd	r25, Y+24	; 0x18
    216e:	2d 89       	ldd	r18, Y+21	; 0x15
    2170:	3e 89       	ldd	r19, Y+22	; 0x16
    2172:	b9 01       	movw	r22, r18
    2174:	0e 94 85 11 	call	0x230a	; 0x230a <__udivmodhi4>
    2178:	cb 01       	movw	r24, r22
    217a:	cc 01       	movw	r24, r24
    217c:	a0 e0       	ldi	r26, 0x00	; 0
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	bc 01       	movw	r22, r24
    2182:	cd 01       	movw	r24, r26
    2184:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CLCD_voidSendNumber>
    2188:	9e c0       	rjmp	.+316    	; 0x22c6 <main+0x6ac>
					}
					else
					{
						/*Supporting Float Values*/
						CLCD_voidSendFloatNumber((float)FirstNum / SecondNum);
    218a:	8f 89       	ldd	r24, Y+23	; 0x17
    218c:	98 8d       	ldd	r25, Y+24	; 0x18
    218e:	cc 01       	movw	r24, r24
    2190:	a0 e0       	ldi	r26, 0x00	; 0
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	bc 01       	movw	r22, r24
    2196:	cd 01       	movw	r24, r26
    2198:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    219c:	7b 01       	movw	r14, r22
    219e:	8c 01       	movw	r16, r24
    21a0:	8d 89       	ldd	r24, Y+21	; 0x15
    21a2:	9e 89       	ldd	r25, Y+22	; 0x16
    21a4:	cc 01       	movw	r24, r24
    21a6:	a0 e0       	ldi	r26, 0x00	; 0
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	bc 01       	movw	r22, r24
    21ac:	cd 01       	movw	r24, r26
    21ae:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    21b2:	9b 01       	movw	r18, r22
    21b4:	ac 01       	movw	r20, r24
    21b6:	c8 01       	movw	r24, r16
    21b8:	b7 01       	movw	r22, r14
    21ba:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	bc 01       	movw	r22, r24
    21c4:	cd 01       	movw	r24, r26
    21c6:	0e 94 06 0a 	call	0x140c	; 0x140c <CLCD_voidSendFloatNumber>
    21ca:	7d c0       	rjmp	.+250    	; 0x22c6 <main+0x6ac>
					}
				}
				else
				{
					/*Handling Division by Zero*/
					CLCD_VoidGoToXY(1,0);
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	0e 94 09 09 	call	0x1212	; 0x1212 <CLCD_VoidGoToXY>
					CLCD_VoidSendString("NO DIV by Zero");
    21d4:	80 e6       	ldi	r24, 0x60	; 96
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <CLCD_VoidSendString>
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	aa ef       	ldi	r26, 0xFA	; 250
    21e2:	b4 e4       	ldi	r27, 0x44	; 68
    21e4:	8b 87       	std	Y+11, r24	; 0x0b
    21e6:	9c 87       	std	Y+12, r25	; 0x0c
    21e8:	ad 87       	std	Y+13, r26	; 0x0d
    21ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	4a ef       	ldi	r20, 0xFA	; 250
    21fa:	54 e4       	ldi	r21, 0x44	; 68
    21fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	8f 83       	std	Y+7, r24	; 0x07
    2206:	98 87       	std	Y+8, r25	; 0x08
    2208:	a9 87       	std	Y+9, r26	; 0x09
    220a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    220c:	6f 81       	ldd	r22, Y+7	; 0x07
    220e:	78 85       	ldd	r23, Y+8	; 0x08
    2210:	89 85       	ldd	r24, Y+9	; 0x09
    2212:	9a 85       	ldd	r25, Y+10	; 0x0a
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e8       	ldi	r20, 0x80	; 128
    221a:	5f e3       	ldi	r21, 0x3F	; 63
    221c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2220:	88 23       	and	r24, r24
    2222:	2c f4       	brge	.+10     	; 0x222e <main+0x614>
		__ticks = 1;
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	9e 83       	std	Y+6, r25	; 0x06
    222a:	8d 83       	std	Y+5, r24	; 0x05
    222c:	3f c0       	rjmp	.+126    	; 0x22ac <main+0x692>
	else if (__tmp > 65535)
    222e:	6f 81       	ldd	r22, Y+7	; 0x07
    2230:	78 85       	ldd	r23, Y+8	; 0x08
    2232:	89 85       	ldd	r24, Y+9	; 0x09
    2234:	9a 85       	ldd	r25, Y+10	; 0x0a
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	3f ef       	ldi	r19, 0xFF	; 255
    223a:	4f e7       	ldi	r20, 0x7F	; 127
    223c:	57 e4       	ldi	r21, 0x47	; 71
    223e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2242:	18 16       	cp	r1, r24
    2244:	4c f5       	brge	.+82     	; 0x2298 <main+0x67e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2246:	6b 85       	ldd	r22, Y+11	; 0x0b
    2248:	7c 85       	ldd	r23, Y+12	; 0x0c
    224a:	8d 85       	ldd	r24, Y+13	; 0x0d
    224c:	9e 85       	ldd	r25, Y+14	; 0x0e
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e2       	ldi	r20, 0x20	; 32
    2254:	51 e4       	ldi	r21, 0x41	; 65
    2256:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	bc 01       	movw	r22, r24
    2260:	cd 01       	movw	r24, r26
    2262:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	9e 83       	std	Y+6, r25	; 0x06
    226c:	8d 83       	std	Y+5, r24	; 0x05
    226e:	0f c0       	rjmp	.+30     	; 0x228e <main+0x674>
    2270:	88 ec       	ldi	r24, 0xC8	; 200
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	9c 83       	std	Y+4, r25	; 0x04
    2276:	8b 83       	std	Y+3, r24	; 0x03
    2278:	8b 81       	ldd	r24, Y+3	; 0x03
    227a:	9c 81       	ldd	r25, Y+4	; 0x04
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	f1 f7       	brne	.-4      	; 0x227c <main+0x662>
    2280:	9c 83       	std	Y+4, r25	; 0x04
    2282:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2284:	8d 81       	ldd	r24, Y+5	; 0x05
    2286:	9e 81       	ldd	r25, Y+6	; 0x06
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	9e 83       	std	Y+6, r25	; 0x06
    228c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228e:	8d 81       	ldd	r24, Y+5	; 0x05
    2290:	9e 81       	ldd	r25, Y+6	; 0x06
    2292:	00 97       	sbiw	r24, 0x00	; 0
    2294:	69 f7       	brne	.-38     	; 0x2270 <main+0x656>
    2296:	14 c0       	rjmp	.+40     	; 0x22c0 <main+0x6a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2298:	6f 81       	ldd	r22, Y+7	; 0x07
    229a:	78 85       	ldd	r23, Y+8	; 0x08
    229c:	89 85       	ldd	r24, Y+9	; 0x09
    229e:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	9e 83       	std	Y+6, r25	; 0x06
    22aa:	8d 83       	std	Y+5, r24	; 0x05
    22ac:	8d 81       	ldd	r24, Y+5	; 0x05
    22ae:	9e 81       	ldd	r25, Y+6	; 0x06
    22b0:	9a 83       	std	Y+2, r25	; 0x02
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	9a 81       	ldd	r25, Y+2	; 0x02
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	f1 f7       	brne	.-4      	; 0x22b8 <main+0x69e>
    22bc:	9a 83       	std	Y+2, r25	; 0x02
    22be:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(2000);
					CLCD_VoidSendCommand(CLCD_CLEAR);
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	0e 94 0f 07 	call	0xe1e	; 0xe1e <CLCD_VoidSendCommand>
				}
			}
			/*Reset Key value*/
			Local_u8Key = KEYPAD_NO_PRESSED_KEY;
    22c6:	8f ef       	ldi	r24, 0xFF	; 255
    22c8:	8c 8b       	std	Y+20, r24	; 0x14
    22ca:	04 cd       	rjmp	.-1528   	; 0x1cd4 <main+0xba>

000022cc <__mulsi3>:
    22cc:	62 9f       	mul	r22, r18
    22ce:	d0 01       	movw	r26, r0
    22d0:	73 9f       	mul	r23, r19
    22d2:	f0 01       	movw	r30, r0
    22d4:	82 9f       	mul	r24, r18
    22d6:	e0 0d       	add	r30, r0
    22d8:	f1 1d       	adc	r31, r1
    22da:	64 9f       	mul	r22, r20
    22dc:	e0 0d       	add	r30, r0
    22de:	f1 1d       	adc	r31, r1
    22e0:	92 9f       	mul	r25, r18
    22e2:	f0 0d       	add	r31, r0
    22e4:	83 9f       	mul	r24, r19
    22e6:	f0 0d       	add	r31, r0
    22e8:	74 9f       	mul	r23, r20
    22ea:	f0 0d       	add	r31, r0
    22ec:	65 9f       	mul	r22, r21
    22ee:	f0 0d       	add	r31, r0
    22f0:	99 27       	eor	r25, r25
    22f2:	72 9f       	mul	r23, r18
    22f4:	b0 0d       	add	r27, r0
    22f6:	e1 1d       	adc	r30, r1
    22f8:	f9 1f       	adc	r31, r25
    22fa:	63 9f       	mul	r22, r19
    22fc:	b0 0d       	add	r27, r0
    22fe:	e1 1d       	adc	r30, r1
    2300:	f9 1f       	adc	r31, r25
    2302:	bd 01       	movw	r22, r26
    2304:	cf 01       	movw	r24, r30
    2306:	11 24       	eor	r1, r1
    2308:	08 95       	ret

0000230a <__udivmodhi4>:
    230a:	aa 1b       	sub	r26, r26
    230c:	bb 1b       	sub	r27, r27
    230e:	51 e1       	ldi	r21, 0x11	; 17
    2310:	07 c0       	rjmp	.+14     	; 0x2320 <__udivmodhi4_ep>

00002312 <__udivmodhi4_loop>:
    2312:	aa 1f       	adc	r26, r26
    2314:	bb 1f       	adc	r27, r27
    2316:	a6 17       	cp	r26, r22
    2318:	b7 07       	cpc	r27, r23
    231a:	10 f0       	brcs	.+4      	; 0x2320 <__udivmodhi4_ep>
    231c:	a6 1b       	sub	r26, r22
    231e:	b7 0b       	sbc	r27, r23

00002320 <__udivmodhi4_ep>:
    2320:	88 1f       	adc	r24, r24
    2322:	99 1f       	adc	r25, r25
    2324:	5a 95       	dec	r21
    2326:	a9 f7       	brne	.-22     	; 0x2312 <__udivmodhi4_loop>
    2328:	80 95       	com	r24
    232a:	90 95       	com	r25
    232c:	bc 01       	movw	r22, r24
    232e:	cd 01       	movw	r24, r26
    2330:	08 95       	ret

00002332 <__udivmodsi4>:
    2332:	a1 e2       	ldi	r26, 0x21	; 33
    2334:	1a 2e       	mov	r1, r26
    2336:	aa 1b       	sub	r26, r26
    2338:	bb 1b       	sub	r27, r27
    233a:	fd 01       	movw	r30, r26
    233c:	0d c0       	rjmp	.+26     	; 0x2358 <__udivmodsi4_ep>

0000233e <__udivmodsi4_loop>:
    233e:	aa 1f       	adc	r26, r26
    2340:	bb 1f       	adc	r27, r27
    2342:	ee 1f       	adc	r30, r30
    2344:	ff 1f       	adc	r31, r31
    2346:	a2 17       	cp	r26, r18
    2348:	b3 07       	cpc	r27, r19
    234a:	e4 07       	cpc	r30, r20
    234c:	f5 07       	cpc	r31, r21
    234e:	20 f0       	brcs	.+8      	; 0x2358 <__udivmodsi4_ep>
    2350:	a2 1b       	sub	r26, r18
    2352:	b3 0b       	sbc	r27, r19
    2354:	e4 0b       	sbc	r30, r20
    2356:	f5 0b       	sbc	r31, r21

00002358 <__udivmodsi4_ep>:
    2358:	66 1f       	adc	r22, r22
    235a:	77 1f       	adc	r23, r23
    235c:	88 1f       	adc	r24, r24
    235e:	99 1f       	adc	r25, r25
    2360:	1a 94       	dec	r1
    2362:	69 f7       	brne	.-38     	; 0x233e <__udivmodsi4_loop>
    2364:	60 95       	com	r22
    2366:	70 95       	com	r23
    2368:	80 95       	com	r24
    236a:	90 95       	com	r25
    236c:	9b 01       	movw	r18, r22
    236e:	ac 01       	movw	r20, r24
    2370:	bd 01       	movw	r22, r26
    2372:	cf 01       	movw	r24, r30
    2374:	08 95       	ret

00002376 <__prologue_saves__>:
    2376:	2f 92       	push	r2
    2378:	3f 92       	push	r3
    237a:	4f 92       	push	r4
    237c:	5f 92       	push	r5
    237e:	6f 92       	push	r6
    2380:	7f 92       	push	r7
    2382:	8f 92       	push	r8
    2384:	9f 92       	push	r9
    2386:	af 92       	push	r10
    2388:	bf 92       	push	r11
    238a:	cf 92       	push	r12
    238c:	df 92       	push	r13
    238e:	ef 92       	push	r14
    2390:	ff 92       	push	r15
    2392:	0f 93       	push	r16
    2394:	1f 93       	push	r17
    2396:	cf 93       	push	r28
    2398:	df 93       	push	r29
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
    239e:	ca 1b       	sub	r28, r26
    23a0:	db 0b       	sbc	r29, r27
    23a2:	0f b6       	in	r0, 0x3f	; 63
    23a4:	f8 94       	cli
    23a6:	de bf       	out	0x3e, r29	; 62
    23a8:	0f be       	out	0x3f, r0	; 63
    23aa:	cd bf       	out	0x3d, r28	; 61
    23ac:	09 94       	ijmp

000023ae <__epilogue_restores__>:
    23ae:	2a 88       	ldd	r2, Y+18	; 0x12
    23b0:	39 88       	ldd	r3, Y+17	; 0x11
    23b2:	48 88       	ldd	r4, Y+16	; 0x10
    23b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    23b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    23b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    23ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    23bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    23be:	aa 84       	ldd	r10, Y+10	; 0x0a
    23c0:	b9 84       	ldd	r11, Y+9	; 0x09
    23c2:	c8 84       	ldd	r12, Y+8	; 0x08
    23c4:	df 80       	ldd	r13, Y+7	; 0x07
    23c6:	ee 80       	ldd	r14, Y+6	; 0x06
    23c8:	fd 80       	ldd	r15, Y+5	; 0x05
    23ca:	0c 81       	ldd	r16, Y+4	; 0x04
    23cc:	1b 81       	ldd	r17, Y+3	; 0x03
    23ce:	aa 81       	ldd	r26, Y+2	; 0x02
    23d0:	b9 81       	ldd	r27, Y+1	; 0x01
    23d2:	ce 0f       	add	r28, r30
    23d4:	d1 1d       	adc	r29, r1
    23d6:	0f b6       	in	r0, 0x3f	; 63
    23d8:	f8 94       	cli
    23da:	de bf       	out	0x3e, r29	; 62
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	cd bf       	out	0x3d, r28	; 61
    23e0:	ed 01       	movw	r28, r26
    23e2:	08 95       	ret

000023e4 <_exit>:
    23e4:	f8 94       	cli

000023e6 <__stop_program>:
    23e6:	ff cf       	rjmp	.-2      	; 0x23e6 <__stop_program>
