
Interrupt_Assigment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00001e22  00001eb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800092  00800092  00001ee8  2**0
                  ALLOC
  3 .stab         00001c44  00000000  00000000  00001ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000deb  00000000  00000000  00003b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004917  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006810  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000076fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000084a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008608  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008895  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009063  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <__vector_1>
       8:	0c 94 46 0c 	jmp	0x188c	; 0x188c <__vector_2>
       c:	0c 94 79 0c 	jmp	0x18f2	; 0x18f2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e2       	ldi	r30, 0x22	; 34
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 39       	cpi	r26, 0x9A	; 154
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <main>
      8a:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d8 0e 	jmp	0x1db0	; 0x1db0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e7       	ldi	r26, 0x7A	; 122
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f4 0e 	jmp	0x1de8	; 0x1de8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 00 0f 	jmp	0x1e00	; 0x1e00 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 00 0f 	jmp	0x1e00	; 0x1e00 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d8 0e 	jmp	0x1db0	; 0x1db0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e7       	ldi	r24, 0x7A	; 122
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f4 0e 	jmp	0x1de8	; 0x1de8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 00 0f 	jmp	0x1e00	; 0x1e00 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 00 0f 	jmp	0x1e00	; 0x1e00 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 00 0f 	jmp	0x1e00	; 0x1e00 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 04 0f 	jmp	0x1e08	; 0x1e08 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_VoidSendCommand>:
#include "CLCD_Interface.h"
#include "CLCD_Config.h"


void CLCD_VoidSendCommand (u8 Copy_u8Command)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8f 87       	std	Y+15, r24	; 0x0f
	/* Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN ,DIO_u8PIN_LOW );
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>

	/*Set RW to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN  ,DIO_u8PIN_LOW);
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>

	/*Set Command to data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT , Copy_u8Command);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	6f 85       	ldd	r22, Y+15	; 0x0f
     b74:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_u8SetPortValue>

	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH);
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	62 e0       	ldi	r22, 0x02	; 2
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e0       	ldi	r26, 0x00	; 0
     b88:	b0 e4       	ldi	r27, 0x40	; 64
     b8a:	8b 87       	std	Y+11, r24	; 0x0b
     b8c:	9c 87       	std	Y+12, r25	; 0x0c
     b8e:	ad 87       	std	Y+13, r26	; 0x0d
     b90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b92:	6b 85       	ldd	r22, Y+11	; 0x0b
     b94:	7c 85       	ldd	r23, Y+12	; 0x0c
     b96:	8d 85       	ldd	r24, Y+13	; 0x0d
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a ef       	ldi	r20, 0xFA	; 250
     ba0:	54 e4       	ldi	r21, 0x44	; 68
     ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	8f 83       	std	Y+7, r24	; 0x07
     bac:	98 87       	std	Y+8, r25	; 0x08
     bae:	a9 87       	std	Y+9, r26	; 0x09
     bb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb2:	6f 81       	ldd	r22, Y+7	; 0x07
     bb4:	78 85       	ldd	r23, Y+8	; 0x08
     bb6:	89 85       	ldd	r24, Y+9	; 0x09
     bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <CLCD_VoidSendCommand+0x8e>
		__ticks = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9e 83       	std	Y+6, r25	; 0x06
     bd0:	8d 83       	std	Y+5, r24	; 0x05
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <CLCD_VoidSendCommand+0x10c>
	else if (__tmp > 65535)
     bd4:	6f 81       	ldd	r22, Y+7	; 0x07
     bd6:	78 85       	ldd	r23, Y+8	; 0x08
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be8:	18 16       	cp	r1, r24
     bea:	4c f5       	brge	.+82     	; 0xc3e <CLCD_VoidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	6b 85       	ldd	r22, Y+11	; 0x0b
     bee:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <CLCD_VoidSendCommand+0xee>
     c16:	88 ec       	ldi	r24, 0xC8	; 200
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <CLCD_VoidSendCommand+0xdc>
     c26:	9c 83       	std	Y+4, r25	; 0x04
     c28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <CLCD_VoidSendCommand+0xd0>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <CLCD_VoidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	6f 81       	ldd	r22, Y+7	; 0x07
     c40:	78 85       	ldd	r23, Y+8	; 0x08
     c42:	89 85       	ldd	r24, Y+9	; 0x09
     c44:	9a 85       	ldd	r25, Y+10	; 0x0a
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9e 83       	std	Y+6, r25	; 0x06
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	8d 81       	ldd	r24, Y+5	; 0x05
     c54:	9e 81       	ldd	r25, Y+6	; 0x06
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <CLCD_VoidSendCommand+0x118>
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW);
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	62 e0       	ldi	r22, 0x02	; 2
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>
}
     c70:	2f 96       	adiw	r28, 0x0f	; 15
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <CLCD_VoidSendData>:

void CLCD_VoidSendData (u8 Copy_u8Data)
{
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	2f 97       	sbiw	r28, 0x0f	; 15
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	8f 87       	std	Y+15, r24	; 0x0f
	/* Set RS pin to high for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN ,DIO_u8PIN_HIGH );
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>

	/*Set RW to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN  ,DIO_u8PIN_LOW);
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>

	/*Set DATA to data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT , Copy_u8Data);
     cac:	82 e0       	ldi	r24, 0x02	; 2
     cae:	6f 85       	ldd	r22, Y+15	; 0x0f
     cb0:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_u8SetPortValue>

	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH);
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	62 e0       	ldi	r22, 0x02	; 2
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e4       	ldi	r27, 0x40	; 64
     cc6:	8b 87       	std	Y+11, r24	; 0x0b
     cc8:	9c 87       	std	Y+12, r25	; 0x0c
     cca:	ad 87       	std	Y+13, r26	; 0x0d
     ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cce:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	4a ef       	ldi	r20, 0xFA	; 250
     cdc:	54 e4       	ldi	r21, 0x44	; 68
     cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	8f 83       	std	Y+7, r24	; 0x07
     ce8:	98 87       	std	Y+8, r25	; 0x08
     cea:	a9 87       	std	Y+9, r26	; 0x09
     cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d02:	88 23       	and	r24, r24
     d04:	2c f4       	brge	.+10     	; 0xd10 <CLCD_VoidSendData+0x8e>
		__ticks = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	3f c0       	rjmp	.+126    	; 0xd8e <CLCD_VoidSendData+0x10c>
	else if (__tmp > 65535)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	3f ef       	ldi	r19, 0xFF	; 255
     d1c:	4f e7       	ldi	r20, 0x7F	; 127
     d1e:	57 e4       	ldi	r21, 0x47	; 71
     d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d24:	18 16       	cp	r1, r24
     d26:	4c f5       	brge	.+82     	; 0xd7a <CLCD_VoidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d28:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e2       	ldi	r20, 0x20	; 32
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	bc 01       	movw	r22, r24
     d42:	cd 01       	movw	r24, r26
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <CLCD_VoidSendData+0xee>
     d52:	88 ec       	ldi	r24, 0xC8	; 200
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <CLCD_VoidSendData+0xdc>
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	69 f7       	brne	.-38     	; 0xd52 <CLCD_VoidSendData+0xd0>
     d78:	14 c0       	rjmp	.+40     	; 0xda2 <CLCD_VoidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <CLCD_VoidSendData+0x118>
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW);
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	62 e0       	ldi	r22, 0x02	; 2
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_u8SetPinValue>
}
     dac:	2f 96       	adiw	r28, 0x0f	; 15
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <CLCD_VoidInit>:

void CLCD_VoidInit(void)
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	2e 97       	sbiw	r28, 0x0e	; 14
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	a0 e2       	ldi	r26, 0x20	; 32
     dd8:	b2 e4       	ldi	r27, 0x42	; 66
     dda:	8b 87       	std	Y+11, r24	; 0x0b
     ddc:	9c 87       	std	Y+12, r25	; 0x0c
     dde:	ad 87       	std	Y+13, r26	; 0x0d
     de0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de2:	6b 85       	ldd	r22, Y+11	; 0x0b
     de4:	7c 85       	ldd	r23, Y+12	; 0x0c
     de6:	8d 85       	ldd	r24, Y+13	; 0x0d
     de8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	4a ef       	ldi	r20, 0xFA	; 250
     df0:	54 e4       	ldi	r21, 0x44	; 68
     df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	8f 83       	std	Y+7, r24	; 0x07
     dfc:	98 87       	std	Y+8, r25	; 0x08
     dfe:	a9 87       	std	Y+9, r26	; 0x09
     e00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e02:	6f 81       	ldd	r22, Y+7	; 0x07
     e04:	78 85       	ldd	r23, Y+8	; 0x08
     e06:	89 85       	ldd	r24, Y+9	; 0x09
     e08:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e8       	ldi	r20, 0x80	; 128
     e10:	5f e3       	ldi	r21, 0x3F	; 63
     e12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e16:	88 23       	and	r24, r24
     e18:	2c f4       	brge	.+10     	; 0xe24 <CLCD_VoidInit+0x66>
		__ticks = 1;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	9e 83       	std	Y+6, r25	; 0x06
     e20:	8d 83       	std	Y+5, r24	; 0x05
     e22:	3f c0       	rjmp	.+126    	; 0xea2 <CLCD_VoidInit+0xe4>
	else if (__tmp > 65535)
     e24:	6f 81       	ldd	r22, Y+7	; 0x07
     e26:	78 85       	ldd	r23, Y+8	; 0x08
     e28:	89 85       	ldd	r24, Y+9	; 0x09
     e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	3f ef       	ldi	r19, 0xFF	; 255
     e30:	4f e7       	ldi	r20, 0x7F	; 127
     e32:	57 e4       	ldi	r21, 0x47	; 71
     e34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e38:	18 16       	cp	r1, r24
     e3a:	4c f5       	brge	.+82     	; 0xe8e <CLCD_VoidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e40:	8d 85       	ldd	r24, Y+13	; 0x0d
     e42:	9e 85       	ldd	r25, Y+14	; 0x0e
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e2       	ldi	r20, 0x20	; 32
     e4a:	51 e4       	ldi	r21, 0x41	; 65
     e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	bc 01       	movw	r22, r24
     e56:	cd 01       	movw	r24, r26
     e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	9e 83       	std	Y+6, r25	; 0x06
     e62:	8d 83       	std	Y+5, r24	; 0x05
     e64:	0f c0       	rjmp	.+30     	; 0xe84 <CLCD_VoidInit+0xc6>
     e66:	88 ec       	ldi	r24, 0xC8	; 200
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	9c 83       	std	Y+4, r25	; 0x04
     e6c:	8b 83       	std	Y+3, r24	; 0x03
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	9c 81       	ldd	r25, Y+4	; 0x04
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <CLCD_VoidInit+0xb4>
     e76:	9c 83       	std	Y+4, r25	; 0x04
     e78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7a:	8d 81       	ldd	r24, Y+5	; 0x05
     e7c:	9e 81       	ldd	r25, Y+6	; 0x06
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	9e 83       	std	Y+6, r25	; 0x06
     e82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	9e 81       	ldd	r25, Y+6	; 0x06
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	69 f7       	brne	.-38     	; 0xe66 <CLCD_VoidInit+0xa8>
     e8c:	14 c0       	rjmp	.+40     	; 0xeb6 <CLCD_VoidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e8e:	6f 81       	ldd	r22, Y+7	; 0x07
     e90:	78 85       	ldd	r23, Y+8	; 0x08
     e92:	89 85       	ldd	r24, Y+9	; 0x09
     e94:	9a 85       	ldd	r25, Y+10	; 0x0a
     e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	9e 83       	std	Y+6, r25	; 0x06
     ea0:	8d 83       	std	Y+5, r24	; 0x05
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	9e 81       	ldd	r25, Y+6	; 0x06
     ea6:	9a 83       	std	Y+2, r25	; 0x02
     ea8:	89 83       	std	Y+1, r24	; 0x01
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <CLCD_VoidInit+0xf0>
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
	/*wait for more than 30 ms */
	_delay_ms(40);

	/*function set command : 2 lines , 5*8 font size*/
	CLCD_VoidSendCommand(0b00111000);
     eb6:	88 e3       	ldi	r24, 0x38	; 56
     eb8:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>

	/*Display on off control : Display enable , disable cursor , no blink cursor*/
	CLCD_VoidSendCommand(0b00001100);
     ebc:	8c e0       	ldi	r24, 0x0C	; 12
     ebe:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>

	/*Clear display*/
	CLCD_VoidSendCommand(0b00000001);
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>
}
     ec8:	2e 96       	adiw	r28, 0x0e	; 14
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <CLCD_VoidSendString>:

void CLCD_VoidSendString( const char * Copy_PcString)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <CLCD_VoidSendString+0x6>
     ee0:	0f 92       	push	r0
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	9b 83       	std	Y+3, r25	; 0x03
     ee8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0 ;
     eea:	19 82       	std	Y+1, r1	; 0x01
     eec:	0e c0       	rjmp	.+28     	; 0xf0a <CLCD_VoidSendString+0x30>
	while (Copy_PcString[Local_u8Counter]!='\0')
	{
		CLCD_VoidSendData(Copy_PcString[Local_u8Counter])  ;
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	9b 81       	ldd	r25, Y+3	; 0x03
     ef8:	fc 01       	movw	r30, r24
     efa:	e2 0f       	add	r30, r18
     efc:	f3 1f       	adc	r31, r19
     efe:	80 81       	ld	r24, Z
     f00:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_VoidSendData>
		Local_u8Counter++;
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	8f 5f       	subi	r24, 0xFF	; 255
     f08:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_VoidSendString( const char * Copy_PcString)
{
	u8 Local_u8Counter = 0 ;
	while (Copy_PcString[Local_u8Counter]!='\0')
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	9b 81       	ldd	r25, Y+3	; 0x03
     f14:	fc 01       	movw	r30, r24
     f16:	e2 0f       	add	r30, r18
     f18:	f3 1f       	adc	r31, r19
     f1a:	80 81       	ld	r24, Z
     f1c:	88 23       	and	r24, r24
     f1e:	39 f7       	brne	.-50     	; 0xeee <CLCD_VoidSendString+0x14>
	{
		CLCD_VoidSendData(Copy_PcString[Local_u8Counter])  ;
		Local_u8Counter++;
	}
	/*Set DATA to data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT , Copy_PcString );
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	9b 81       	ldd	r25, Y+3	; 0x03
     f24:	98 2f       	mov	r25, r24
     f26:	82 e0       	ldi	r24, 0x02	; 2
     f28:	69 2f       	mov	r22, r25
     f2a:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_u8SetPortValue>
}
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	08 95       	ret

00000f3a <CLCD_VoidGoToXY>:

void CLCD_VoidGoToXY (u8 Copy_u8XPos , u8 Copy_u8YPos)
{
     f3a:	df 93       	push	r29
     f3c:	cf 93       	push	r28
     f3e:	00 d0       	rcall	.+0      	; 0xf40 <CLCD_VoidGoToXY+0x6>
     f40:	0f 92       	push	r0
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	8a 83       	std	Y+2, r24	; 0x02
     f48:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos== 0 )
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	88 23       	and	r24, r24
     f4e:	19 f4       	brne	.+6      	; 0xf56 <CLCD_VoidGoToXY+0x1c>
	{
		/*location is at first line*/
		Local_u8Address = Copy_u8YPos ;
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	89 83       	std	Y+1, r24	; 0x01
     f54:	06 c0       	rjmp	.+12     	; 0xf62 <CLCD_VoidGoToXY+0x28>
	}
	else if (Copy_u8XPos==1)
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	19 f4       	brne	.+6      	; 0xf62 <CLCD_VoidGoToXY+0x28>
	{
		/*location is at second line*/
		Local_u8Address = 0x40 + Copy_u8YPos ;
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	80 5c       	subi	r24, 0xC0	; 192
     f60:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Because 128 ==10000000 and in datasheet MSB is 1 always and we have only 7 addresses*/
	/*we can use the address | 10000000 or setbit*/
	CLCD_VoidSendCommand(Local_u8Address+128);
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	80 58       	subi	r24, 0x80	; 128
     f66:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>
}
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <CLCD_VoidWriteSpecialCharacter>:

void CLCD_VoidWriteSpecialCharacter(u8 * Copypu8Pattern , u8 Copy_u8PatternNumber , u8 Copy_u8XPos , u8 Copy_u8YPos )
{
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	27 97       	sbiw	r28, 0x07	; 7
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	f8 94       	cli
     f84:	de bf       	out	0x3e, r29	; 62
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	cd bf       	out	0x3d, r28	; 61
     f8a:	9c 83       	std	Y+4, r25	; 0x04
     f8c:	8b 83       	std	Y+3, r24	; 0x03
     f8e:	6d 83       	std	Y+5, r22	; 0x05
     f90:	4e 83       	std	Y+6, r20	; 0x06
     f92:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress = 0 , Local_u8Iterator;
     f94:	1a 82       	std	Y+2, r1	; 0x02

	/*calculate CGRAM address whose each block is 8 byte*/
	Local_u8CGRAMAddress = Copy_u8PatternNumber*8;
     f96:	8d 81       	ldd	r24, Y+5	; 0x05
     f98:	88 2f       	mov	r24, r24
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	8a 83       	std	Y+2, r24	; 0x02

	/*Send CGRAM address command to lcd with setting bit 6 , clear bit 7*/
	CLCD_VoidSendCommand(Local_u8CGRAMAddress+64);
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	80 5c       	subi	r24, 0xC0	; 192
     fae:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VoidSendCommand>

	/*Write pattern into CGRAM*/
	for(Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator++)
     fb2:	19 82       	std	Y+1, r1	; 0x01
     fb4:	0e c0       	rjmp	.+28     	; 0xfd2 <CLCD_VoidWriteSpecialCharacter+0x5c>
	{
		CLCD_VoidSendData(Copypu8Pattern[Local_u8Iterator]);
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	9c 81       	ldd	r25, Y+4	; 0x04
     fc0:	fc 01       	movw	r30, r24
     fc2:	e2 0f       	add	r30, r18
     fc4:	f3 1f       	adc	r31, r19
     fc6:	80 81       	ld	r24, Z
     fc8:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_VoidSendData>

	/*Send CGRAM address command to lcd with setting bit 6 , clear bit 7*/
	CLCD_VoidSendCommand(Local_u8CGRAMAddress+64);

	/*Write pattern into CGRAM*/
	for(Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator++)
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	8f 5f       	subi	r24, 0xFF	; 255
     fd0:	89 83       	std	Y+1, r24	; 0x01
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	88 30       	cpi	r24, 0x08	; 8
     fd6:	78 f3       	brcs	.-34     	; 0xfb6 <CLCD_VoidWriteSpecialCharacter+0x40>
	{
		CLCD_VoidSendData(Copypu8Pattern[Local_u8Iterator]);
	}

	/*GO back to DDRAM to display the pattern*/
	CLCD_VoidGoToXY(Copy_u8XPos,Copy_u8YPos);
     fd8:	8e 81       	ldd	r24, Y+6	; 0x06
     fda:	6f 81       	ldd	r22, Y+7	; 0x07
     fdc:	0e 94 9d 07 	call	0xf3a	; 0xf3a <CLCD_VoidGoToXY>

	/*Display the pattern written in the CGRAM*/
	CLCD_VoidSendData(Copy_u8PatternNumber);
     fe0:	8d 81       	ldd	r24, Y+5	; 0x05
     fe2:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_VoidSendData>
}
     fe6:	27 96       	adiw	r28, 0x07	; 7
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <DIO_u8SetPinValue>:
	}

	return Local_u8ErrorState ;
}*/
u8 DIO_u8SetPinValue(u8 Copy_u8port, u8 Copy_u8pin, u8 Copy_u8Value)
{
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	28 97       	sbiw	r28, 0x08	; 8
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	8a 83       	std	Y+2, r24	; 0x02
    100e:	6b 83       	std	Y+3, r22	; 0x03
    1010:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
    1012:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8pin <= DIO_u8PIN7)
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	88 30       	cpi	r24, 0x08	; 8
    1018:	08 f0       	brcs	.+2      	; 0x101c <DIO_u8SetPinValue+0x24>
    101a:	f4 c0       	rjmp	.+488    	; 0x1204 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    101c:	8c 81       	ldd	r24, Y+4	; 0x04
    101e:	88 23       	and	r24, r24
    1020:	09 f0       	breq	.+2      	; 0x1024 <DIO_u8SetPinValue+0x2c>
    1022:	77 c0       	rjmp	.+238    	; 0x1112 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8port)
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	38 87       	std	Y+8, r19	; 0x08
    102c:	2f 83       	std	Y+7, r18	; 0x07
    102e:	8f 81       	ldd	r24, Y+7	; 0x07
    1030:	98 85       	ldd	r25, Y+8	; 0x08
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	91 05       	cpc	r25, r1
    1036:	59 f1       	breq	.+86     	; 0x108e <DIO_u8SetPinValue+0x96>
    1038:	2f 81       	ldd	r18, Y+7	; 0x07
    103a:	38 85       	ldd	r19, Y+8	; 0x08
    103c:	22 30       	cpi	r18, 0x02	; 2
    103e:	31 05       	cpc	r19, r1
    1040:	2c f4       	brge	.+10     	; 0x104c <DIO_u8SetPinValue+0x54>
    1042:	8f 81       	ldd	r24, Y+7	; 0x07
    1044:	98 85       	ldd	r25, Y+8	; 0x08
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	69 f0       	breq	.+26     	; 0x1064 <DIO_u8SetPinValue+0x6c>
    104a:	60 c0       	rjmp	.+192    	; 0x110c <DIO_u8SetPinValue+0x114>
    104c:	2f 81       	ldd	r18, Y+7	; 0x07
    104e:	38 85       	ldd	r19, Y+8	; 0x08
    1050:	22 30       	cpi	r18, 0x02	; 2
    1052:	31 05       	cpc	r19, r1
    1054:	89 f1       	breq	.+98     	; 0x10b8 <DIO_u8SetPinValue+0xc0>
    1056:	8f 81       	ldd	r24, Y+7	; 0x07
    1058:	98 85       	ldd	r25, Y+8	; 0x08
    105a:	83 30       	cpi	r24, 0x03	; 3
    105c:	91 05       	cpc	r25, r1
    105e:	09 f4       	brne	.+2      	; 0x1062 <DIO_u8SetPinValue+0x6a>
    1060:	40 c0       	rjmp	.+128    	; 0x10e2 <DIO_u8SetPinValue+0xea>
    1062:	54 c0       	rjmp	.+168    	; 0x110c <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8pin);break;
    1064:	ab e3       	ldi	r26, 0x3B	; 59
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	eb e3       	ldi	r30, 0x3B	; 59
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <DIO_u8SetPinValue+0x8a>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <DIO_u8SetPinValue+0x86>
    1086:	80 95       	com	r24
    1088:	84 23       	and	r24, r20
    108a:	8c 93       	st	X, r24
    108c:	bd c0       	rjmp	.+378    	; 0x1208 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8pin);break;
    108e:	a8 e3       	ldi	r26, 0x38	; 56
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e8 e3       	ldi	r30, 0x38	; 56
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	48 2f       	mov	r20, r24
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	02 2e       	mov	r0, r18
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <DIO_u8SetPinValue+0xb4>
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	0a 94       	dec	r0
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <DIO_u8SetPinValue+0xb0>
    10b0:	80 95       	com	r24
    10b2:	84 23       	and	r24, r20
    10b4:	8c 93       	st	X, r24
    10b6:	a8 c0       	rjmp	.+336    	; 0x1208 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8pin);break;
    10b8:	a5 e3       	ldi	r26, 0x35	; 53
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e5 e3       	ldi	r30, 0x35	; 53
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	48 2f       	mov	r20, r24
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	02 2e       	mov	r0, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <DIO_u8SetPinValue+0xde>
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <DIO_u8SetPinValue+0xda>
    10da:	80 95       	com	r24
    10dc:	84 23       	and	r24, r20
    10de:	8c 93       	st	X, r24
    10e0:	93 c0       	rjmp	.+294    	; 0x1208 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8pin);break;
    10e2:	a2 e3       	ldi	r26, 0x32	; 50
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e2 e3       	ldi	r30, 0x32	; 50
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <DIO_u8SetPinValue+0x108>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <DIO_u8SetPinValue+0x104>
    1104:	80 95       	com	r24
    1106:	84 23       	and	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	7e c0       	rjmp	.+252    	; 0x1208 <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState = 1 ;
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	89 83       	std	Y+1, r24	; 0x01
    1110:	7b c0       	rjmp	.+246    	; 0x1208 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
    1112:	8c 81       	ldd	r24, Y+4	; 0x04
    1114:	81 30       	cpi	r24, 0x01	; 1
    1116:	09 f0       	breq	.+2      	; 0x111a <DIO_u8SetPinValue+0x122>
    1118:	72 c0       	rjmp	.+228    	; 0x11fe <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8port)
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	3e 83       	std	Y+6, r19	; 0x06
    1122:	2d 83       	std	Y+5, r18	; 0x05
    1124:	8d 81       	ldd	r24, Y+5	; 0x05
    1126:	9e 81       	ldd	r25, Y+6	; 0x06
    1128:	81 30       	cpi	r24, 0x01	; 1
    112a:	91 05       	cpc	r25, r1
    112c:	49 f1       	breq	.+82     	; 0x1180 <DIO_u8SetPinValue+0x188>
    112e:	2d 81       	ldd	r18, Y+5	; 0x05
    1130:	3e 81       	ldd	r19, Y+6	; 0x06
    1132:	22 30       	cpi	r18, 0x02	; 2
    1134:	31 05       	cpc	r19, r1
    1136:	2c f4       	brge	.+10     	; 0x1142 <DIO_u8SetPinValue+0x14a>
    1138:	8d 81       	ldd	r24, Y+5	; 0x05
    113a:	9e 81       	ldd	r25, Y+6	; 0x06
    113c:	00 97       	sbiw	r24, 0x00	; 0
    113e:	61 f0       	breq	.+24     	; 0x1158 <DIO_u8SetPinValue+0x160>
    1140:	5b c0       	rjmp	.+182    	; 0x11f8 <DIO_u8SetPinValue+0x200>
    1142:	2d 81       	ldd	r18, Y+5	; 0x05
    1144:	3e 81       	ldd	r19, Y+6	; 0x06
    1146:	22 30       	cpi	r18, 0x02	; 2
    1148:	31 05       	cpc	r19, r1
    114a:	71 f1       	breq	.+92     	; 0x11a8 <DIO_u8SetPinValue+0x1b0>
    114c:	8d 81       	ldd	r24, Y+5	; 0x05
    114e:	9e 81       	ldd	r25, Y+6	; 0x06
    1150:	83 30       	cpi	r24, 0x03	; 3
    1152:	91 05       	cpc	r25, r1
    1154:	e9 f1       	breq	.+122    	; 0x11d0 <DIO_u8SetPinValue+0x1d8>
    1156:	50 c0       	rjmp	.+160    	; 0x11f8 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8pin);break;
    1158:	ab e3       	ldi	r26, 0x3B	; 59
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	eb e3       	ldi	r30, 0x3B	; 59
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <DIO_u8SetPinValue+0x17e>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <DIO_u8SetPinValue+0x17a>
    117a:	84 2b       	or	r24, r20
    117c:	8c 93       	st	X, r24
    117e:	44 c0       	rjmp	.+136    	; 0x1208 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8pin);break;
    1180:	a8 e3       	ldi	r26, 0x38	; 56
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e8 e3       	ldi	r30, 0x38	; 56
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	48 2f       	mov	r20, r24
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	02 2e       	mov	r0, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <DIO_u8SetPinValue+0x1a6>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	0a 94       	dec	r0
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <DIO_u8SetPinValue+0x1a2>
    11a2:	84 2b       	or	r24, r20
    11a4:	8c 93       	st	X, r24
    11a6:	30 c0       	rjmp	.+96     	; 0x1208 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8pin);break;
    11a8:	a5 e3       	ldi	r26, 0x35	; 53
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e5 e3       	ldi	r30, 0x35	; 53
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <DIO_u8SetPinValue+0x1ce>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <DIO_u8SetPinValue+0x1ca>
    11ca:	84 2b       	or	r24, r20
    11cc:	8c 93       	st	X, r24
    11ce:	1c c0       	rjmp	.+56     	; 0x1208 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8pin);break;
    11d0:	a2 e3       	ldi	r26, 0x32	; 50
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e2 e3       	ldi	r30, 0x32	; 50
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	48 2f       	mov	r20, r24
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 2e       	mov	r0, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <DIO_u8SetPinValue+0x1f6>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	0a 94       	dec	r0
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <DIO_u8SetPinValue+0x1f2>
    11f2:	84 2b       	or	r24, r20
    11f4:	8c 93       	st	X, r24
    11f6:	08 c0       	rjmp	.+16     	; 0x1208 <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState = 1 ;
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	89 83       	std	Y+1, r24	; 0x01
    11fc:	05 c0       	rjmp	.+10     	; 0x1208 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = 1 ;
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = 1 ;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    1208:	89 81       	ldd	r24, Y+1	; 0x01
}
    120a:	28 96       	adiw	r28, 0x08	; 8
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8port, u8 Copy_u8Value)
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	00 d0       	rcall	.+0      	; 0x1222 <DIO_u8SetPortValue+0x6>
    1222:	00 d0       	rcall	.+0      	; 0x1224 <DIO_u8SetPortValue+0x8>
    1224:	0f 92       	push	r0
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	8a 83       	std	Y+2, r24	; 0x02
    122c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0 ;
    122e:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8port)
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	3d 83       	std	Y+5, r19	; 0x05
    1238:	2c 83       	std	Y+4, r18	; 0x04
    123a:	8c 81       	ldd	r24, Y+4	; 0x04
    123c:	9d 81       	ldd	r25, Y+5	; 0x05
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	91 05       	cpc	r25, r1
    1242:	d1 f0       	breq	.+52     	; 0x1278 <DIO_u8SetPortValue+0x5c>
    1244:	2c 81       	ldd	r18, Y+4	; 0x04
    1246:	3d 81       	ldd	r19, Y+5	; 0x05
    1248:	22 30       	cpi	r18, 0x02	; 2
    124a:	31 05       	cpc	r19, r1
    124c:	2c f4       	brge	.+10     	; 0x1258 <DIO_u8SetPortValue+0x3c>
    124e:	8c 81       	ldd	r24, Y+4	; 0x04
    1250:	9d 81       	ldd	r25, Y+5	; 0x05
    1252:	00 97       	sbiw	r24, 0x00	; 0
    1254:	61 f0       	breq	.+24     	; 0x126e <DIO_u8SetPortValue+0x52>
    1256:	1f c0       	rjmp	.+62     	; 0x1296 <DIO_u8SetPortValue+0x7a>
    1258:	2c 81       	ldd	r18, Y+4	; 0x04
    125a:	3d 81       	ldd	r19, Y+5	; 0x05
    125c:	22 30       	cpi	r18, 0x02	; 2
    125e:	31 05       	cpc	r19, r1
    1260:	81 f0       	breq	.+32     	; 0x1282 <DIO_u8SetPortValue+0x66>
    1262:	8c 81       	ldd	r24, Y+4	; 0x04
    1264:	9d 81       	ldd	r25, Y+5	; 0x05
    1266:	83 30       	cpi	r24, 0x03	; 3
    1268:	91 05       	cpc	r25, r1
    126a:	81 f0       	breq	.+32     	; 0x128c <DIO_u8SetPortValue+0x70>
    126c:	14 c0       	rjmp	.+40     	; 0x1296 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break ;
    126e:	eb e3       	ldi	r30, 0x3B	; 59
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	80 83       	st	Z, r24
    1276:	11 c0       	rjmp	.+34     	; 0x129a <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break ;
    1278:	e8 e3       	ldi	r30, 0x38	; 56
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	80 83       	st	Z, r24
    1280:	0c c0       	rjmp	.+24     	; 0x129a <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break ;
    1282:	e5 e3       	ldi	r30, 0x35	; 53
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	80 83       	st	Z, r24
    128a:	07 c0       	rjmp	.+14     	; 0x129a <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break ;
    128c:	e2 e3       	ldi	r30, 0x32	; 50
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	80 83       	st	Z, r24
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_u8SetPortValue+0x7e>
	default : Local_u8ErrorState = 1 ;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    129a:	89 81       	ldd	r24, Y+1	; 0x01
}
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8port, u8 Copy_u8pin , u8 * Copy_pu8Value)

{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	27 97       	sbiw	r28, 0x07	; 7
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	cd bf       	out	0x3d, r28	; 61
    12c0:	8a 83       	std	Y+2, r24	; 0x02
    12c2:	6b 83       	std	Y+3, r22	; 0x03
    12c4:	5d 83       	std	Y+5, r21	; 0x05
    12c6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0 ;
    12c8:	19 82       	std	Y+1, r1	; 0x01
	// any function receives function check if it equal to null or not
	if((Copy_pu8Value!=NULL ) && ( Copy_u8pin<=DIO_u8PIN7))
    12ca:	8c 81       	ldd	r24, Y+4	; 0x04
    12cc:	9d 81       	ldd	r25, Y+5	; 0x05
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <DIO_u8GetPinValue+0x28>
    12d2:	78 c0       	rjmp	.+240    	; 0x13c4 <DIO_u8GetPinValue+0x118>
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	88 30       	cpi	r24, 0x08	; 8
    12d8:	08 f0       	brcs	.+2      	; 0x12dc <DIO_u8GetPinValue+0x30>
    12da:	74 c0       	rjmp	.+232    	; 0x13c4 <DIO_u8GetPinValue+0x118>
	{
		switch (Copy_u8port)
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	3f 83       	std	Y+7, r19	; 0x07
    12e4:	2e 83       	std	Y+6, r18	; 0x06
    12e6:	4e 81       	ldd	r20, Y+6	; 0x06
    12e8:	5f 81       	ldd	r21, Y+7	; 0x07
    12ea:	41 30       	cpi	r20, 0x01	; 1
    12ec:	51 05       	cpc	r21, r1
    12ee:	59 f1       	breq	.+86     	; 0x1346 <DIO_u8GetPinValue+0x9a>
    12f0:	8e 81       	ldd	r24, Y+6	; 0x06
    12f2:	9f 81       	ldd	r25, Y+7	; 0x07
    12f4:	82 30       	cpi	r24, 0x02	; 2
    12f6:	91 05       	cpc	r25, r1
    12f8:	34 f4       	brge	.+12     	; 0x1306 <DIO_u8GetPinValue+0x5a>
    12fa:	2e 81       	ldd	r18, Y+6	; 0x06
    12fc:	3f 81       	ldd	r19, Y+7	; 0x07
    12fe:	21 15       	cp	r18, r1
    1300:	31 05       	cpc	r19, r1
    1302:	69 f0       	breq	.+26     	; 0x131e <DIO_u8GetPinValue+0x72>
    1304:	5c c0       	rjmp	.+184    	; 0x13be <DIO_u8GetPinValue+0x112>
    1306:	4e 81       	ldd	r20, Y+6	; 0x06
    1308:	5f 81       	ldd	r21, Y+7	; 0x07
    130a:	42 30       	cpi	r20, 0x02	; 2
    130c:	51 05       	cpc	r21, r1
    130e:	79 f1       	breq	.+94     	; 0x136e <DIO_u8GetPinValue+0xc2>
    1310:	8e 81       	ldd	r24, Y+6	; 0x06
    1312:	9f 81       	ldd	r25, Y+7	; 0x07
    1314:	83 30       	cpi	r24, 0x03	; 3
    1316:	91 05       	cpc	r25, r1
    1318:	09 f4       	brne	.+2      	; 0x131c <DIO_u8GetPinValue+0x70>
    131a:	3d c0       	rjmp	.+122    	; 0x1396 <DIO_u8GetPinValue+0xea>
    131c:	50 c0       	rjmp	.+160    	; 0x13be <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA : *Copy_pu8Value = GET_BIT(PINA ,Copy_u8pin); break ;
    131e:	e9 e3       	ldi	r30, 0x39	; 57
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	88 2f       	mov	r24, r24
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	a9 01       	movw	r20, r18
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <DIO_u8GetPinValue+0x8a>
    1332:	55 95       	asr	r21
    1334:	47 95       	ror	r20
    1336:	8a 95       	dec	r24
    1338:	e2 f7       	brpl	.-8      	; 0x1332 <DIO_u8GetPinValue+0x86>
    133a:	ca 01       	movw	r24, r20
    133c:	81 70       	andi	r24, 0x01	; 1
    133e:	ec 81       	ldd	r30, Y+4	; 0x04
    1340:	fd 81       	ldd	r31, Y+5	; 0x05
    1342:	80 83       	st	Z, r24
    1344:	41 c0       	rjmp	.+130    	; 0x13c8 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB : *Copy_pu8Value = GET_BIT(PINB ,Copy_u8pin); break ;
    1346:	e6 e3       	ldi	r30, 0x36	; 54
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	88 2f       	mov	r24, r24
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	a9 01       	movw	r20, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <DIO_u8GetPinValue+0xb2>
    135a:	55 95       	asr	r21
    135c:	47 95       	ror	r20
    135e:	8a 95       	dec	r24
    1360:	e2 f7       	brpl	.-8      	; 0x135a <DIO_u8GetPinValue+0xae>
    1362:	ca 01       	movw	r24, r20
    1364:	81 70       	andi	r24, 0x01	; 1
    1366:	ec 81       	ldd	r30, Y+4	; 0x04
    1368:	fd 81       	ldd	r31, Y+5	; 0x05
    136a:	80 83       	st	Z, r24
    136c:	2d c0       	rjmp	.+90     	; 0x13c8 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC : *Copy_pu8Value = GET_BIT(PINC ,Copy_u8pin); break ;
    136e:	e3 e3       	ldi	r30, 0x33	; 51
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	88 2f       	mov	r24, r24
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	a9 01       	movw	r20, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <DIO_u8GetPinValue+0xda>
    1382:	55 95       	asr	r21
    1384:	47 95       	ror	r20
    1386:	8a 95       	dec	r24
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <DIO_u8GetPinValue+0xd6>
    138a:	ca 01       	movw	r24, r20
    138c:	81 70       	andi	r24, 0x01	; 1
    138e:	ec 81       	ldd	r30, Y+4	; 0x04
    1390:	fd 81       	ldd	r31, Y+5	; 0x05
    1392:	80 83       	st	Z, r24
    1394:	19 c0       	rjmp	.+50     	; 0x13c8 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD : *Copy_pu8Value = GET_BIT(PIND ,Copy_u8pin); break ;
    1396:	e0 e3       	ldi	r30, 0x30	; 48
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	88 2f       	mov	r24, r24
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	a9 01       	movw	r20, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <DIO_u8GetPinValue+0x102>
    13aa:	55 95       	asr	r21
    13ac:	47 95       	ror	r20
    13ae:	8a 95       	dec	r24
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <DIO_u8GetPinValue+0xfe>
    13b2:	ca 01       	movw	r24, r20
    13b4:	81 70       	andi	r24, 0x01	; 1
    13b6:	ec 81       	ldd	r30, Y+4	; 0x04
    13b8:	fd 81       	ldd	r31, Y+5	; 0x05
    13ba:	80 83       	st	Z, r24
    13bc:	05 c0       	rjmp	.+10     	; 0x13c8 <DIO_u8GetPinValue+0x11c>
		default : Local_u8ErrorState = 1 ;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	89 83       	std	Y+1, r24	; 0x01
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState = 1 ;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ca:	27 96       	adiw	r28, 0x07	; 7
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	f8 94       	cli
    13d0:	de bf       	out	0x3e, r29	; 62
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	cd bf       	out	0x3d, r28	; 61
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <EXTI_voidInt0_INIT>:
void (*EXTI_pvInt0Func)(void) = NULL;
void (*EXTI_pvInt1Func)(void) = NULL;
void (*EXTI_pvInt2Func)(void) = NULL;
//Pre build Configuration
void EXTI_voidInt0_INIT(void)
{
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
#elif INT0_SENSE == ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC00);
	CLR_BIT(MCUCR,MCUCR_ISC01);

#elif INT0_SENSE == FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC00);
    13e4:	a5 e5       	ldi	r26, 0x55	; 85
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e5 e5       	ldi	r30, 0x55	; 85
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	8e 7f       	andi	r24, 0xFE	; 254
    13f0:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
    13f2:	a5 e5       	ldi	r26, 0x55	; 85
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e5 e5       	ldi	r30, 0x55	; 85
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	82 60       	ori	r24, 0x02	; 2
    13fe:	8c 93       	st	X, r24
#error "Wrong INT0 Sense Configuration Option"
#endif

	/*Check peripheral interrupt enable initial state*/
#if INT0_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT0);
    1400:	ab e5       	ldi	r26, 0x5B	; 91
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	eb e5       	ldi	r30, 0x5B	; 91
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	80 64       	ori	r24, 0x40	; 64
    140c:	8c 93       	st	X, r24

#else
#error "Wrong INT0_INITIAL_STATE Configuration Option"
#endif

}
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	08 95       	ret

00001414 <EXTI_voidInt1_INIT>:
void EXTI_voidInt1_INIT(void)
{
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
#elif INT1_SENSE == ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC10);
	CLR_BIT(MCUCR,MCUCR_ISC11);

#elif INT1_SENSE == FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC10);
    141c:	a5 e5       	ldi	r26, 0x55	; 85
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e5 e5       	ldi	r30, 0x55	; 85
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	8b 7f       	andi	r24, 0xFB	; 251
    1428:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);
    142a:	a5 e5       	ldi	r26, 0x55	; 85
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e5 e5       	ldi	r30, 0x55	; 85
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	88 60       	ori	r24, 0x08	; 8
    1436:	8c 93       	st	X, r24
#endif


	/*Check peripheral interrupt enable initial state*/
#if INT1_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT1);
    1438:	ab e5       	ldi	r26, 0x5B	; 91
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	eb e5       	ldi	r30, 0x5B	; 91
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	80 68       	ori	r24, 0x80	; 128
    1444:	8c 93       	st	X, r24
	CLR_BIT(GICR,GICR_INT1);

#else
#error "Wrong INT1_INITIAL_STATE Configuration Option"
#endif
}
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <EXTI_voidInt2_INIT>:
void EXTI_voidInt2_INIT(void)
{
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
#if INT2_SENSE == FALLING_EDGE
	CLR_BIT(MCUCSR ,MCUCSR_INT2);
    1454:	a4 e5       	ldi	r26, 0x54	; 84
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e4 e5       	ldi	r30, 0x54	; 84
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	8f 7b       	andi	r24, 0xBF	; 191
    1460:	8c 93       	st	X, r24

#else
#error "Wrong INT2_INITIAL_STATE Configuration Option"
#endif
#endif
}
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <EXTI_u8Int0SetSenseControl>:

/*Post Build Configuration */
u8 EXTI_u8Int0SetSenseControl(u8 Copy_u8Sense)
{
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	00 d0       	rcall	.+0      	; 0x146e <EXTI_u8Int0SetSenseControl+0x6>
    146e:	00 d0       	rcall	.+0      	; 0x1470 <EXTI_u8Int0SetSenseControl+0x8>
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK ;
    1476:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Sense)
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	3c 83       	std	Y+4, r19	; 0x04
    1480:	2b 83       	std	Y+3, r18	; 0x03
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	9c 81       	ldd	r25, Y+4	; 0x04
    1486:	82 30       	cpi	r24, 0x02	; 2
    1488:	91 05       	cpc	r25, r1
    148a:	29 f1       	breq	.+74     	; 0x14d6 <EXTI_u8Int0SetSenseControl+0x6e>
    148c:	2b 81       	ldd	r18, Y+3	; 0x03
    148e:	3c 81       	ldd	r19, Y+4	; 0x04
    1490:	23 30       	cpi	r18, 0x03	; 3
    1492:	31 05       	cpc	r19, r1
    1494:	34 f4       	brge	.+12     	; 0x14a2 <EXTI_u8Int0SetSenseControl+0x3a>
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	9c 81       	ldd	r25, Y+4	; 0x04
    149a:	81 30       	cpi	r24, 0x01	; 1
    149c:	91 05       	cpc	r25, r1
    149e:	61 f0       	breq	.+24     	; 0x14b8 <EXTI_u8Int0SetSenseControl+0x50>
    14a0:	47 c0       	rjmp	.+142    	; 0x1530 <EXTI_u8Int0SetSenseControl+0xc8>
    14a2:	2b 81       	ldd	r18, Y+3	; 0x03
    14a4:	3c 81       	ldd	r19, Y+4	; 0x04
    14a6:	23 30       	cpi	r18, 0x03	; 3
    14a8:	31 05       	cpc	r19, r1
    14aa:	21 f1       	breq	.+72     	; 0x14f4 <EXTI_u8Int0SetSenseControl+0x8c>
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	9c 81       	ldd	r25, Y+4	; 0x04
    14b0:	84 30       	cpi	r24, 0x04	; 4
    14b2:	91 05       	cpc	r25, r1
    14b4:	71 f1       	breq	.+92     	; 0x1512 <EXTI_u8Int0SetSenseControl+0xaa>
    14b6:	3c c0       	rjmp	.+120    	; 0x1530 <EXTI_u8Int0SetSenseControl+0xc8>
	{
	case LOW_LEVEL    : CLR_BIT(MCUCR ,MCUCR_ISC00); CLR_BIT(MCUCR ,MCUCR_ISC01); break;
    14b8:	a5 e5       	ldi	r26, 0x55	; 85
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e5 e5       	ldi	r30, 0x55	; 85
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	8e 7f       	andi	r24, 0xFE	; 254
    14c4:	8c 93       	st	X, r24
    14c6:	a5 e5       	ldi	r26, 0x55	; 85
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e5 e5       	ldi	r30, 0x55	; 85
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	8d 7f       	andi	r24, 0xFD	; 253
    14d2:	8c 93       	st	X, r24
    14d4:	2f c0       	rjmp	.+94     	; 0x1534 <EXTI_u8Int0SetSenseControl+0xcc>
	case ON_CHANGE 	  : SET_BIT(MCUCR ,MCUCR_ISC00); CLR_BIT(MCUCR ,MCUCR_ISC01); break;
    14d6:	a5 e5       	ldi	r26, 0x55	; 85
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e5 e5       	ldi	r30, 0x55	; 85
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	81 60       	ori	r24, 0x01	; 1
    14e2:	8c 93       	st	X, r24
    14e4:	a5 e5       	ldi	r26, 0x55	; 85
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e5 e5       	ldi	r30, 0x55	; 85
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8d 7f       	andi	r24, 0xFD	; 253
    14f0:	8c 93       	st	X, r24
    14f2:	20 c0       	rjmp	.+64     	; 0x1534 <EXTI_u8Int0SetSenseControl+0xcc>
	case FALLING_EDGE : CLR_BIT(MCUCR ,MCUCR_ISC00); SET_BIT(MCUCR ,MCUCR_ISC01); break;
    14f4:	a5 e5       	ldi	r26, 0x55	; 85
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e5 e5       	ldi	r30, 0x55	; 85
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	8e 7f       	andi	r24, 0xFE	; 254
    1500:	8c 93       	st	X, r24
    1502:	a5 e5       	ldi	r26, 0x55	; 85
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e5 e5       	ldi	r30, 0x55	; 85
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	82 60       	ori	r24, 0x02	; 2
    150e:	8c 93       	st	X, r24
    1510:	11 c0       	rjmp	.+34     	; 0x1534 <EXTI_u8Int0SetSenseControl+0xcc>
	case RISING_EGDE  : SET_BIT(MCUCR ,MCUCR_ISC00); SET_BIT(MCUCR ,MCUCR_ISC01); break;
    1512:	a5 e5       	ldi	r26, 0x55	; 85
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e5 e5       	ldi	r30, 0x55	; 85
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	81 60       	ori	r24, 0x01	; 1
    151e:	8c 93       	st	X, r24
    1520:	a5 e5       	ldi	r26, 0x55	; 85
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e5 e5       	ldi	r30, 0x55	; 85
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	82 60       	ori	r24, 0x02	; 2
    152c:	8c 93       	st	X, r24
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <EXTI_u8Int0SetSenseControl+0xcc>
	default : Local_u8ErrorState = NOTOK;
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1534:	89 81       	ldd	r24, Y+1	; 0x01
}
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	cf 91       	pop	r28
    1540:	df 91       	pop	r29
    1542:	08 95       	ret

00001544 <EXTI_u8Int1SetSenseControl>:

u8 EXTI_u8Int1SetSenseControl(u8 Copy_u8Sense)
{
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	00 d0       	rcall	.+0      	; 0x154a <EXTI_u8Int1SetSenseControl+0x6>
    154a:	00 d0       	rcall	.+0      	; 0x154c <EXTI_u8Int1SetSenseControl+0x8>
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK ;
    1552:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Sense)
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	3c 83       	std	Y+4, r19	; 0x04
    155c:	2b 83       	std	Y+3, r18	; 0x03
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	9c 81       	ldd	r25, Y+4	; 0x04
    1562:	82 30       	cpi	r24, 0x02	; 2
    1564:	91 05       	cpc	r25, r1
    1566:	29 f1       	breq	.+74     	; 0x15b2 <EXTI_u8Int1SetSenseControl+0x6e>
    1568:	2b 81       	ldd	r18, Y+3	; 0x03
    156a:	3c 81       	ldd	r19, Y+4	; 0x04
    156c:	23 30       	cpi	r18, 0x03	; 3
    156e:	31 05       	cpc	r19, r1
    1570:	34 f4       	brge	.+12     	; 0x157e <EXTI_u8Int1SetSenseControl+0x3a>
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	9c 81       	ldd	r25, Y+4	; 0x04
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	91 05       	cpc	r25, r1
    157a:	61 f0       	breq	.+24     	; 0x1594 <EXTI_u8Int1SetSenseControl+0x50>
    157c:	47 c0       	rjmp	.+142    	; 0x160c <EXTI_u8Int1SetSenseControl+0xc8>
    157e:	2b 81       	ldd	r18, Y+3	; 0x03
    1580:	3c 81       	ldd	r19, Y+4	; 0x04
    1582:	23 30       	cpi	r18, 0x03	; 3
    1584:	31 05       	cpc	r19, r1
    1586:	21 f1       	breq	.+72     	; 0x15d0 <EXTI_u8Int1SetSenseControl+0x8c>
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	9c 81       	ldd	r25, Y+4	; 0x04
    158c:	84 30       	cpi	r24, 0x04	; 4
    158e:	91 05       	cpc	r25, r1
    1590:	71 f1       	breq	.+92     	; 0x15ee <EXTI_u8Int1SetSenseControl+0xaa>
    1592:	3c c0       	rjmp	.+120    	; 0x160c <EXTI_u8Int1SetSenseControl+0xc8>
	{
	case LOW_LEVEL    : CLR_BIT(MCUCR ,MCUCR_ISC10); CLR_BIT(MCUCR ,MCUCR_ISC11); break;
    1594:	a5 e5       	ldi	r26, 0x55	; 85
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e5 e5       	ldi	r30, 0x55	; 85
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	8b 7f       	andi	r24, 0xFB	; 251
    15a0:	8c 93       	st	X, r24
    15a2:	a5 e5       	ldi	r26, 0x55	; 85
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e5 e5       	ldi	r30, 0x55	; 85
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	87 7f       	andi	r24, 0xF7	; 247
    15ae:	8c 93       	st	X, r24
    15b0:	2f c0       	rjmp	.+94     	; 0x1610 <EXTI_u8Int1SetSenseControl+0xcc>
	case ON_CHANGE 	  : SET_BIT(MCUCR ,MCUCR_ISC10); CLR_BIT(MCUCR ,MCUCR_ISC11); break;
    15b2:	a5 e5       	ldi	r26, 0x55	; 85
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e5 e5       	ldi	r30, 0x55	; 85
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	84 60       	ori	r24, 0x04	; 4
    15be:	8c 93       	st	X, r24
    15c0:	a5 e5       	ldi	r26, 0x55	; 85
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e5 e5       	ldi	r30, 0x55	; 85
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	87 7f       	andi	r24, 0xF7	; 247
    15cc:	8c 93       	st	X, r24
    15ce:	20 c0       	rjmp	.+64     	; 0x1610 <EXTI_u8Int1SetSenseControl+0xcc>
	case FALLING_EDGE : CLR_BIT(MCUCR ,MCUCR_ISC10); SET_BIT(MCUCR ,MCUCR_ISC11); break;
    15d0:	a5 e5       	ldi	r26, 0x55	; 85
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e5 e5       	ldi	r30, 0x55	; 85
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	8b 7f       	andi	r24, 0xFB	; 251
    15dc:	8c 93       	st	X, r24
    15de:	a5 e5       	ldi	r26, 0x55	; 85
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e5 e5       	ldi	r30, 0x55	; 85
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	88 60       	ori	r24, 0x08	; 8
    15ea:	8c 93       	st	X, r24
    15ec:	11 c0       	rjmp	.+34     	; 0x1610 <EXTI_u8Int1SetSenseControl+0xcc>
	case RISING_EGDE  : SET_BIT(MCUCR ,MCUCR_ISC10); SET_BIT(MCUCR ,MCUCR_ISC11); break;
    15ee:	a5 e5       	ldi	r26, 0x55	; 85
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e5 e5       	ldi	r30, 0x55	; 85
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	84 60       	ori	r24, 0x04	; 4
    15fa:	8c 93       	st	X, r24
    15fc:	a5 e5       	ldi	r26, 0x55	; 85
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e5 e5       	ldi	r30, 0x55	; 85
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	88 60       	ori	r24, 0x08	; 8
    1608:	8c 93       	st	X, r24
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <EXTI_u8Int1SetSenseControl+0xcc>
	default : Local_u8ErrorState = NOTOK;
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1610:	89 81       	ldd	r24, Y+1	; 0x01
}
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	08 95       	ret

00001620 <EXTI_u8Int2SetSenseControl>:

u8 EXTI_u8Int2SetSenseControl(u8 Copy_u8Sense)
{
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	00 d0       	rcall	.+0      	; 0x1626 <EXTI_u8Int2SetSenseControl+0x6>
    1626:	00 d0       	rcall	.+0      	; 0x1628 <EXTI_u8Int2SetSenseControl+0x8>
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK ;
    162e:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Sense)
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	3c 83       	std	Y+4, r19	; 0x04
    1638:	2b 83       	std	Y+3, r18	; 0x03
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	9c 81       	ldd	r25, Y+4	; 0x04
    163e:	83 30       	cpi	r24, 0x03	; 3
    1640:	91 05       	cpc	r25, r1
    1642:	31 f0       	breq	.+12     	; 0x1650 <EXTI_u8Int2SetSenseControl+0x30>
    1644:	2b 81       	ldd	r18, Y+3	; 0x03
    1646:	3c 81       	ldd	r19, Y+4	; 0x04
    1648:	24 30       	cpi	r18, 0x04	; 4
    164a:	31 05       	cpc	r19, r1
    164c:	49 f0       	breq	.+18     	; 0x1660 <EXTI_u8Int2SetSenseControl+0x40>
    164e:	10 c0       	rjmp	.+32     	; 0x1670 <EXTI_u8Int2SetSenseControl+0x50>
	{
	case FALLING_EDGE : CLR_BIT(MCUCSR ,MCUCSR_INT2); break;
    1650:	a4 e5       	ldi	r26, 0x54	; 84
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e4 e5       	ldi	r30, 0x54	; 84
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	8f 7b       	andi	r24, 0xBF	; 191
    165c:	8c 93       	st	X, r24
    165e:	0a c0       	rjmp	.+20     	; 0x1674 <EXTI_u8Int2SetSenseControl+0x54>
	case RISING_EGDE  : SET_BIT(MCUCSR ,MCUCSR_INT2); break;
    1660:	a4 e5       	ldi	r26, 0x54	; 84
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e4 e5       	ldi	r30, 0x54	; 84
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	80 64       	ori	r24, 0x40	; 64
    166c:	8c 93       	st	X, r24
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <EXTI_u8Int2SetSenseControl+0x54>
	default : Local_u8ErrorState = NOTOK;
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1674:	89 81       	ldd	r24, Y+1	; 0x01
}
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <EXTI_u8IntEnable>:

/*Enable Interrupt */
u8 EXTI_u8IntEnable(u8 Copy_u8Int)
{
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	00 d0       	rcall	.+0      	; 0x168a <EXTI_u8IntEnable+0x6>
    168a:	00 d0       	rcall	.+0      	; 0x168c <EXTI_u8IntEnable+0x8>
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK ;
    1692:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Int)
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	3c 83       	std	Y+4, r19	; 0x04
    169c:	2b 83       	std	Y+3, r18	; 0x03
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	9c 81       	ldd	r25, Y+4	; 0x04
    16a2:	81 30       	cpi	r24, 0x01	; 1
    16a4:	91 05       	cpc	r25, r1
    16a6:	89 f0       	breq	.+34     	; 0x16ca <EXTI_u8IntEnable+0x46>
    16a8:	2b 81       	ldd	r18, Y+3	; 0x03
    16aa:	3c 81       	ldd	r19, Y+4	; 0x04
    16ac:	22 30       	cpi	r18, 0x02	; 2
    16ae:	31 05       	cpc	r19, r1
    16b0:	a1 f0       	breq	.+40     	; 0x16da <EXTI_u8IntEnable+0x56>
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	9c 81       	ldd	r25, Y+4	; 0x04
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	c1 f4       	brne	.+48     	; 0x16ea <EXTI_u8IntEnable+0x66>
	{
	case INT0 : SET_BIT(GICR,GICR_INT0); break;
    16ba:	ab e5       	ldi	r26, 0x5B	; 91
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	eb e5       	ldi	r30, 0x5B	; 91
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	80 64       	ori	r24, 0x40	; 64
    16c6:	8c 93       	st	X, r24
    16c8:	12 c0       	rjmp	.+36     	; 0x16ee <EXTI_u8IntEnable+0x6a>
	case INT1 : SET_BIT(GICR,GICR_INT1); break;
    16ca:	ab e5       	ldi	r26, 0x5B	; 91
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	eb e5       	ldi	r30, 0x5B	; 91
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	80 68       	ori	r24, 0x80	; 128
    16d6:	8c 93       	st	X, r24
    16d8:	0a c0       	rjmp	.+20     	; 0x16ee <EXTI_u8IntEnable+0x6a>
	case INT2 : SET_BIT(GICR,GICR_INT2); break;
    16da:	ab e5       	ldi	r26, 0x5B	; 91
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	eb e5       	ldi	r30, 0x5B	; 91
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	80 62       	ori	r24, 0x20	; 32
    16e6:	8c 93       	st	X, r24
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <EXTI_u8IntEnable+0x6a>
	default : Local_u8ErrorState = NOTOK;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <EXTI_u8IntDisable>:
/*Disable Interrupt */
u8 EXTI_u8IntDisable(u8 Copy_u8Int)
{
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	00 d0       	rcall	.+0      	; 0x1704 <EXTI_u8IntDisable+0x6>
    1704:	00 d0       	rcall	.+0      	; 0x1706 <EXTI_u8IntDisable+0x8>
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
    170a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK ;
    170c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Int)
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	3c 83       	std	Y+4, r19	; 0x04
    1716:	2b 83       	std	Y+3, r18	; 0x03
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	9c 81       	ldd	r25, Y+4	; 0x04
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	91 05       	cpc	r25, r1
    1720:	89 f0       	breq	.+34     	; 0x1744 <EXTI_u8IntDisable+0x46>
    1722:	2b 81       	ldd	r18, Y+3	; 0x03
    1724:	3c 81       	ldd	r19, Y+4	; 0x04
    1726:	22 30       	cpi	r18, 0x02	; 2
    1728:	31 05       	cpc	r19, r1
    172a:	a1 f0       	breq	.+40     	; 0x1754 <EXTI_u8IntDisable+0x56>
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	9c 81       	ldd	r25, Y+4	; 0x04
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	c1 f4       	brne	.+48     	; 0x1764 <EXTI_u8IntDisable+0x66>
	{
	case INT0 : CLR_BIT(GICR,GICR_INT0); break;
    1734:	ab e5       	ldi	r26, 0x5B	; 91
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	eb e5       	ldi	r30, 0x5B	; 91
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	8f 7b       	andi	r24, 0xBF	; 191
    1740:	8c 93       	st	X, r24
    1742:	12 c0       	rjmp	.+36     	; 0x1768 <EXTI_u8IntDisable+0x6a>
	case INT1 : CLR_BIT(GICR,GICR_INT1); break;
    1744:	ab e5       	ldi	r26, 0x5B	; 91
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	eb e5       	ldi	r30, 0x5B	; 91
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	8f 77       	andi	r24, 0x7F	; 127
    1750:	8c 93       	st	X, r24
    1752:	0a c0       	rjmp	.+20     	; 0x1768 <EXTI_u8IntDisable+0x6a>
	case INT2 : CLR_BIT(GICR,GICR_INT2); break;
    1754:	ab e5       	ldi	r26, 0x5B	; 91
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	eb e5       	ldi	r30, 0x5B	; 91
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	8f 7d       	andi	r24, 0xDF	; 223
    1760:	8c 93       	st	X, r24
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <EXTI_u8IntDisable+0x6a>
	default : Local_u8ErrorState = NOTOK;
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1768:	89 81       	ldd	r24, Y+1	; 0x01
}
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	08 95       	ret

00001778 <EXTI_u8Int0SetCallBack>:

u8 EXTI_u8Int0SetCallBack(void (*Copy_pvInt0Func) (void))
{
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	00 d0       	rcall	.+0      	; 0x177e <EXTI_u8Int0SetCallBack+0x6>
    177e:	0f 92       	push	r0
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	9b 83       	std	Y+3, r25	; 0x03
    1786:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK;
    1788:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt0Func !=NULL)
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	9b 81       	ldd	r25, Y+3	; 0x03
    178e:	00 97       	sbiw	r24, 0x00	; 0
    1790:	39 f0       	breq	.+14     	; 0x17a0 <EXTI_u8Int0SetCallBack+0x28>
	{
		EXTI_pvInt0Func = Copy_pvInt0Func;
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	9b 81       	ldd	r25, Y+3	; 0x03
    1796:	90 93 93 00 	sts	0x0093, r25
    179a:	80 93 92 00 	sts	0x0092, r24
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <EXTI_u8Int0SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStatus = NULL_POINTER;
    17a0:	82 e0       	ldi	r24, 0x02	; 2
    17a2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus;
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <EXTI_u8Int1SetCallBack>:
u8 EXTI_u8Int1SetCallBack(void (*Copy_pvInt1Func) (void))
{
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <EXTI_u8Int1SetCallBack+0x6>
    17b8:	0f 92       	push	r0
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	9b 83       	std	Y+3, r25	; 0x03
    17c0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK;
    17c2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt1Func !=NULL)
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	9b 81       	ldd	r25, Y+3	; 0x03
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	39 f0       	breq	.+14     	; 0x17da <EXTI_u8Int1SetCallBack+0x28>
	{
		EXTI_pvInt1Func = Copy_pvInt1Func;
    17cc:	8a 81       	ldd	r24, Y+2	; 0x02
    17ce:	9b 81       	ldd	r25, Y+3	; 0x03
    17d0:	90 93 95 00 	sts	0x0095, r25
    17d4:	80 93 94 00 	sts	0x0094, r24
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <EXTI_u8Int1SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStatus = NULL_POINTER;
    17da:	82 e0       	ldi	r24, 0x02	; 2
    17dc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus;
    17de:	89 81       	ldd	r24, Y+1	; 0x01
}
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <EXTI_u8Int2SetCallBack>:
u8 EXTI_u8Int2SetCallBack(void (*Copy_pvInt2Func) (void))
{
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <EXTI_u8Int2SetCallBack+0x6>
    17f2:	0f 92       	push	r0
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	9b 83       	std	Y+3, r25	; 0x03
    17fa:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK;
    17fc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt2Func !=NULL)
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	9b 81       	ldd	r25, Y+3	; 0x03
    1802:	00 97       	sbiw	r24, 0x00	; 0
    1804:	39 f0       	breq	.+14     	; 0x1814 <EXTI_u8Int2SetCallBack+0x28>
	{
		EXTI_pvInt2Func = Copy_pvInt2Func;
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	9b 81       	ldd	r25, Y+3	; 0x03
    180a:	90 93 97 00 	sts	0x0097, r25
    180e:	80 93 96 00 	sts	0x0096, r24
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <EXTI_u8Int2SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStatus = NULL_POINTER;
    1814:	82 e0       	ldi	r24, 0x02	; 2
    1816:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus;
    1818:	89 81       	ldd	r24, Y+1	; 0x01
}
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <__vector_1>:
/*ISR of INT0*/
void __vector_1(void)  __attribute__((signal));
void __vector_1(void)
{
    1826:	1f 92       	push	r1
    1828:	0f 92       	push	r0
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	0f 92       	push	r0
    182e:	11 24       	eor	r1, r1
    1830:	2f 93       	push	r18
    1832:	3f 93       	push	r19
    1834:	4f 93       	push	r20
    1836:	5f 93       	push	r21
    1838:	6f 93       	push	r22
    183a:	7f 93       	push	r23
    183c:	8f 93       	push	r24
    183e:	9f 93       	push	r25
    1840:	af 93       	push	r26
    1842:	bf 93       	push	r27
    1844:	ef 93       	push	r30
    1846:	ff 93       	push	r31
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt0Func !=NULL)
    1850:	80 91 92 00 	lds	r24, 0x0092
    1854:	90 91 93 00 	lds	r25, 0x0093
    1858:	00 97       	sbiw	r24, 0x00	; 0
    185a:	29 f0       	breq	.+10     	; 0x1866 <__vector_1+0x40>
	{
		EXTI_pvInt0Func();
    185c:	e0 91 92 00 	lds	r30, 0x0092
    1860:	f0 91 93 00 	lds	r31, 0x0093
    1864:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	ff 91       	pop	r31
    186c:	ef 91       	pop	r30
    186e:	bf 91       	pop	r27
    1870:	af 91       	pop	r26
    1872:	9f 91       	pop	r25
    1874:	8f 91       	pop	r24
    1876:	7f 91       	pop	r23
    1878:	6f 91       	pop	r22
    187a:	5f 91       	pop	r21
    187c:	4f 91       	pop	r20
    187e:	3f 91       	pop	r19
    1880:	2f 91       	pop	r18
    1882:	0f 90       	pop	r0
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	0f 90       	pop	r0
    1888:	1f 90       	pop	r1
    188a:	18 95       	reti

0000188c <__vector_2>:

/*ISR of INT1*/
void __vector_2(void)  __attribute__((signal));
void __vector_2(void)
{
    188c:	1f 92       	push	r1
    188e:	0f 92       	push	r0
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	0f 92       	push	r0
    1894:	11 24       	eor	r1, r1
    1896:	2f 93       	push	r18
    1898:	3f 93       	push	r19
    189a:	4f 93       	push	r20
    189c:	5f 93       	push	r21
    189e:	6f 93       	push	r22
    18a0:	7f 93       	push	r23
    18a2:	8f 93       	push	r24
    18a4:	9f 93       	push	r25
    18a6:	af 93       	push	r26
    18a8:	bf 93       	push	r27
    18aa:	ef 93       	push	r30
    18ac:	ff 93       	push	r31
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt1Func !=NULL)
    18b6:	80 91 94 00 	lds	r24, 0x0094
    18ba:	90 91 95 00 	lds	r25, 0x0095
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	29 f0       	breq	.+10     	; 0x18cc <__vector_2+0x40>
	{
		EXTI_pvInt1Func();
    18c2:	e0 91 94 00 	lds	r30, 0x0094
    18c6:	f0 91 95 00 	lds	r31, 0x0095
    18ca:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	ff 91       	pop	r31
    18d2:	ef 91       	pop	r30
    18d4:	bf 91       	pop	r27
    18d6:	af 91       	pop	r26
    18d8:	9f 91       	pop	r25
    18da:	8f 91       	pop	r24
    18dc:	7f 91       	pop	r23
    18de:	6f 91       	pop	r22
    18e0:	5f 91       	pop	r21
    18e2:	4f 91       	pop	r20
    18e4:	3f 91       	pop	r19
    18e6:	2f 91       	pop	r18
    18e8:	0f 90       	pop	r0
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	0f 90       	pop	r0
    18ee:	1f 90       	pop	r1
    18f0:	18 95       	reti

000018f2 <__vector_3>:
/*ISR of INT2*/
void __vector_3(void)  __attribute__((signal));
void __vector_3(void)
{
    18f2:	1f 92       	push	r1
    18f4:	0f 92       	push	r0
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	0f 92       	push	r0
    18fa:	11 24       	eor	r1, r1
    18fc:	2f 93       	push	r18
    18fe:	3f 93       	push	r19
    1900:	4f 93       	push	r20
    1902:	5f 93       	push	r21
    1904:	6f 93       	push	r22
    1906:	7f 93       	push	r23
    1908:	8f 93       	push	r24
    190a:	9f 93       	push	r25
    190c:	af 93       	push	r26
    190e:	bf 93       	push	r27
    1910:	ef 93       	push	r30
    1912:	ff 93       	push	r31
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt2Func !=NULL)
    191c:	80 91 96 00 	lds	r24, 0x0096
    1920:	90 91 97 00 	lds	r25, 0x0097
    1924:	00 97       	sbiw	r24, 0x00	; 0
    1926:	29 f0       	breq	.+10     	; 0x1932 <__vector_3+0x40>
	{
		EXTI_pvInt2Func();
    1928:	e0 91 96 00 	lds	r30, 0x0096
    192c:	f0 91 97 00 	lds	r31, 0x0097
    1930:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	ff 91       	pop	r31
    1938:	ef 91       	pop	r30
    193a:	bf 91       	pop	r27
    193c:	af 91       	pop	r26
    193e:	9f 91       	pop	r25
    1940:	8f 91       	pop	r24
    1942:	7f 91       	pop	r23
    1944:	6f 91       	pop	r22
    1946:	5f 91       	pop	r21
    1948:	4f 91       	pop	r20
    194a:	3f 91       	pop	r19
    194c:	2f 91       	pop	r18
    194e:	0f 90       	pop	r0
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	0f 90       	pop	r0
    1954:	1f 90       	pop	r1
    1956:	18 95       	reti

00001958 <GIE_voidEnable>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "GIE_Interface.h"
#include "GIE_Register.h"
void GIE_voidEnable(void)
{
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , SREG_I);
    1960:	af e5       	ldi	r26, 0x5F	; 95
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	ef e5       	ldi	r30, 0x5F	; 95
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	80 68       	ori	r24, 0x80	; 128
    196c:	8c 93       	st	X, r24
}
    196e:	cf 91       	pop	r28
    1970:	df 91       	pop	r29
    1972:	08 95       	ret

00001974 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG , SREG_I);
    197c:	af e5       	ldi	r26, 0x5F	; 95
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	ef e5       	ldi	r30, 0x5F	; 95
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	8f 77       	andi	r24, 0x7F	; 127
    1988:	8c 93       	st	X, r24
}
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <PORT_voidInit>:
#include "PORT_Private.h"
#include "PORT_Interface.h"
#include "PORT_Register.h"

void PORT_voidInit(void)
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR ;
    1998:	ea e3       	ldi	r30, 0x3A	; 58
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	8f ef       	ldi	r24, 0xFF	; 255
    199e:	80 83       	st	Z, r24
	DDRB = PORTB_DIR ;
    19a0:	e7 e3       	ldi	r30, 0x37	; 55
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	10 82       	st	Z, r1
	DDRC = PORTC_DIR ;
    19a6:	e4 e3       	ldi	r30, 0x34	; 52
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	8f ef       	ldi	r24, 0xFF	; 255
    19ac:	80 83       	st	Z, r24
	DDRD = PORTD_DIR ;
    19ae:	e1 e3       	ldi	r30, 0x31	; 49
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	10 82       	st	Z, r1
	
	PORTA = PORTA_INITIAL_VALUE  ;
    19b4:	eb e3       	ldi	r30, 0x3B	; 59
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE  ;
    19ba:	e8 e3       	ldi	r30, 0x38	; 56
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE  ;
    19c0:	e5 e3       	ldi	r30, 0x35	; 53
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE  ;
    19c6:	e2 e3       	ldi	r30, 0x32	; 50
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	8f ef       	ldi	r24, 0xFF	; 255
    19cc:	80 83       	st	Z, r24
}
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <main>:
/*Custom characters arrays*/
u8 PingPong[8] = { 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F };
u8 Ball[8]		= { 0x00, 0x0E, 0x0A, 0x0E, 0x00, 0x00, 0x00, 0x00 };
u8 FLAG1 = 0 , FLAG2 = 0;
void main (void)
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	a0 97       	sbiw	r28, 0x20	; 32
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	f8 94       	cli
    19e2:	de bf       	out	0x3e, r29	; 62
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	cd bf       	out	0x3d, r28	; 61
	/*Varibales to hold switches status*/
	u8 SW1_Reading ,SW2_Reading ;

	/*Initializing Ports Direction , LCD , External interrupts , Enable Global interrupt*/
	PORT_voidInit();
    19e8:	0e 94 c8 0c 	call	0x1990	; 0x1990 <PORT_voidInit>
	CLCD_VoidInit();
    19ec:	0e 94 df 06 	call	0xdbe	; 0xdbe <CLCD_VoidInit>
	EXTI_voidInt0_INIT();
    19f0:	0e 94 ee 09 	call	0x13dc	; 0x13dc <EXTI_voidInt0_INIT>
	EXTI_voidInt1_INIT();
    19f4:	0e 94 0a 0a 	call	0x1414	; 0x1414 <EXTI_voidInt1_INIT>
	GIE_voidEnable();
    19f8:	0e 94 ac 0c 	call	0x1958	; 0x1958 <GIE_voidEnable>

	/*Presenting Custom shapes on LCD*/
	CLCD_VoidWriteSpecialCharacter(PingPong , 0 , 0 , 0 );
    19fc:	82 e8       	ldi	r24, 0x82	; 130
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	60 e0       	ldi	r22, 0x00	; 0
    1a02:	40 e0       	ldi	r20, 0x00	; 0
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	0e 94 bb 07 	call	0xf76	; 0xf76 <CLCD_VoidWriteSpecialCharacter>
	CLCD_VoidWriteSpecialCharacter(PingPong , 0 , 0 , 15 );
    1a0a:	82 e8       	ldi	r24, 0x82	; 130
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	60 e0       	ldi	r22, 0x00	; 0
    1a10:	40 e0       	ldi	r20, 0x00	; 0
    1a12:	2f e0       	ldi	r18, 0x0F	; 15
    1a14:	0e 94 bb 07 	call	0xf76	; 0xf76 <CLCD_VoidWriteSpecialCharacter>

	while(1)
	{
		for (u8 counter = 1 ; counter < 15 ; counter++)
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	8e 8f       	std	Y+30, r24	; 0x1e
    1a1c:	ca c0       	rjmp	.+404    	; 0x1bb2 <main+0x1de>
		{
			/*Saving Status of switches in the begining of each loop*/
			SW1_Reading = GET_BIT(PIND,DIO_u8PIN2);
    1a1e:	e0 e3       	ldi	r30, 0x30	; 48
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	86 95       	lsr	r24
    1a26:	86 95       	lsr	r24
    1a28:	81 70       	andi	r24, 0x01	; 1
    1a2a:	88 a3       	std	Y+32, r24	; 0x20
			SW2_Reading = GET_BIT(PIND,DIO_u8PIN3);
    1a2c:	e0 e3       	ldi	r30, 0x30	; 48
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	86 95       	lsr	r24
    1a34:	86 95       	lsr	r24
    1a36:	86 95       	lsr	r24
    1a38:	81 70       	andi	r24, 0x01	; 1
    1a3a:	8f 8f       	std	Y+31, r24	; 0x1f

			/*Changing the position of ball on screen */
			CLCD_VoidWriteSpecialCharacter(Ball , 1 , 0 , counter );
    1a3c:	8a e8       	ldi	r24, 0x8A	; 138
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	61 e0       	ldi	r22, 0x01	; 1
    1a42:	40 e0       	ldi	r20, 0x00	; 0
    1a44:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1a46:	0e 94 bb 07 	call	0xf76	; 0xf76 <CLCD_VoidWriteSpecialCharacter>
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	a8 ec       	ldi	r26, 0xC8	; 200
    1a50:	b3 e4       	ldi	r27, 0x43	; 67
    1a52:	89 8f       	std	Y+25, r24	; 0x19
    1a54:	9a 8f       	std	Y+26, r25	; 0x1a
    1a56:	ab 8f       	std	Y+27, r26	; 0x1b
    1a58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	4a ef       	ldi	r20, 0xFA	; 250
    1a68:	54 e4       	ldi	r21, 0x44	; 68
    1a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	8d 8b       	std	Y+21, r24	; 0x15
    1a74:	9e 8b       	std	Y+22, r25	; 0x16
    1a76:	af 8b       	std	Y+23, r26	; 0x17
    1a78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a80:	98 8d       	ldd	r25, Y+24	; 0x18
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	40 e8       	ldi	r20, 0x80	; 128
    1a88:	5f e3       	ldi	r21, 0x3F	; 63
    1a8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a8e:	88 23       	and	r24, r24
    1a90:	2c f4       	brge	.+10     	; 0x1a9c <main+0xc8>
		__ticks = 1;
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	9c 8b       	std	Y+20, r25	; 0x14
    1a98:	8b 8b       	std	Y+19, r24	; 0x13
    1a9a:	3f c0       	rjmp	.+126    	; 0x1b1a <main+0x146>
	else if (__tmp > 65535)
    1a9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa0:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa2:	98 8d       	ldd	r25, Y+24	; 0x18
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	3f ef       	ldi	r19, 0xFF	; 255
    1aa8:	4f e7       	ldi	r20, 0x7F	; 127
    1aaa:	57 e4       	ldi	r21, 0x47	; 71
    1aac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ab0:	18 16       	cp	r1, r24
    1ab2:	4c f5       	brge	.+82     	; 0x1b06 <main+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ab6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ab8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	40 e2       	ldi	r20, 0x20	; 32
    1ac2:	51 e4       	ldi	r21, 0x41	; 65
    1ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	bc 01       	movw	r22, r24
    1ace:	cd 01       	movw	r24, r26
    1ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	9c 8b       	std	Y+20, r25	; 0x14
    1ada:	8b 8b       	std	Y+19, r24	; 0x13
    1adc:	0f c0       	rjmp	.+30     	; 0x1afc <main+0x128>
    1ade:	88 ec       	ldi	r24, 0xC8	; 200
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	9a 8b       	std	Y+18, r25	; 0x12
    1ae4:	89 8b       	std	Y+17, r24	; 0x11
    1ae6:	89 89       	ldd	r24, Y+17	; 0x11
    1ae8:	9a 89       	ldd	r25, Y+18	; 0x12
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	f1 f7       	brne	.-4      	; 0x1aea <main+0x116>
    1aee:	9a 8b       	std	Y+18, r25	; 0x12
    1af0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af2:	8b 89       	ldd	r24, Y+19	; 0x13
    1af4:	9c 89       	ldd	r25, Y+20	; 0x14
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	9c 8b       	std	Y+20, r25	; 0x14
    1afa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1afc:	8b 89       	ldd	r24, Y+19	; 0x13
    1afe:	9c 89       	ldd	r25, Y+20	; 0x14
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	69 f7       	brne	.-38     	; 0x1ade <main+0x10a>
    1b04:	14 c0       	rjmp	.+40     	; 0x1b2e <main+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b06:	6d 89       	ldd	r22, Y+21	; 0x15
    1b08:	7e 89       	ldd	r23, Y+22	; 0x16
    1b0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	9c 8b       	std	Y+20, r25	; 0x14
    1b18:	8b 8b       	std	Y+19, r24	; 0x13
    1b1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b1e:	98 8b       	std	Y+16, r25	; 0x10
    1b20:	8f 87       	std	Y+15, r24	; 0x0f
    1b22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b24:	98 89       	ldd	r25, Y+16	; 0x10
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <main+0x152>
    1b2a:	98 8b       	std	Y+16, r25	; 0x10
    1b2c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(400);
			CLCD_VoidGoToXY(0,counter);
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1b32:	0e 94 9d 07 	call	0xf3a	; 0xf3a <CLCD_VoidGoToXY>
			CLCD_VoidSendData(' ');
    1b36:	80 e2       	ldi	r24, 0x20	; 32
    1b38:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_VoidSendData>

			/*Check if there is a switch pressed or not*/
			if(SW1_Reading == 0  )
    1b3c:	88 a1       	ldd	r24, Y+32	; 0x20
    1b3e:	88 23       	and	r24, r24
    1b40:	51 f4       	brne	.+20     	; 0x1b56 <main+0x182>
			{
				FLAG1++;
    1b42:	80 91 98 00 	lds	r24, 0x0098
    1b46:	8f 5f       	subi	r24, 0xFF	; 255
    1b48:	80 93 98 00 	sts	0x0098, r24
				EXTI_u8Int0SetCallBack( INT0ISR );
    1b4c:	8e ea       	ldi	r24, 0xAE	; 174
    1b4e:	9e e0       	ldi	r25, 0x0E	; 14
    1b50:	0e 94 bc 0b 	call	0x1778	; 0x1778 <EXTI_u8Int0SetCallBack>
    1b54:	0c c0       	rjmp	.+24     	; 0x1b6e <main+0x19a>
			}
			else if(SW2_Reading == 0  )
    1b56:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b58:	88 23       	and	r24, r24
    1b5a:	49 f4       	brne	.+18     	; 0x1b6e <main+0x19a>
			{
				FLAG2++;
    1b5c:	80 91 99 00 	lds	r24, 0x0099
    1b60:	8f 5f       	subi	r24, 0xFF	; 255
    1b62:	80 93 99 00 	sts	0x0099, r24
				EXTI_u8Int1SetCallBack( INT1ISR );
    1b66:	83 ec       	ldi	r24, 0xC3	; 195
    1b68:	9e e0       	ldi	r25, 0x0E	; 14
    1b6a:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <EXTI_u8Int1SetCallBack>
			}

			/*Write on screen player 2 win if sw1 is pressed and ball at position (0,2) */
			if((FLAG1>0) && (counter ==1))
    1b6e:	80 91 98 00 	lds	r24, 0x0098
    1b72:	88 23       	and	r24, r24
    1b74:	61 f0       	breq	.+24     	; 0x1b8e <main+0x1ba>
    1b76:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b78:	81 30       	cpi	r24, 0x01	; 1
    1b7a:	49 f4       	brne	.+18     	; 0x1b8e <main+0x1ba>
			{
				CLCD_VoidGoToXY(1,1);
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	61 e0       	ldi	r22, 0x01	; 1
    1b80:	0e 94 9d 07 	call	0xf3a	; 0xf3a <CLCD_VoidGoToXY>
				CLCD_VoidSendString("Player 2 win");
    1b84:	80 e6       	ldi	r24, 0x60	; 96
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_VoidSendString>
    1b8c:	0f c0       	rjmp	.+30     	; 0x1bac <main+0x1d8>
			}
			/*Write on screen player 2 win if sw2 is pressed and ball at position (0,14) */
			else if ((FLAG2>0) && (counter ==14))
    1b8e:	80 91 99 00 	lds	r24, 0x0099
    1b92:	88 23       	and	r24, r24
    1b94:	59 f0       	breq	.+22     	; 0x1bac <main+0x1d8>
    1b96:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b98:	8e 30       	cpi	r24, 0x0E	; 14
    1b9a:	41 f4       	brne	.+16     	; 0x1bac <main+0x1d8>
			{
				CLCD_VoidGoToXY(1,1);
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	61 e0       	ldi	r22, 0x01	; 1
    1ba0:	0e 94 9d 07 	call	0xf3a	; 0xf3a <CLCD_VoidGoToXY>
				CLCD_VoidSendString("Player 1 win");
    1ba4:	8d e6       	ldi	r24, 0x6D	; 109
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_VoidSendString>
	CLCD_VoidWriteSpecialCharacter(PingPong , 0 , 0 , 0 );
	CLCD_VoidWriteSpecialCharacter(PingPong , 0 , 0 , 15 );

	while(1)
	{
		for (u8 counter = 1 ; counter < 15 ; counter++)
    1bac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bae:	8f 5f       	subi	r24, 0xFF	; 255
    1bb0:	8e 8f       	std	Y+30, r24	; 0x1e
    1bb2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bb4:	8f 30       	cpi	r24, 0x0F	; 15
    1bb6:	08 f4       	brcc	.+2      	; 0x1bba <main+0x1e6>
    1bb8:	32 cf       	rjmp	.-412    	; 0x1a1e <main+0x4a>
				CLCD_VoidGoToXY(1,1);
				CLCD_VoidSendString("Player 1 win");
			}
		}

		for (u8 counter = 13 ; counter > 1 ; counter--)
    1bba:	8d e0       	ldi	r24, 0x0D	; 13
    1bbc:	8d 8f       	std	Y+29, r24	; 0x1d
    1bbe:	c9 c0       	rjmp	.+402    	; 0x1d52 <main+0x37e>
		{
			/*Saving Status of switches in the begining of each loop*/
			SW1_Reading = GET_BIT(PIND,DIO_u8PIN2);
    1bc0:	e0 e3       	ldi	r30, 0x30	; 48
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	86 95       	lsr	r24
    1bc8:	86 95       	lsr	r24
    1bca:	81 70       	andi	r24, 0x01	; 1
    1bcc:	88 a3       	std	Y+32, r24	; 0x20
			SW2_Reading = GET_BIT(PIND,DIO_u8PIN3);
    1bce:	e0 e3       	ldi	r30, 0x30	; 48
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	86 95       	lsr	r24
    1bd6:	86 95       	lsr	r24
    1bd8:	86 95       	lsr	r24
    1bda:	81 70       	andi	r24, 0x01	; 1
    1bdc:	8f 8f       	std	Y+31, r24	; 0x1f

			/*Changing the position of ball on screen */
			CLCD_VoidWriteSpecialCharacter(Ball , 1 , 0 , counter );
    1bde:	8a e8       	ldi	r24, 0x8A	; 138
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	61 e0       	ldi	r22, 0x01	; 1
    1be4:	40 e0       	ldi	r20, 0x00	; 0
    1be6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1be8:	0e 94 bb 07 	call	0xf76	; 0xf76 <CLCD_VoidWriteSpecialCharacter>
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	a8 ec       	ldi	r26, 0xC8	; 200
    1bf2:	b3 e4       	ldi	r27, 0x43	; 67
    1bf4:	8b 87       	std	Y+11, r24	; 0x0b
    1bf6:	9c 87       	std	Y+12, r25	; 0x0c
    1bf8:	ad 87       	std	Y+13, r26	; 0x0d
    1bfa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	4a ef       	ldi	r20, 0xFA	; 250
    1c0a:	54 e4       	ldi	r21, 0x44	; 68
    1c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	8f 83       	std	Y+7, r24	; 0x07
    1c16:	98 87       	std	Y+8, r25	; 0x08
    1c18:	a9 87       	std	Y+9, r26	; 0x09
    1c1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c1e:	78 85       	ldd	r23, Y+8	; 0x08
    1c20:	89 85       	ldd	r24, Y+9	; 0x09
    1c22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	40 e8       	ldi	r20, 0x80	; 128
    1c2a:	5f e3       	ldi	r21, 0x3F	; 63
    1c2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c30:	88 23       	and	r24, r24
    1c32:	2c f4       	brge	.+10     	; 0x1c3e <main+0x26a>
		__ticks = 1;
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	9e 83       	std	Y+6, r25	; 0x06
    1c3a:	8d 83       	std	Y+5, r24	; 0x05
    1c3c:	3f c0       	rjmp	.+126    	; 0x1cbc <main+0x2e8>
	else if (__tmp > 65535)
    1c3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c40:	78 85       	ldd	r23, Y+8	; 0x08
    1c42:	89 85       	ldd	r24, Y+9	; 0x09
    1c44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	3f ef       	ldi	r19, 0xFF	; 255
    1c4a:	4f e7       	ldi	r20, 0x7F	; 127
    1c4c:	57 e4       	ldi	r21, 0x47	; 71
    1c4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c52:	18 16       	cp	r1, r24
    1c54:	4c f5       	brge	.+82     	; 0x1ca8 <main+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	40 e2       	ldi	r20, 0x20	; 32
    1c64:	51 e4       	ldi	r21, 0x41	; 65
    1c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	bc 01       	movw	r22, r24
    1c70:	cd 01       	movw	r24, r26
    1c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	9e 83       	std	Y+6, r25	; 0x06
    1c7c:	8d 83       	std	Y+5, r24	; 0x05
    1c7e:	0f c0       	rjmp	.+30     	; 0x1c9e <main+0x2ca>
    1c80:	88 ec       	ldi	r24, 0xC8	; 200
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	9c 83       	std	Y+4, r25	; 0x04
    1c86:	8b 83       	std	Y+3, r24	; 0x03
    1c88:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	f1 f7       	brne	.-4      	; 0x1c8c <main+0x2b8>
    1c90:	9c 83       	std	Y+4, r25	; 0x04
    1c92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c94:	8d 81       	ldd	r24, Y+5	; 0x05
    1c96:	9e 81       	ldd	r25, Y+6	; 0x06
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	9e 83       	std	Y+6, r25	; 0x06
    1c9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca2:	00 97       	sbiw	r24, 0x00	; 0
    1ca4:	69 f7       	brne	.-38     	; 0x1c80 <main+0x2ac>
    1ca6:	14 c0       	rjmp	.+40     	; 0x1cd0 <main+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca8:	6f 81       	ldd	r22, Y+7	; 0x07
    1caa:	78 85       	ldd	r23, Y+8	; 0x08
    1cac:	89 85       	ldd	r24, Y+9	; 0x09
    1cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	9e 83       	std	Y+6, r25	; 0x06
    1cba:	8d 83       	std	Y+5, r24	; 0x05
    1cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc0:	9a 83       	std	Y+2, r25	; 0x02
    1cc2:	89 83       	std	Y+1, r24	; 0x01
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <main+0x2f4>
    1ccc:	9a 83       	std	Y+2, r25	; 0x02
    1cce:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(400);
			CLCD_VoidGoToXY(0,counter);
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1cd4:	0e 94 9d 07 	call	0xf3a	; 0xf3a <CLCD_VoidGoToXY>
			CLCD_VoidSendData(' ');
    1cd8:	80 e2       	ldi	r24, 0x20	; 32
    1cda:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_VoidSendData>

			/*Check if there is a switch pressed or not*/
			if(SW1_Reading == 0  )
    1cde:	88 a1       	ldd	r24, Y+32	; 0x20
    1ce0:	88 23       	and	r24, r24
    1ce2:	49 f4       	brne	.+18     	; 0x1cf6 <main+0x322>
			{
				FLAG1++;
    1ce4:	80 91 98 00 	lds	r24, 0x0098
    1ce8:	8f 5f       	subi	r24, 0xFF	; 255
    1cea:	80 93 98 00 	sts	0x0098, r24
				EXTI_u8Int0SetCallBack( INT0ISR );
    1cee:	8e ea       	ldi	r24, 0xAE	; 174
    1cf0:	9e e0       	ldi	r25, 0x0E	; 14
    1cf2:	0e 94 bc 0b 	call	0x1778	; 0x1778 <EXTI_u8Int0SetCallBack>
			}
			if(SW2_Reading == 0  )
    1cf6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cf8:	88 23       	and	r24, r24
    1cfa:	49 f4       	brne	.+18     	; 0x1d0e <main+0x33a>
			{
				FLAG2++;
    1cfc:	80 91 99 00 	lds	r24, 0x0099
    1d00:	8f 5f       	subi	r24, 0xFF	; 255
    1d02:	80 93 99 00 	sts	0x0099, r24
				EXTI_u8Int1SetCallBack( INT1ISR );
    1d06:	83 ec       	ldi	r24, 0xC3	; 195
    1d08:	9e e0       	ldi	r25, 0x0E	; 14
    1d0a:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <EXTI_u8Int1SetCallBack>
			}

			/*Write on screen player 2 win if sw1 is pressed and ball at position (0,2) */
			if((FLAG1>0) && (counter ==1))
    1d0e:	80 91 98 00 	lds	r24, 0x0098
    1d12:	88 23       	and	r24, r24
    1d14:	61 f0       	breq	.+24     	; 0x1d2e <main+0x35a>
    1d16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d18:	81 30       	cpi	r24, 0x01	; 1
    1d1a:	49 f4       	brne	.+18     	; 0x1d2e <main+0x35a>
			{
				CLCD_VoidGoToXY(1,1);
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	61 e0       	ldi	r22, 0x01	; 1
    1d20:	0e 94 9d 07 	call	0xf3a	; 0xf3a <CLCD_VoidGoToXY>
				CLCD_VoidSendString("Player 2 win");
    1d24:	80 e6       	ldi	r24, 0x60	; 96
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_VoidSendString>
    1d2c:	0f c0       	rjmp	.+30     	; 0x1d4c <main+0x378>
			}
			/*Write on screen player 2 win if sw2 is pressed and ball at position (0,14) */
			else if ((FLAG2>0) && (counter ==14))
    1d2e:	80 91 99 00 	lds	r24, 0x0099
    1d32:	88 23       	and	r24, r24
    1d34:	59 f0       	breq	.+22     	; 0x1d4c <main+0x378>
    1d36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d38:	8e 30       	cpi	r24, 0x0E	; 14
    1d3a:	41 f4       	brne	.+16     	; 0x1d4c <main+0x378>
			{
				CLCD_VoidGoToXY(1,1);
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	61 e0       	ldi	r22, 0x01	; 1
    1d40:	0e 94 9d 07 	call	0xf3a	; 0xf3a <CLCD_VoidGoToXY>
				CLCD_VoidSendString("Player 1 win");
    1d44:	8d e6       	ldi	r24, 0x6D	; 109
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_VoidSendString>
				CLCD_VoidGoToXY(1,1);
				CLCD_VoidSendString("Player 1 win");
			}
		}

		for (u8 counter = 13 ; counter > 1 ; counter--)
    1d4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d4e:	81 50       	subi	r24, 0x01	; 1
    1d50:	8d 8f       	std	Y+29, r24	; 0x1d
    1d52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d54:	82 30       	cpi	r24, 0x02	; 2
    1d56:	08 f0       	brcs	.+2      	; 0x1d5a <main+0x386>
    1d58:	33 cf       	rjmp	.-410    	; 0x1bc0 <main+0x1ec>
    1d5a:	5e ce       	rjmp	.-836    	; 0x1a18 <main+0x44>

00001d5c <INT0ISR>:
		}
	}
}

void INT0ISR(void)
{
    1d5c:	df 93       	push	r29
    1d5e:	cf 93       	push	r28
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
	CLCD_VoidGoToXY(0,0);
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	60 e0       	ldi	r22, 0x00	; 0
    1d68:	0e 94 9d 07 	call	0xf3a	; 0xf3a <CLCD_VoidGoToXY>
	CLCD_VoidSendData(' ');
    1d6c:	80 e2       	ldi	r24, 0x20	; 32
    1d6e:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_VoidSendData>
	CLCD_VoidWriteSpecialCharacter(PingPong , 0 , 1 , 0 );
    1d72:	82 e8       	ldi	r24, 0x82	; 130
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	60 e0       	ldi	r22, 0x00	; 0
    1d78:	41 e0       	ldi	r20, 0x01	; 1
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	0e 94 bb 07 	call	0xf76	; 0xf76 <CLCD_VoidWriteSpecialCharacter>
}
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	08 95       	ret

00001d86 <INT1ISR>:
void INT1ISR(void)
{
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
	CLCD_VoidGoToXY(0,15);
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	6f e0       	ldi	r22, 0x0F	; 15
    1d92:	0e 94 9d 07 	call	0xf3a	; 0xf3a <CLCD_VoidGoToXY>
	CLCD_VoidSendData(' ');
    1d96:	80 e2       	ldi	r24, 0x20	; 32
    1d98:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_VoidSendData>
	CLCD_VoidWriteSpecialCharacter(PingPong , 0 , 1 , 15 );
    1d9c:	82 e8       	ldi	r24, 0x82	; 130
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	60 e0       	ldi	r22, 0x00	; 0
    1da2:	41 e0       	ldi	r20, 0x01	; 1
    1da4:	2f e0       	ldi	r18, 0x0F	; 15
    1da6:	0e 94 bb 07 	call	0xf76	; 0xf76 <CLCD_VoidWriteSpecialCharacter>
}
    1daa:	cf 91       	pop	r28
    1dac:	df 91       	pop	r29
    1dae:	08 95       	ret

00001db0 <__prologue_saves__>:
    1db0:	2f 92       	push	r2
    1db2:	3f 92       	push	r3
    1db4:	4f 92       	push	r4
    1db6:	5f 92       	push	r5
    1db8:	6f 92       	push	r6
    1dba:	7f 92       	push	r7
    1dbc:	8f 92       	push	r8
    1dbe:	9f 92       	push	r9
    1dc0:	af 92       	push	r10
    1dc2:	bf 92       	push	r11
    1dc4:	cf 92       	push	r12
    1dc6:	df 92       	push	r13
    1dc8:	ef 92       	push	r14
    1dca:	ff 92       	push	r15
    1dcc:	0f 93       	push	r16
    1dce:	1f 93       	push	r17
    1dd0:	cf 93       	push	r28
    1dd2:	df 93       	push	r29
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
    1dd8:	ca 1b       	sub	r28, r26
    1dda:	db 0b       	sbc	r29, r27
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	f8 94       	cli
    1de0:	de bf       	out	0x3e, r29	; 62
    1de2:	0f be       	out	0x3f, r0	; 63
    1de4:	cd bf       	out	0x3d, r28	; 61
    1de6:	09 94       	ijmp

00001de8 <__epilogue_restores__>:
    1de8:	2a 88       	ldd	r2, Y+18	; 0x12
    1dea:	39 88       	ldd	r3, Y+17	; 0x11
    1dec:	48 88       	ldd	r4, Y+16	; 0x10
    1dee:	5f 84       	ldd	r5, Y+15	; 0x0f
    1df0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1df2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1df4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1df6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1df8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1dfa:	b9 84       	ldd	r11, Y+9	; 0x09
    1dfc:	c8 84       	ldd	r12, Y+8	; 0x08
    1dfe:	df 80       	ldd	r13, Y+7	; 0x07
    1e00:	ee 80       	ldd	r14, Y+6	; 0x06
    1e02:	fd 80       	ldd	r15, Y+5	; 0x05
    1e04:	0c 81       	ldd	r16, Y+4	; 0x04
    1e06:	1b 81       	ldd	r17, Y+3	; 0x03
    1e08:	aa 81       	ldd	r26, Y+2	; 0x02
    1e0a:	b9 81       	ldd	r27, Y+1	; 0x01
    1e0c:	ce 0f       	add	r28, r30
    1e0e:	d1 1d       	adc	r29, r1
    1e10:	0f b6       	in	r0, 0x3f	; 63
    1e12:	f8 94       	cli
    1e14:	de bf       	out	0x3e, r29	; 62
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	cd bf       	out	0x3d, r28	; 61
    1e1a:	ed 01       	movw	r28, r26
    1e1c:	08 95       	ret

00001e1e <_exit>:
    1e1e:	f8 94       	cli

00001e20 <__stop_program>:
    1e20:	ff cf       	rjmp	.-2      	; 0x1e20 <__stop_program>
